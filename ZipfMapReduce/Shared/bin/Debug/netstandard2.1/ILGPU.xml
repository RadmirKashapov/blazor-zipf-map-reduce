<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU</name>
    </assembly>
    <members>
        <member name="T:ILGPU.IArrayView`2">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="P:ILGPU.IArrayView`2.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.IArrayView`2.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="T:ILGPU.IArrayView`1">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="T:ILGPU.ArrayView`1">
            <summary>
            Represents a generic view to a contiguous chunk of memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.ArrayView`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(ILGPU.Runtime.ArrayViewSource,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The base index.</param>
            <param name="length">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`1.Source">
            <summary>
            Returns the associated view source.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.AcceleratorType">
            <summary>
            Returns the associated accelerator type.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Index">
            <summary>
            Returns the index of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddress">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(System.Int32)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(System.Int32,System.Int32)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewLength">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0})~ILGPU.ArrayView{`0,ILGPU.Index1}">
            <summary>
            Converts a linear view to its explicit form.
            </summary>
            <param name="view">The view to convert.</param>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index1})~ILGPU.ArrayView{`0}">
            <summary>
            Converts a linear view from its explicit form.
            </summary>
            <param name="view">The view to convert.</param>
        </member>
        <member name="T:ILGPU.ArrayViewExtensions">
            <summary>
            Array view extension methods
            </summary>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.LoadEffectiveAddress``1(ILGPU.ArrayView{``0})">
            <summary>
            Loads the effective address of the current view.
            This operation is not supported on accelerators.
            </summary>
            <remarks>
            Use with caution since this operation does not make sense with respect to all
            target platforms.
            </remarks>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},System.Int32)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As2DView``1(ILGPU.ArrayView{``0},ILGPU.Index2)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">The extent.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.Index2)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">The height (number of elements in y direction) and depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.Index2,System.Int32)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="extent">The width (number of elements in x direction) and height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},System.Int32,ILGPU.Index2)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="extent">The height (number of elements in y direction) and depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.As3DView``1(ILGPU.ArrayView{``0},ILGPU.Index3)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <param name="view">The view.</param>
            <param name="extent">The extent.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.GetVariableView``1(ILGPU.ArrayView{``0})">
            <summary>
            Returns a variable view to the first element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayViewExtensions.GetVariableView``1(ILGPU.ArrayView{``0},ILGPU.Index1)">
            <summary>
            Returns a variable view to the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="element">The element index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView2D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int32)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index2)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The extent (width, height) (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Rows">
            <summary>
            Returns the rows of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Columns">
            <summary>
            Returns the columns of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetRowView(System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="F:ILGPU.ArrayView2D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index2})">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="baseView">The source view.</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(ILGPU.Index2)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.Index2,ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new raw subview.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous chunk of
            memory that does not pay attention to the actual <see cref="P:ILGPU.ArrayView2D`1.Extent"/>. Instead, it
            converts the (potentially multidemensional) indices to linear indices and returns
            a raw view that spans a contiguous region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetVariableView(ILGPU.Index2)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView2D{`0})~ILGPU.ArrayView{`0,ILGPU.Index2}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index2})~ILGPU.ArrayView2D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView3D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index2,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The width (number of elements in x direction) and height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,ILGPU.Index2)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="extent">The height (number of elements in y direction) and depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index3)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The extent (width, height, depth) (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Depth">
            <summary>
            Returns the depth of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="z">The z index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.Index2,System.Int32)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="xy">The x and y indices.</param>
            <param name="z">The z index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(System.Int32,ILGPU.Index2)">
            <summary>
            Accesses the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="yz">The z and y indices.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetRowView(ILGPU.Index2)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="index">The y index of the row and the z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetRowView(System.Int32,System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSliceView(System.Int32)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="F:ILGPU.ArrayView3D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index3})">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="baseView">The source view.</param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.Index3)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.Index3,ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new raw subview.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous chunk of
            memory that does not pay attention to the actual <see cref="P:ILGPU.ArrayView3D`1.Extent"/>. Instead, it
            converts the (potentially multidemensional) indices to linear indices and returns
            a raw view that spans a contiguous region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetVariableView(ILGPU.Index3)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView3D{`0})~ILGPU.ArrayView{`0,ILGPU.Index3}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index3})~ILGPU.ArrayView3D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView`2">
            <summary>
            Represents a generic view to an n-dimensional chunk of memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="F:ILGPU.ArrayView`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`2.#ctor(ILGPU.ArrayView{`0},`1)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="baseView">The base view.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`2.BaseView">
            <summary>
            Returns the base view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <returns>The new subview.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous chunk of
            memory that does not pay attention to the actual <see cref="P:ILGPU.ArrayView`2.Extent"/>. Instead, it
            converts the (potentially multidemensional) indices to linear indices and returns
            a raw view that spans a contiguous region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1,`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous chunk of
            memory that does not pay attention to the actual <see cref="P:ILGPU.ArrayView`2.Extent"/>. Instead, it
            converts the (potentially multidemensional) indices to linear indices and returns
            a raw view that spans a contiguous region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1,ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new raw subview.</returns>
            <remarks>
            Note that this function interprets the memory view as a linear contiguous chunk of
            memory that does not pay attention to the actual <see cref="P:ILGPU.ArrayView`2.Extent"/>. Instead, it
            converts the (potentially multidemensional) indices to linear indices and returns
            a raw view that spans a contiguous region of memory.
            </remarks>
        </member>
        <member name="M:ILGPU.ArrayView`2.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetVariableView(`1)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.ICompareExchangeOperation`1">
            <summary>
            Represents the base interface for compare-exchange operations.
            </summary>
            <typeparam name="T">The type of the compare-exchange operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.ICompareExchangeOperation`1.CompareExchange(`0@,`0,`0)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.IAtomicOperation`1">
            <summary>
            Represents the base interface for atomic binary operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.IAtomicOperation`1.Operation(`0,`0)">
            <summary>
            Performs the actual atomic binary operation.
            </summary>
            <param name="current">The current value at the target memory location.</param>
            <param name="value">The involved external value.</param>
            <returns>The result of the binary operation.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt32">
            <summary>
            Represents an atomic compare-exchange operation of type int.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt32.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt64">
            <summary>
            Represents an atomic compare-exchange operation of type long.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt64.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt32">
            <summary>
            Represents an atomic compare-exchange operation of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt32.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt64">
            <summary>
            Represents an atomic compare-exchange operation of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt64.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeFloat">
            <summary>
            Represents an atomic compare-exchange operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeFloat.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeDouble.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Atomic">
            <summary>
            Contains atomic functions that are supported on devices.
            </summary>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.Index1@,ILGPU.Index1)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt32@,System.UInt32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt64@,System.UInt64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Single@,System.Single)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Double@,System.Double)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.Index1@,ILGPU.Index1)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.Index1@,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.MakeAtomic``3(``0@,``0,``1,``2)">
            <summary>
            Implements a generic pattern to build custom atomic operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
            <typeparam name="TOperation">The type of the custom atomic operation.</typeparam>
            <typeparam name="TCompareExchangeOperation">The type of the custom compare-exchange-operation logic.</typeparam>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <param name="operation">The custom atomic operation.</param>
            <param name="compareExchangeOperation">The custom compare-exchange-operation logic.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int32@,System.Int32)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int64@,System.Int64)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt32@,System.UInt32)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt64@,System.UInt64)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Single@,System.Single)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Double@,System.Double)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Single@,System.Single)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Double@,System.Double)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Single@,System.Single)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Double@,System.Double)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int32@,System.Int32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int64@,System.Int64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Backends.ISizeOfABI">
            <summary>
            Represents an ABI that can resolve native size information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ISizeOfABI.GetSizeOf(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves the native size in bytes of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The native size.</returns>
        </member>
        <member name="T:ILGPU.Backends.ABI">
            <summary>
            Represents a generic ABI specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.Align(System.Int32,System.Int32)">
            <summary>
            Computes a properly alligned offset in bytes for the given field size.
            </summary>
            <param name="offset">The current.</param>
            <param name="fieldAlignment">The field size in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="T:ILGPU.Backends.ABI.ABITypeInfo">
            <summary>
            Stores ABI information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABITypeInfo.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            Constructs a new ABI information structure.
            </summary>
            <param name="offsets">The offsets in bytes.</param>
            <param name="alignment">The alignment in bytes.</param>
            <param name="size">The size in bytes.</param>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABITypeInfo.Offsets">
            <summary>
            Returns the field offsets in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABITypeInfo.Alignment">
            <summary>
            Returns the native alignment in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABITypeInfo.Size">
            <summary>
            Returns the native size in bytes.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.ABI.basicTypeInformation">
            <summary>
            Contains default size information about built-in types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform,System.Func{System.Int32,ILGPU.Backends.ABI.ABITypeInfo})">
            <summary>
            Constructs a new ABI specification.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="targetPlatform">The target platform</param>
            <param name="viewTypeInfoProvider">The ABI info object provider for a view.</param>
        </member>
        <member name="P:ILGPU.Backends.ABI.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.TargetPlatform">
            <summary>
            Returns the associated target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.PointerType">
            <summary>
            Returns type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.PointerBasicValueType">
            <summary>
            Returns the basic type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.PointerArithmeticType">
            <summary>
            Returns the arithmetic type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.PointerSize">
            <summary>
            The size of a pointer type in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.ViewTypeInfo">
            <summary>
            Returns the associated view-type information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefineBasicTypeInformation(ILGPU.BasicValueType,System.Int32)">
            <summary>
            Defines a new type information for the specified basic value type.
            </summary>
            <param name="basicValueType">The type to define.</param>
            <param name="size">New size information</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.GetOffsetsOf(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves all fields offsets of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved field offsets.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.GetOffsetOf(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Resolves the field offset of the given field in bytes.
            </summary>
            <param name="type">The enclosing type.</param>
            <param name="fieldIndex">The field index.</param>
            <returns>The field offset in bytes.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.GetSizeOf(ILGPU.IR.Types.TypeNode)">
            <summary>
            Ressolves the native size in bytes of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The native size.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.GetAlignmentOf(ILGPU.IR.Types.TypeNode)">
            <summary>
            Ressolves the native alignment in bytes of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The native alignment.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.GetAlignmentAndSizeOf(ILGPU.IR.Types.TypeNode,System.Int32@,System.Int32@)">
            <summary>
            Ressolves the native alignment and size in bytes of the given type.
            </summary>
            <param name="type">The type.</param>
            <param name="size">The native size in bytes.</param>
            <param name="alignment">The type alignment in bytes.</param>
            <returns>The native alignment.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.Align(System.Int32,ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a properly alligned offset in bytes for the given field type.
            </summary>
            <param name="offset">The current (and next offset).</param>
            <param name="type">The field type in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.ResolveABIInfo(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves ABI info for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.ResolveABIInfo(ILGPU.IR.Types.StructureType)">
            <summary>
            Resolves ABI info for the given type information.
            </summary>
            <param name="structureType">The type information.</param>
            <returns>The resolved ABI information.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X86">
            <summary>
            The X86 target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X64">
            <summary>
            The X64 target platform.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendType">
            <summary>
            Represents the general type of a backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.IL">
            <summary>
            An IL backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.PTX">
            <summary>
            A PTX backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.OpenCL">
            <summary>
            An OpenCL source backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendFlags">
            <summary>
            Represents general backend-specific code-generation flags.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendFlags.None">
            <summary>
            The default flags (none).
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend">
            <summary>
            Represents a general ILGPU backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.NoHook">
            <summary>
            No backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary cref="M:ILGPU.Backends.IBackendHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary cref="M:ILGPU.Backends.IBackendHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary cref="M:ILGPU.Backends.IBackendHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext">
            <summary>
            Represents the current kernel context in scope of a backend instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext.Enumerator">
            <summary>
            An enumerator backend methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.#ctor(ILGPU.Backends.Backend.BackendContext@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="context">The current backend context.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.KernelMethod">
            <summary>
            Returns the associated kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.#ctor(ILGPU.IR.IRContext,ILGPU.IR.Method,ILGPU.Backends.ABI)">
            <summary>
            Constructs a new backend context.
            </summary>
            <param name="kernelContext">The current kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
            <param name="abi">The current ABI.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Context">
            <summary>
            The associated kernel context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelScope">
            <summary>
            Returns the associated kernel scope.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelAllocas">
            <summary>
            Returns the associated allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.ScopeProvider">
            <summary>
            Returns the associated scope provider.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedMemorySpecification">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Count">
            <summary>
            Returns the number of all functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.NumFunctions">
            <summary>
            Returns the number of all secondary functions
            excluding the primary kernel function.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.EnsureIntrinsicImplementations``1(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{``0})">
            <summary>
            Ensures that all not-implemented intrinsics have a valid associated
            code generator that will implement this intrinsic.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="provider">The implementation provider to use.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries.
            </summary>
            <returns>An enumerator to enumerate all entries.</returns>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateArgumentMapper">
            <summary>
            Represents a function to create backend-specific argument mappers.
            </summary>
            <param name="context">The current context.</param>
            <param name="abi">The current ABI.</param>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateTransformersHandler">
            <summary>
            Represents a function to create backend-specific transformers.
            </summary>
            <param name="context">The current context.</param>
            <param name="abi">The current ABI.</param>
            <param name="builder">The target transformer builder.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.RuntimePlatform">
            <summary>
            Returns the current execution platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.OSPlatform">
            <summary>
            Returns the native OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RunningOnNativePlatform">
            <summary>
            Returns true iff the current runtime platform is equal to the OS platform.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnNativePlatform">
            <summary>
            Ensures that the current runtime platform is equal to the OS platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnPlatform(ILGPU.Backends.TargetPlatform)">
            <summary>
            Ensures that the current runtime platform is equal to the given platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="platform">The desired target platform.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.GetPlatform(System.Nullable{ILGPU.Backends.TargetPlatform})">
            <summary>
            Returns either the given target platform or the current one.
            </summary>
            <param name="platform">The nullable target platform.</param>
            <returns>The computed target platform.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.ABI,System.Func{ILGPU.Backends.ABI,ILGPU.Backends.EntryPoints.ArgumentMapper})">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="abi">The current ABI.</param>
            <param name="argumentMapperProvider">The provider for argument mappers.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.Context">
            <summary>
            Returns the assigned context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendFlags">
            <summary>
            Returns the associated backend flags.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.Platform">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.ABI">
            <summary>
            Returns the current ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.KernelTransformers">
            <summary>
            Returns the transformer that is applied before the final compilation step.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.InitializeKernelTransformers(System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Precompiles the given entry point description into an IR method.
            </summary>
            <param name="entry">The desired entry point.</param>
            <returns>The pre compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,``0)">
            <summary>
            Precompiles the given entry point description into an IR method.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The pre compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new entry point that is compatible with the current backend.
            </summary>
            <param name="entry">The entry point.</param>
            <param name="backendContext">The current kernel context containing all required functions.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The created entry point.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization and the placement information.
            </summary>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">The current kernel context containing all required functions.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.Backend`1">
            <summary>
            Represents a general ILGPU backend.
            </summary>
            <typeparam name="TDelegate">The intrinsic delegate type for backend implementations.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.ABI,System.Func{ILGPU.Backends.ABI,ILGPU.Backends.EntryPoints.ArgumentMapper})">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="abi">The current ABI.</param>
            <param name="argumentMapperProvider">The provider for argument mappers.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend`1.IntrinsicProvider">
            <summary>
            Returns the current intrinsic provider.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.InitializeKernelTransformers``1(``0,System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <typeparam name="TConfiguration">The configuration type.</typeparam>
            <param name="configuration">The specializer configuration.</param>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.IBackendCodeGenerator`1">
            <summary>
            Represents an abstract code generator that works on a given data type.
            </summary>
            <typeparam name="TKernelBuilder">The data type on which this code generator can work.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateConstants(`0)">
            <summary>
            Generates all constant definitions (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateHeader(`0)">
            <summary>
            Generates a header definition (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateCode">
            <summary>
            Generates the actual function code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)">
            <summary>
            Merges all changes inside the current code generator into the given builder.
            </summary>
            <param name="builder">The builder to merge with.</param>
        </member>
        <member name="T:ILGPU.Backends.CodeGeneratorBackend`4">
            <summary>
            Represents a backend that works on several code generators and kernel builders
            in parallel to speed up code generation.
            </summary>
            <typeparam name="TDelegate">The intrinsic delegate type for backend implementations.</typeparam>
            <typeparam name="T">The main data type.</typeparam>
            <typeparam name="TCodeGenerator">The code-generator type.</typeparam>
            <typeparam name="TKernelBuilder">The kernel-builder type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.#ctor(ILGPU.Context,ILGPU.Backends.BackendType,ILGPU.Backends.BackendFlags,ILGPU.Backends.ABI,System.Func{ILGPU.Backends.ABI,ILGPU.Backends.EntryPoints.ArgumentMapper})">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendType">The backend type.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="abi">The current ABI.</param>
            <param name="argumentMapperProvider">The provider for argument mappers.</param>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary cref="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)"/>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,`1@)">
            <summary>
            Creates the main kernel builder and initializes
            all required information.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="backendContext">The backend context.</param>
            <param name="specialization">The backend specialization.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting kernel builder.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new function-code generator.
            </summary>
            <param name="method">The current method.</param>
            <param name="scope">The associated scope.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created function-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new kernel-code generator.
            </summary>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="method">The current method.</param>
            <param name="scope">The associated scope.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created kernel-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,`3,`1)">
            <summary>
            Creates the final compiled kernel instance.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="builder">The kernel builder.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting compiled kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel">
            <summary>
            Represents a compiled kernel that encapsulates emitted binary code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Constructs a new compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.SourceMethod">
            <summary>
            Represents the source method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.IndexType">
            <summary>
            Returns the index type of the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.ToString">
            <summary>
            Returns the string representation of this kernel.
            </summary>
            <returns>The string representation of this kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper">
            <summary>
            Maps kernel arguments to a compatible representation that
            can be accessed by the native kernel.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource">
            <summary>
            An emission source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)">
            <summary>
            Emits a load command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget">
            <summary>
            An emission target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType">
            <summary>
            Returns the target type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)">
            <summary>
            Emits a target command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource">
            <summary>
            An argument source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.#ctor(System.Type,System.Int32)">
            <summary>
            Constructs a new argument source.
            </summary>
            <param name="type">The argument type.</param>
            <param name="argumentIndex">The argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.ArgumentIndex">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local source.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentSource">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Construct a new structure source.
            </summary>
            <param name="parentSource">The parent source.</param>
            <param name="sourceField">The source field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.ParentSource">
            <summary>
            Returns the parent source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceField">
            <summary>
            Returns the source field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentTarget">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Constructs a new structure target.
            </summary>
            <param name="parentTarget">The parent target.</param>
            <param name="targetField">The target field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.ParentTarget">
            <summary>
            Returns the parent target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetField">
            <summary>
            Returns the target field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.EmitLoadTarget``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> target.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local target.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.EmitLoadTarget``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTarget``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1">
            <summary>
            A view-parameter source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.#ctor(`0@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new view source.
            </summary>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter to map.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.Source">
            <summary>
            Returns the underlying source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.ParameterType">
            <summary>
            Returns the parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.AccessChain">
            <summary>
            Returns the access chain to resolve the actual view instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary>
            Emits a mapping command that maps a kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The target emitter.</param>
            <param name="source">The value source.</param>
            <param name="argumentIndex">The index of the kernel argument.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="viewParameter">The source view parameter.</param>
            <param name="viewArgumentIndex">The argument index.</param>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.ArgumentMapper.typeMapping">
            <summary>
            The internal type mapping (from old to new types).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.TypeInformationManager">
            <summary>
            Returns the associated type-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps a view type to its implementation specific type.
            </summary>
            <param name="viewType">The view type.</param>
            <param name="elementType">The element type.</param>
            <returns>The resulting implementation type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructType(System.Type)">
            <summary>
            Maps the given structure type to a compatible structure type.
            </summary>
            <param name="structType">The structure type to map.</param>
            <returns>The mapped structure type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Registers a type mapping entry and returns the mapped type.
            </summary>
            <param name="type">The source type.</param>
            <param name="mappedType">The target type.</param>
            <returns>The mapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapType(System.Type)">
            <summary>
            Maps the given source type to a compatible target type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The compatible target type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewInstance``3(``0@,``1,``2)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructInstance``3(``0@,``1,``2)">
            <summary>
            Maps a specific structure instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapInstance``3(``0@,``1,``2)">
            <summary>
            Maps a value instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.Map``2(``0@,``1@,ILGPU.Backends.EntryPoints.ParameterCollection@)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="parameters">The parameter collection to map.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViews``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps (potentially nested) views of kernel arguments separately.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="entryPoint">The entry point to use.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPoint">
            <summary>
            Represents a kernel entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Description">
            <summary>
            Returns the associated description instance.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.MethodInfo">
            <summary>
            Returns the associated method info.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IndexType">
            <summary>
            Returns the index type of the index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsExplicitlyGrouped">
            <summary>
            Returns true if the entry point represents an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsImplictlyGrouped">
            <summary>
            Returns true if the entry point represents an implicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.KernelIndexType">
            <summary>
            Returns the index type of the index parameter.
            This can also return the <see cref="T:ILGPU.KernelConfig"/> type in the case of
            an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Parameters">
            <summary>
            Returns the parameter specification of arguments that are passed to the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasByRefParameters">
            <summary>
            Returns true if the parameter specification contains by reference parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Specialization">
            <summary>
            Returns the associated launch specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.NumFlattendedIndexParameters">
            <summary>
            Returns the number of index parameters when all structures
            are flattended into scalar parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.SharedMemory">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.CreateLauncherMethod(ILGPU.Context,System.Type)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="context">The current context.</param>
            <param name="instanceType">The instance type (if any).</param>
            <returns>The method emitter that represents the launcher method.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification">
            <summary>
            Represents a shared memory specification of a specific kernel.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SharedMemorySpecification.Constructor">
            <summary>
            Represents the associated constructor taking two integer parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SharedMemorySpecification.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new shared memory specification.
            </summary>
            <param name="staticSize">The static shared memory size.</param>
            <param name="hasDynamicMemory">True, if this specification requires dynamic shared memory..</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasStaticMemory">
            <summary>
            Returns true if the current specification required static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasDynamicMemory">
            <summary>
            Returns true if the current specification requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPointDescription">
            <summary>
            Specifies an entry point method including its associated index type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromExplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is compatible
            with explicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromImplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is compatible
            with implicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],ILGPU.IndexType)">
            <summary>
            Constructs a new entry point description.
            </summary>
            <param name="methodSource">The method source.</param>
            <param name="parameters">The raw array of attached kernel parameters.</param>
            <param name="indexType">The index type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.MethodSource">
            <summary>
            Returns the kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.IndexType">
            <summary>
            Returns the associated index type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.Parameters">
            <summary>
            Returns all parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Validate">
            <summary>
            Validates this object and throws a <see cref="T:System.NotSupportedException"/> in the case
            of a not supported kernel configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.CreateLauncherMethod(ILGPU.Context,System.Type)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="context">The current context.</param>
            <param name="instanceType">The instance type (if any).</param>
            <returns>The method emitter that represents the launcher method.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the given description is equal to the current one.
            </summary>
            <param name="other">The other description.</param>
            <returns>True, if the given cached key is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Equality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are the same.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Inequality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are not the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are not the same.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection">
            <summary>
            The parameter specification of an entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type enumerator.
            </summary>
            <param name="source">The source array.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter">
            <summary>
            Represents a parameter that is annotated with the help of the <see cref="T:ILGPU.Runtime.SpecializedValue`1"/>
            structure to enable dynamic specialization of kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.#ctor(System.Int32,System.Type,System.Type)">
            <summary>
            Constructs a new specialized parameter.
            </summary>
            <param name="index">The referenced parameter index.</param>
            <param name="parameterType">The raw parameter type.</param>
            <param name="specializedType">The specialized parameter type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.SpecializedType">
            <summary>
            Returns the specialized parameter type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type collection.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Count">
            <summary>
            Returns the number of parameter types.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.ParameterTypes">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameters">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.HasSpecializedParameters">
            <summary>
            Returns true if this collection has specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the underlying parameter type (without references).
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The desired parameter type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.IsByRef(System.Int32)">
            <summary>
            Returns true if the specified parameter is passed by reference.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>True, if the specified parameter is passed by reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.CopyTo(System.Type[],System.Int32)">
            <summary>
            Copies the parameter types to the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="offset">The target offset to copy to.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#Generic#IEnumerable{System#Type}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint">
            <summary>
            An entry point that differentiates between views and data structures.
            </summary>
            <remarks>
            This is useful since many APIs (like OpenCL) require intrinsic support for
            passing views to kernels via separate API calls.
            </remarks>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter">
            <summary>
            Represents a single view parameter in the scope of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.#ctor(System.ValueTuple{ILGPU.IR.Types.TypeInformationManager.TypeInformation,System.Int32}@,System.Collections.Immutable.ImmutableArray{System.Int32},System.Type,System.Type)">
            <summary>
            Constructs a new view parameter.
            </summary>
            <param name="parameter">The parameter info.</param>
            <param name="accessChain">The current access chain.</param>
            <param name="elementType">The element type of the view.</param>
            <param name="viewType">The source view type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterType">
            <summary>
            Returns the associated parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterIndex">
            <summary>
            Returns the associated kernel-parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.AccessChain">
            <summary>
            Returns the access chain to assign the view parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ViewType">
            <summary>
            Returns the associated array-view type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection">
            <summary>
            Represents a readonly list of view parameters.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator">
            <summary>
            An enumerator to enumerate all view parameters in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Index">
            <summary>
            Returns the current index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,System.Int32,System.Int32)">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="entryPoint">The parent entry point.</param>
            <param name="startIndex">The start index (inclusive).</param>
            <param name="endIndex">The end index (exclusive).</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.StartIndex">
            <summary>
            Returns the start index (inclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Count">
            <summary>
            Returns the number of view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th view parameter.
            </summary>
            <param name="index">The index of the view parameter to get.</param>
            <returns>The desired view parameter.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all parameters in this collection.
            </summary>
            <returns>An enumerator to enumerate all parameters in this collection.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#Backends#EntryPoints#SeparateViewEntryPoint#ViewParameter}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.viewParameterMapping">
            <summary>
            Maps parameter indices to view-parameter intervals.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Types.TypeInformationManager)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="typeInformationManager">The information manager to use.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ResolveVirtualViewParameters(System.Collections.Immutable.ImmutableArray{ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter}.Builder,System.ValueTuple{ILGPU.IR.Types.TypeInformationManager.TypeInformation,System.Int32}@,ILGPU.IR.Types.TypeInformationManager.TypeInformation,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Analyzes the given parameter types and resolves all virtual
            view parameters that should be passed separately.
            </summary>
            <param name="builder">The target builder to append to.</param>
            <param name="parameter">The parameter info.</param>
            <param name="type">The current type.</param>
            <param name="accessChain">The current access chain.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.NumViewParameters">
            <summary>
            Returns the number of all separate view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameters">
            <summary>
            Contains all separate view parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.TryGetViewParameters(System.Int32,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Tries to get view parameters for the given kernel-parameter index.
            </summary>
            <param name="parameterIndex">The kernel-parameter index.</param>
            <param name="viewParameters">The resolved view parameters (if any).</param>
            <returns>True, if view parameters could be determined.</returns>
        </member>
        <member name="T:ILGPU.Backends.IBackendHook">
            <summary>
            Represents a custom backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Completed all frontend operations.
            </summary>
            <param name="context">The main context.</param>
            <param name="entryPoint">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Initialized the kernel context via imports of the required
            kernel function.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performed final kernel optimization steps.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.DefaultILBackend">
            <summary>
            The default IL backend that uses the original kernel method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.GenerateLocals``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.ILBackend.GenerateLocals``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary cref="M:ILGPU.Backends.IL.ILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)"/>
        </member>
        <member name="T:ILGPU.Backends.IL.ILABI">
            <summary>
            Represents a platform-dependent IL ABI.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.IL.ILABI.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new IL ABI
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="targetPlatform">The target platform</param>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend">
            <summary>
            The basic MSIL backend for the CPU runtime.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend.KernelGenerationData">
            <summary>
            Contains important global variable references.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.UserGridDim">
            <summary>
            Maps the grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.Index">
            <summary>
            Maps the current thread index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.KernelNotInvoked">
            <summary>
            The intrinsic kernel invocation variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.LoopHeader">
            <summary>
            The current loop header.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.LoopBody">
            <summary>
            The current loop body.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.ChunkIdxCounter">
            <summary>
            The chunk index counter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.BreakCondition">
            <summary>
            The loop break condition.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.KernelGenerationData.Uniforms">
            <summary>
            The uniform references.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.KernelGenerationData.SetupUniforms(System.Collections.Immutable.ImmutableArray{ILGPU.Backends.IL.ILLocal})">
            <summary>
            Setups the given uniform variables.
            </summary>
            <param name="uniformVariables">The variables to setup.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.#ctor(ILGPU.Context,ILGPU.Backends.BackendFlags,System.Int32,System.Func{ILGPU.Backends.ABI,ILGPU.Backends.EntryPoints.ArgumentMapper})">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="backendFlags">The backend flags.</param>
            <param name="warpSize">The current warp size.</param>
            <param name="argumentMapperProvider">The provider for argument mappers.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.WarpSize">
            <summary>
            Returns the associated warp size.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary cref="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary>
            Generates the actual kernel code.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">The current backend context.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ILGPU.Backends.EntryPoints.ParameterCollection@,System.Reflection.ConstructorInfo@,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo}@)">
            <summary>
            Generates specialized task classes for kernel execution.
            </summary>codeEmitter
            <param name="parameters">The parameter collection.</param>
            <param name="taskConstructor">The created task constructor.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields in the task class.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateStartupCode``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Type,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo})">
            <summary>
            Generates kernel startup code.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
            <param name="taskType">The created task.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields in the task class.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateLocals``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)">
            <summary>
            Generates the the required local variables (e.g. shared memory).
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms</param>
            <param name="task">The task variable.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateFinishCode``1(``0,ILGPU.Backends.IL.ILBackend.KernelGenerationData)">
            <summary>
            Generates the kernel finish code.
            </summary>
            <param name="emitter">The current code generator.</param>
            <param name="kernelData">The current kernel data.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.ILCompiledKernel">
            <summary>
            Represents a compiled kernel in MSIL form.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,System.Reflection.MethodInfo,System.Type,System.Reflection.ConstructorInfo,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo})">
            <summary>
            Constructs a new IL compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="kernelMethod">The main kernel method.</param>
            <param name="taskType">The custom task type.</param>
            <param name="taskConstructor">The custom task constructor.</param>
            <param name="taskArgumentMapping">Mapping of argument indices to fields.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.ExecutionHandler">
            <summary>
            Returns a CPU-runtime compatible execution handler.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskType">
            <summary>
            Returns the custom task type to dispatch the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskConstructor">
            <summary>
            Returns the task constructor to instantiate the custom task type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskArgumentMapping">
            <summary>
            Returns a mapping of argument indices to fields.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLocal">
            <summary>
            Represents a local variable in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLocal.#ctor(System.Int32,System.Type)">
            <summary>
            Constructs a new local variable in MSIL.
            </summary>
            <param name="index">The variable index.</param>
            <param name="type">The variable type.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.VariableType">
            <summary>
            Returns the variable type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLabel">
            <summary>
            Represents a label in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLabel.#ctor(System.Int32)">
            <summary>
            Constructs a new label.
            </summary>
            <param name="index">The label index.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLabel.Index">
            <summary>
            Returns the assinged label index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.LocalOperation">
            <summary>
            A local operation on a variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Load">
            <summary>
            Loads a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.LoadAddress">
            <summary>
            Loads the address of a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Store">
            <summary>
            Stores a local variable.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ArgumentOperation">
            <summary>
            An operation on a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.Load">
            <summary>
            Loads an argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.LoadAddress">
            <summary>
            Loads the address of an argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.IILEmitter">
            <summary>
            Represents an emitter for MSIL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="type">The variable type.</param>
            <returns>The variable reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The label reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary>
            Marks the given label by associating the current
            instruction pointer with the jump label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Emits a new local-variable operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="local">The local variable reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary>
            Emits a new argument operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="argumentIndex">The argument reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary>
            Emits a new call to the given method.
            </summary>
            <param name="target">The target to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a new object instruction.
            </summary>
            <param name="info">The constructor to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)">
            <summary>
            Emits a local memory allocation.
            </summary>
            <param name="size">The size in bytes to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="label">The label argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="type">The type argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="field">The field argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary>
            Emits a switch instruction.
            </summary>
            <param name="labels">The jump targets.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Finish">
            <summary>
            Finishes the code generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitter">
            <summary>
            A default IL emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Constructs a new IL emitter.
            </summary>
            <param name="generator">The associated IL generator.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILEmitter.Generator">
            <summary>
            Returns the underlying generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.DebugILEmitter">
            <summary>
            Represents an IL emitter for debugging purposes.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs a new IL emitter for debugging purposes.
            </summary>
            <param name="writer">The associated text writer.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.DebugILEmitter.Writer">
            <summary>
            Returns the associated stream writer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitterExtensions">
            <summary>
            General IL emitter extensions methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEqualsAndHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates hash code and equals functions for the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new hash code function.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created hash code function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new typed equals method using the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Generates a new object equals method using the given typed equals overload.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="equalsInfo">The typed equals function to call.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="T:ILGPU.Backends.IL.ILTypeGenerator">
            <summary>
            Generates type in the .Net world.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.VoidType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.VoidType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.StringType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StringType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.PrimitiveType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PrimitiveType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.PointerType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PointerType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.ArrayType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ArrayType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.StructureType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StructureType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.TypeVisitor.Visit(ILGPU.IR.Types.HandleType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.HandleType)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.#ctor(ILGPU.Context)">
            <summary>
            Creates a new IL type generator.
            </summary>
            <param name="context">The associated context.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILTypeGenerator.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILTypeGenerator.TypeInformationManager">
            <summary>
            Returns the underlying type information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.MapType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Maps the given type.
            </summary>
            <param name="typeNode">The type node to map.</param>
            <returns>The mapped type entry.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILTypeGenerator.GenerateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Generates a .Net type representation for the given type node.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The .Net type representation.</returns>
        </member>
        <member name="T:ILGPU.Backends.IL.RuntimeMethods">
            <summary>
            A container for CPU-based runtime methods.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.WaitForNextThreadIndex">
            <summary>
            Returns the main runtime wait and initialize method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.BarrierMethod">
            <summary>
            Returns the main barrier method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.MemoryBarrierMethod">
            <summary>
            Returns the memory barrier method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.RuntimeMethods.GetSharedMemoryViewMethod">
            <summary>
            Returns a method to get a shared memory view.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend">
            <summary>
            The default IL backend that uses the original kernel method.
            However, it does not generate general IR code (debugging purposes).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.SharedMemoryPerKernel">
            <summary>
            The default amount of shared memory per kernel in bytes.
            </summary>
            <remarks>
            Note that this amount is only valid in the scope of the <see cref="F:ILGPU.ContextFlags.SkipCPUCodeGeneration"/>
            setting.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.SkipCodeGenerationDefaultILBackend.Compile``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <typeparam name="TBackendHandler">The backend handler type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHandler">The backend handler.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="T:ILGPU.Backends.InvalidCodeGenerationException">
            <summary>
            An exception that is thrown in case of a fatal error in a backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.NotSupportedIntrinsicException">
            <summary>
            An exception that is thrown in case of a not support intrinsic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicMethod">The IR method that could not be implemented.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicName">The name of the not supported intrinsic.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLABI">
            <summary>
            Represents a platform-dependent OpenCL ABI.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLABI.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new OpenCL ABI
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="targetPlatform">The target platform</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper">
            <summary>
            Constructs mappings for CL kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgumentMethod">
            <summary>
            The method to set OpenCL kernel arguments.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.#ctor(`0)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">The local variable holding the associated kernel reference.</param>
            <param name="resultLocal">The local variable holding the result API status.</param>
            <param name="startIndex">The start argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.StartIndex">
            <summary>
            Returns the start argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler.MapArgument``2(``0@,``1,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.#ctor(`0,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Parameter">
            <summary>
            The associated parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSource``1(``0@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">The local variable holding the associated kernel reference.</param>
            <param name="resultLocal">The local variable holding the result API status.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.#ctor(ILGPU.Context,ILGPU.Backends.ABI)">
            <summary>
            Constructs a new OpenCL argument mapper.
            </summary>
            <param name="context">The current context.</param>
            <param name="abi">The current ABI.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ABI">
            <summary>
            Returns the associated OpenCL ABI.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.GetSizeOf(System.Type)">
            <summary>
            Returns the ABI size of the given managed type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interop size in bytes.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgument``2(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32,``1@)">
            <summary>
            Emits code that sets an OpenCL kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="kernelLocal">The local variable holding the associated kernel reference.</param>
            <param name="resultLocal">The local variable holding the result API status.</param>
            <param name="argumentIndex">The argument index.</param>
            <param name="source">The value source.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.Map``1(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps all parameters of the given entry point using
            OpenCL API calls.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="kernel">A local that holds the kernel driver reference.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLBackend">
            <summary>
            Represents an OpenCL source backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLBackend.IntrinsicSpecializerConfiguration">
            <summary>
            The kernel specializer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.IntrinsicSpecializerConfiguration.#ctor(ILGPU.ContextFlags)">
            <summary>
            Constructs a new specializer configuration.
            </summary>
            <param name="flags">The associated context flags.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.IntrinsicSpecializerConfiguration.ContextFlags">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.IntrinsicSpecializerConfiguration.EnableAssertions">
            <summary cref="P:ILGPU.IR.Transformations.IIntrinsicSpecializerConfiguration.EnableAssertions"/>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLBackend.MinimumVersion">
            <summary>
            Represents the minimum OpenCL C version that is required.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.#ctor(ILGPU.Context,ILGPU.Backends.TargetPlatform,ILGPU.Runtime.OpenCL.CLAcceleratorVendor)">
            <summary>
            Constructs a new OpenCL source backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="platform">The target platform.</param>
            <param name="vendor">The associated major vendor.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.Vendor">
            <summary>
            Returns the associated major accelerator vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary cref="M:ILGPU.Backends.Backend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,`1@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,System.Text.StringBuilder,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,`3,`1)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator">
            <summary>
            Generates OpenCL source code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.ABI">
            <summary>
            Returns the associated ABI.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to OpenCL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.VariableAllocator.Variable,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="variable">The OpenCL variable.</param>
            <param name="clName">The name of the parameter in OpenCL code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Variable">
            <summary>
            Returns the associated OpenCL variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.CLName">
            <summary>
            Returns the name of the parameter in OpenCL code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic">
            <summary>
            Represents a parameter logic to setup function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.GetOrCreateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets or creates the given type in OpenCL code.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The resulting OpenCL type representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated variable (if any).
            </summary>
            <param name="parameterOffset">The current intrinsic parameter index.</param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated variable (if any).</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator">
            <summary>
            Represents a specialized phi binding allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Analyses.CFG)">
            <summary>
            Constructs a new phi binding allocator.
            </summary>
            <param name="parent">The parent code generator.</param>
            <param name="cfg">The CFG to use.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Parent">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Dominators">
            <summary>
            Returns the referenced dominators.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Process(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.Phis)">
            <summary cref="M:ILGPU.Backends.IPhiBindingAllocator.Process(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.Phis)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.Allocate(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IPhiBindingAllocator.Allocate(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PhiBindingAllocator.TryGetPhis(ILGPU.IR.BasicBlock,System.Collections.Generic.List{ILGPU.Backends.VariableAllocator.Variable}@)">
            <summary>
            Tries to get phi variables to declare in the given block.
            </summary>
            <param name="block">The block.</param>
            <param name="phisToDeclare">The variables to declare (if any).</param>
            <returns>True, if there are some phi variables to declare.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the OpenCL function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved OpenCL function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the OpenCL parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved OpenCL parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Scope">
            <summary>
            Returns the current function scope.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.ABI">
            <summary>
            Returns the current ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Generates parameter declarations by writing them to the
            target builder provided.
            </summary>
            <typeparam name="TSetupLogic">The dependent code-generator type to use.</typeparam>
            <param name="logic">The type generator to use.</param>
            <param name="targetBuilder">The target builder to use.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupAllocations(ILGPU.IR.Analyses.AllocaKindInformation,System.String)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpacePrefix">The source address-space prefix (like .local).</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCodeInternal">
            <summary>
            Generates code for all basic blocks.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter">
            <summary>
            Generates OpenCL source statements.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator)">
            <summary>
            Constructs a new statement emitter using the given target.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CodeGenerator">
            <summary>
            Returns the associated codegenerator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginAppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Starts a target assignment.
            </summary>
            <param name="target">The target.</param>
            <param name="appendNew">True, to append a new variable target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendDeclaration(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends a target declaration.
            </summary>
            <param name="target">The target declaration.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Appends a target.
            </summary>
            <param name="target">The target.</param>
            <param name="newTarget">True, if this a new target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexedTarget(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer target.
            </summary>
            <param name="target">The target.</param>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldTarget(ILGPU.Backends.VariableAllocator.Variable,System.Int32)">
            <summary>
            Appends a field target.
            </summary>
            <param name="target">The target.</param>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldTarget(ILGPU.Backends.VariableAllocator.Variable,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Appends a field target via an access chain.
            </summary>
            <param name="target">The target.</param>
            <param name="accessChain">The field access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(System.String)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendPointerCast(System.String)">
            <summary>
            Appends an unsafe pointer cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(System.String)">
            <summary>
            Appends an unsafe cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendAtomicCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a pointer cast to an intrinsic atomic pointer type.
            </summary>
            <param name="type">The arithmetic type to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.BasicValueType)">
            <summary>
            Appends a cast to the given basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a cast to the given arithmetic basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.IR.Types.TypeNode)">
            <summary>
            Appends a cast to the given type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCommand(System.String)">
            <summary>
            Appends the given raw command.
            </summary>
            <param name="command">The command to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.TryAppendViewPointerField(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Tries to append a pointer-field accessor (if possible).
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldName(System.Int32)">
            <summary>
            Appends the specified field name.
            </summary>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldViaPtr(System.Int32)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(System.Int32)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Appends a referenced field via an access chain.
            </summary>
            <param name="accessChain">The field access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.OpenParen">
            <summary>
            Opens a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CloseParen">
            <summary>
            Closes a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginArguments">
            <summary>
            Starts a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.EndArguments">
            <summary>
            Ends a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Append(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given variable directly.
            </summary>
            <param name="variable">The variable to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddress(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the address of the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddressWithCast(ILGPU.Backends.VariableAllocator.Variable,System.String)">
            <summary>
            Appends the address of the given register argument with a cast.
            </summary>
            <param name="argument">The argument to append.</param>
            <param name="typeExpression">Appends an unsafe cast expression</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendOperation(System.String)">
            <summary>
            Append ths given operation.
            </summary>
            <param name="operation">The operation to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Indent">
            <summary>
            The current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushIndent">
            <summary>
            Increases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PopIndent">
            <summary>
            Decreases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.AppendIndent">
            <summary>
            Appends the current indentation level to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushAndAppendIndent">
            <summary>
            Pushes the current indentation level and appends it to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Declare(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Declares a variable
            </summary>
            <param name="target">The target variable to declare.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GotoStatement(ILGPU.IR.BasicBlock)">
            <summary>
            Emits a new goto statement to the given target block.
            </summary>
            <param name="block">The target block to jump to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Move(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Emits a move operation.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="source">The source variable to assign to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.Int32)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldIndex">The field index to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldIndices">The field indices to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="indexer">The indexer variable to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.String)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(System.String)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.ConditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Predicate)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Predicate)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.EmitNull(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Types.TypeNode,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Emits a new null constant of the given type.
            </summary>
            <param name="variable">The target variable to write to.</param>
            <param name="type">The current type.</param>
            <param name="accessChain">The access chain to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SizeOfValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SizeOfValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GetElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetElement)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SetElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetElement)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.HandleValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.DebugOperation)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.NewView)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MakeNullView(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Types.ViewType,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Creates a new empty view.
            </summary>
            <param name="value">The source value.</param>
            <param name="viewType">The view type.</param>
            <param name="accessChain">The access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.ViewCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCompiledKernel">
            <summary>
            Represents a compiled kernel in OpenCL source form.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCompiledKernel.EntryName">
            <summary>
            The entry name of the kernel function.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,System.String,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Constructs a new compiled kernel in OpenCL source form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="source">The source code.</param>
            <param name="version">The OpenCL C version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.Source">
            <summary>
            Returns the OpenCL source code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.CVersion">
            <summary>
            Returns the used OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCVersion">
            <summary>
            Represents an OpenCL C version.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL10">
            <summary>
            The OpenCL C version 1.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL11">
            <summary>
            The OpenCL C version 1.1.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL12">
            <summary>
            The OpenCL C version 1.2.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL20">
            <summary>
            The OpenCL C version 2.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.VersionRegex">
            <summary>
            The internal regex that is used to parse OpenCL C versions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.TryParse(System.String,ILGPU.Backends.OpenCL.CLCVersion@)">
            <summary>
            Tries to parse the given string expression into an OpenCL C version.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="version">The parsed version (if any).</param>
            <returns>True, if the given expression could be parsed into an OpenCL C version.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new OpenCL C version.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Major">
            <summary>
            The major OpenCL C Version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Minor">
            <summary>
            The minor OpenCL C Version.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.ToString">
            <summary>
            Returns the OpenCL C string representation that is compatible
            with the OpenCL API.
            </summary>
            <returns>The string representation of this OpenCL C version.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLFunctionGenerator.MethodFlagsToSkip">
            <summary>
            Methods with these flags will be skipped during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLoggic">
            <summary>
            A specialized function setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLoggic.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new specialized function setup logic.
            </summary>
            <param name="typeGenerator">The parent type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLoggic.TypeGenerator">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLoggic.GetOrCreateType(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.GetOrCreateType(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLoggic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeaderStub(System.Text.StringBuilder)">
            <summary>
            Generates a header stub for the current method.
            </summary>
            <param name="builder">The target builder to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLInstructions">
            <summary>
            Contains general OpenCL instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAddressSpacePrefix(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves an address-space-cast prefix.
            </summary>
            <param name="addressSpace">The address space.</param>
            <returns>The resolved address-space prefix.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetAddressSpaceCast(ILGPU.IR.MemoryAddressSpace,System.String@)">
            <summary>
            Trues to resolve an address-space-cast operation.
            </summary>
            <param name="addressSpace">The target address space to convert to.</param>
            <param name="operation">The resolved address-space-cast operation.</param>
            <returns>True, if an operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,System.Boolean,System.Boolean@)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="isFunction">True, if the resolved operation is a function call.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,System.Boolean,System.Boolean@)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="isFunction">True, if the resolved operation is a function call.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,System.Boolean,System.String@)">
            <summary>
            Tries to resolve a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="operation">The resolved operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,System.String@)">
            <summary>
            Tries to resolve a predicate-barrier operation.
            </summary>
            <param name="operation">The resolved memory-barrier operation.</param>
            <param name="kind">The barrier kind.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind,System.String@)">
            <summary>
            Tries to resolve a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <param name="memoryScope">The resolved memory-barrier scope.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryFenceFlags(System.Boolean)">
            <summary>
            Resolves memory-fence flags.
            </summary>
            <param name="isGlobal">True, if the flags represent global memory.</param>
            <returns>The resolved fence flags.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetShuffleOperation(ILGPU.Runtime.OpenCL.CLAcceleratorVendor,ILGPU.IR.Values.ShuffleKind,System.String@)">
            <summary>
            Tries to resolve a shuffle operation.
            </summary>
            <param name="vendor">The accelerator vendor.</param>
            <param name="kind">The shuffle kind.</param>
            <param name="operation">The resolved shuffle operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBroadcastOperation(ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Resolves a broadcast operation.
            </summary>
            <param name="kind">The broadcast kind.</param>
            <returns>The resolved broadcast operation.</returns>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AddressOfOperation">
            <summary>
            An address-of operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DereferenceOperation">
            <summary>
            A dereference operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AssignmentOperation">
            <summary>
            An assignment operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation1">
            <summary>
            The first part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation2">
            <summary>
            The second part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IfStatement">
            <summary>
            An if statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ElseStatement">
            <summary>
            An else statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.BreakStatement">
            <summary>
            A break statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ContinueStatement">
            <summary>
            A continue statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ReturnStatement">
            <summary>
            A return statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GotoStatement">
            <summary>
            A goto statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicLoadOperation">
            <summary>
            A atomic load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicStoreOperation">
            <summary>
            A atomic store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IntAsFloat">
            <summary>
            An int-as-float operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.LongAsDouble">
            <summary>
            An long-as-double operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.FloatAsInt">
            <summary>
            A float-as-int operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DoubleAsLong">
            <summary>
            A double-as-long operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGlobalId">
            <summary>
            Resolves the current global work-item id.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridSize">
            <summary>
            Resolves the current grid size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridIndex">
            <summary>
            Resolves the current grid index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupSize">
            <summary>
            Resolves the current group size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupIndex">
            <summary>
            Resolves the current group index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpSize">
            <summary>
            Resolves the current warp size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpIndexOperation">
            <summary>
            Resolves the current warp index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetLaneIndexOperation">
            <summary>
            Resolves the current lane index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.OpenCL.CLBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelViewNameFormat">
            <summary>
            The string format of a kernel-view parameter name.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic">
            <summary>
            A specialized kernel setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.#ctor(ILGPU.Backends.OpenCL.CLKernelFunctionGenerator)">
            <summary>
            Constructs a new specialized kernel setup logic.
            </summary>
            <param name="generator">The parent generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.IndexVariable">
            <summary>
            Returns the main index variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.LengthVariable">
            <summary>
            Returns the length variable of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.GetOrCreateType(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.GetOrCreateType(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateArgumentMappingAssignment(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Types.TypeNode,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Generates a set of instructions to copy input information to its
            internal structure representation.
            </summary>
            <param name="source">The source variable to copy from.</param>
            <param name="target">The target variable to copy to.</param>
            <param name="typeNode">The current type.</param>
            <param name="accessChain">The current access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateArgumentMapping(System.Int32)">
            <summary>
            Generates code that wires kernel-specific arguments into internal arguments.
            </summary>
            <param name="paramOffset">The parameter offset.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateViewWiring(ILGPU.Backends.VariableAllocator.Variable[],System.Int32)">
            <summary>
            Generates code that wires custom view parameters and all other data structures
            that are passed to a kernel.
            </summary>
            <param name="oldVariables">All old variables that have the be bound.</param>
            <param name="paramOffset">The parameter offset.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EmitImplicitKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable,System.Collections.Immutable.ImmutableArray{System.Int32},System.Int32)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="indexVariable">The index variable to write to.</param>
            <param name="boundsVariable">The associated bounds variable.</param>
            <param name="accessChain">The access chain to use.</param>
            <param name="dimension">The parameter dimension.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexVariable">The main kernel index variable.</param>
            <param name="lengthVariable">The length variable of implicitly grouped kernels.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGeneratorMode">
            <summary>
            The type generation mode.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGeneratorMode.Internal">
            <summary>
            An internal type that can be used inside a kernel only.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGeneratorMode.Kernel">
            <summary>
            An external type that is used for kernel-host interop.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator">
            <summary>
            Generates OpenCL type structures.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.DefaultNameFormat">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeNameFormat">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.FieldNameFormat">
            <summary>
            The string format of a single structure field.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ViewPointerFieldIndex">
            <summary>
            The field index of the pointer field inside a view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ViewLengthFieldIndex">
            <summary>
            The field index of the length field inside a view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ViewPointerName">
            <summary>
            The name of the pointer field inside a view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ViewLengthName">
            <summary>
            The name of the length field inside a view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ViewIndexName">
            <summary>
            The name of the index field inside a view.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetStructTypeName(ILGPU.Backends.OpenCL.CLTypeGeneratorMode,System.Int32)">
            <summary>
            Gets the type name for the specified mode and index.
            </summary>
            <param name="mode">The generator mode.</param>
            <param name="index">The type index.</param>
            <returns>The created type name.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup">
            <summary>
            An internal type lookup.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.TryLookup(ILGPU.IR.Types.TypeNode,System.String@)">
            <summary>
            Tries to lookup the given type.
            </summary>
            <param name="type">The type to lookup.</param>
            <param name="typeName">The resolved type name (if any).</param>
            <returns>True, if the given type could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Add(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds the given type node and returns the declared type name.
            </summary>
            <param name="type">The type to add.</param>
            <returns>The declared type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Lookup(ILGPU.IR.Types.TypeNode)">
            <summary>
            Lookups the given type for final code generation.
            </summary>
            <param name="type">The type to lookup.</param>
            <returns>The type name for final code generation.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup">
            <summary>
            Represents a lookup for internal types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Creates a new internal type lookup.
            </summary>
            <param name="parent">The parent type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.Parent">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.TryLookup(ILGPU.IR.Types.TypeNode,System.String@)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.TryLookup(ILGPU.IR.Types.TypeNode,System.String@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.Add(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Add(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.Lookup(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Lookup(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.InternalTypeLookup.GenerateView``1(``0@,ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.GenerateView``1(``0@,ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup">
            <summary>
            Represents a lookup for kernel types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Creates a new kernel type lookup.
            </summary>
            <param name="parent">The parent type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.Parent">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.TryLookup(ILGPU.IR.Types.TypeNode,System.String@)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.TryLookup(ILGPU.IR.Types.TypeNode,System.String@)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.Add(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Add(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.Lookup(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.Lookup(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.KernelTypeLookup.GenerateView``1(``0@,ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeLookup.GenerateView``1(``0@,ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor">
            <summary>
            An internal type visitor to determine whether a type requires
            a custom kernel argument mapper.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.RequiresMapping">
            <summary>
            Returns true if the analyzed type requires custom mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Reset">
            <summary>
            Resets the internal state of this visitor.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.VoidType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.VoidType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.StringType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StringType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.PrimitiveType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PrimitiveType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.PointerType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PointerType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.ArrayType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ArrayType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.StructureType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StructureType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresMappingTypeVisitor.Visit(ILGPU.IR.Types.HandleType)">
            <summary cref="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.HandleType)"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeGenerator.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeGenerator.BeginStruct(ILGPU.IR.Types.TypeNode)">
            <summary>
            Begins the declaration of a structure-like type.
            </summary>
            <param name="structureLikeType">The structure-like type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.ITypeGenerator.EndStruct">
            <summary>
            Finishes the creation of a structure-like type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1">
            <summary>
            An internal type visitor to generate type definitions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.#ctor(`0,System.Text.StringBuilder)">
            <summary>
            Constructs a new type visitor.
            </summary>
            <param name="typeLookup">The lookup to use.</param>
            <param name="builder">The builder to use.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.TypeLookup">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.BeginStruct(ILGPU.IR.Types.TypeNode)">
            <summary>
            Begins the declaration of a structure-like type.
            </summary>
            <param name="structureLikeType">The structure-like type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.EndStruct">
            <summary>
            Finishes the creation of a structure-like type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.GenerateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Generates OpenCL code for the given type.
            </summary>
            <param name="typeNode">The type to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.GenerateView(ILGPU.IR.Types.ViewType)">
            <summary>
            Generates OpenCL code for the given view.
            </summary>
            <param name="viewType">The type to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeGenerator`1.GenerateStructure(ILGPU.IR.Types.StructureType)">
            <summary>
            Generates OpenCL code for the given structure.
            </summary>
            <param name="structureType">The type to generate code for.</param>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.BasicTypeMapping">
            <summary>
            Maps basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ArtihmeticTypeMapping">
            <summary>
            Maps arithmetic-basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.AtomicTypeMapping">
            <summary>
            Maps arithmetic-basic value types to atomic OpenCL language types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetAtomicType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an atomic OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved atomic OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new type generator and defines all required types
            in OpenCL during construction.
            </summary>
            <param name="typeContext">The associated type context.</param>
            <param name="targetPlatform">The target platform to use.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeContext">
            <summary>
            Returns the underlying type context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="typeNode">The internal IR type node.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(System.Type)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="type">The managed type to use.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetKernelArgumentType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets a kernel argument type name.
            </summary>
            <param name="typeNode">The type to declare.</param>
            <returns>The declared kernel argument type.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetOrCreateType``1(``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets or creates the given type in OpenCL.
            </summary>
            <param name="lookup">The current lookup to use.</param>
            <param name="typeNode">The type to declare.</param>
            <returns>The declared type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.RequiresKernelArgumentMapping(ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.StructureType@)">
            <summary>
            Returns true if the given type requires a custom argument mapping.
            </summary>
            <param name="type">The type to test.</param>
            <param name="structureType">The resolved structure type (if any).</param>
            <returns>True, if the given type requires a custom argument mapping.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetSerializedTypeList``1(``0)">
            <summary>
            Computes a serialized list of all type nodes according to their dependencies.
            </summary>
            <typeparam name="TCollection">The collection type.</typeparam>
            <param name="types">The collection of types.</param>
            <returns>The sorted list of type nodes.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator">
            <summary>
            Represents a specialized OpenCL variable allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="typeGenerator">The associated type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.AllocateViewVariable(System.Int32,ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.Backends.VariableAllocator.AllocateViewVariable(System.Int32,ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetVariableType(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Resolves the type name of the given variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The resolved variable type name.</returns>
        </member>
        <member name="T:ILGPU.Backends.IPhiBindingAllocator">
            <summary>
            An abstract binding allocator for the <see cref="T:ILGPU.Backends.PhiBindings`1"/> class.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IPhiBindingAllocator.Process(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.Phis)">
            <summary>
            Processes all phis that are declared in the given node.
            </summary>
            <param name="node">The current CFG node.</param>
            <param name="phis">The phi nodes to process.</param>
        </member>
        <member name="M:ILGPU.Backends.IPhiBindingAllocator.Allocate(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Values.PhiValue)">
            <summary>
            Allocates the given phi node.
            </summary>
            <param name="node">The current CFG node.</param>
            <param name="phiValue">The phi node to allocate.</param>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings">
            <summary>
            Utility methods for <see cref="T:ILGPU.Backends.PhiBindings`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.Create``1(ILGPU.IR.Analyses.CFG,``0)">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <param name="cfg">The source CFG.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings`1">
            <summary>
            Maps phi nodes to basic blocks in order to emit move command during
            the final code generation phase.
            </summary>
            <typeparam name="TAllocator">The custom allocator type.</typeparam>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings`1.PhiBindingCollection">
            <summary>
            Represents a readonly list of phi entries.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator">
            <summary>
            An enumerator to enumerate all entries in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.#ctor(ILGPU.Backends.PhiBindings{`0}.PhiBindingCollection@)">
            <summary>
            Constructs a new entry enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.#ctor(System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Values.PhiValue}})">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="valueList">The list of all values.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Count">
            <summary>
            Returns the number of entries.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.Item(System.Int32)">
            <summary>
            Returns the i-th entry.
            </summary>
            <param name="index">The index of the entry to get.</param>
            <returns>The desired entry.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries in this collection.
            </summary>
            <returns>An enumerator to enumerate all entries in this collection.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.System#Collections#Generic#IEnumerable{(ILGPU#IR#Value,ILGPU#IR#Values#PhiValue)}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.PhiBindingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.Create(ILGPU.IR.Analyses.CFG,`0)">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <param name="cfg">The source CFG.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.#ctor(ILGPU.IR.Analyses.CFG,`0)">
            <summary>
            Constructs new phi bindings.
            </summary>
            <param name="cfg">The source CFG.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings`1.TryGetBindings(ILGPU.IR.BasicBlock,ILGPU.Backends.PhiBindings{`0}.PhiBindingCollection@)">
            <summary>
            Tries to resolve phi bindings for the given block.
            </summary>
            <param name="block">The block.</param>
            <param name="bindings">The resolved bindings (if any)</param>
            <returns>True, if phi bindings could be resolved.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation">
            <summary>
            General extensions for pointer-based array view implementations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.ImplementationType">
            <summary>
            The generic implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetImplementationType(System.Type)">
            <summary>
            Returns a specialized implementation type.
            </summary>
            <param name="elementType">The view element type.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetPointerConstructor(System.Type)">
            <summary>
            Returns a specialized pointer constructor.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved pointer constructor.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetViewConstructor(System.Type)">
            <summary>
            Returns a specialized view constructor.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved view constructor.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetPtrField(System.Type)">
            <summary>
            Returns the pointer field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetLengthField(System.Type)">
            <summary>
            Returns the length field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethodInfo">
            <summary>
            The method handle of the <see cref="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtr``1(ILGPU.ArrayView{``0}@)">
            <summary>
            Gets the associated native pointer that is stored inside the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view type.</param>
            <returns>The underlying native pointer.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewArgumentMapper">
            <summary>
            Maps array views to pointer implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewType(System.Type,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewInstance``3(``0@,``1,``2)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewInstance``3(``0@,``1,``2)"/>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation`1">
            <summary>
            Represents an array view that is implemented with the help of
            native pointers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Ptr">
            <summary>
            The base pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(System.Void*,System.Int32)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="ptr">The base pointer.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="source">The abstract source view.</param>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewImplementation`1.Item(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.LoadElementAddress(ILGPU.Index1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.GetSubView(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="length">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.Cast``1">
            <summary>
            Casts the view into another view with a different element type.
            </summary>
            <typeparam name="TOther">The other element type.</typeparam>
            <returns>The casted view.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementationABI">
            <summary>
            Represents an ABI that uses the <see cref="T:ILGPU.Backends.PointerViews.ViewImplementation`1"/> as
            native view representation.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementationABI.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new ABI instance.
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="targetPlatform">The target platform</param>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1">
            <summary>
            Represents a register allocator that uses the <see cref="T:ILGPU.Backends.PointerViews.ViewImplementation`1"/>
            as native view representation.
            </summary>
            <typeparam name="TKind">The register kind.</typeparam>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.ViewImplementationRegister">
            <summary>
            Implements a view register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.ViewImplementationRegister.Pointer">
            <summary>
            The pointer register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.ViewImplementationRegister.Length">
            <summary>
            The length register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.#ctor(ILGPU.Backends.ABI)">
            <summary>
            Constructs a new view allocator.
            </summary>
            <param name="abi">The source ABI.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.AllocateViewRegister(ILGPU.IR.Types.ViewType)">
            <summary cref="M:ILGPU.Backends.RegisterAllocator`1.AllocateViewRegister(ILGPU.IR.Types.ViewType)"/>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewRegisterAllocator`1.FreeViewRegister(ILGPU.Backends.RegisterAllocator{`0}.ViewRegister)">
            <summary cref="M:ILGPU.Backends.RegisterAllocator`1.FreeViewRegister(ILGPU.Backends.RegisterAllocator{`0}.ViewRegister)"/>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewVariableAllocator">
            <summary>
            Represents a variable allocator that uses the <see cref="T:ILGPU.Backends.PointerViews.ViewImplementation`1"/>
            as native view representation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewVariableAllocator.ViewImplementationVariable">
            <summary>
            Implements a view register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewVariableAllocator.ViewImplementationVariable.#ctor(System.Int32,ILGPU.IR.Types.ViewType,System.Int32,System.Int32)">
            <summary>
            Constructs a new view variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="viewType">The view type.</param>
            <param name="pointerFieldIndex">The associated pointer field.</param>
            <param name="lengthFieldIndex">The associated length field.</param>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewVariableAllocator.ViewImplementationVariable.PointerFieldIndex">
            <summary>
            The pointer field index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewVariableAllocator.ViewImplementationVariable.LengthFieldIndex">
            <summary>
            The length field index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewVariableAllocator.LoadView(ILGPU.IR.Value)">
            <summary>
            Loads the given value as view type.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded view variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewVariableAllocator.AllocateView(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable as view type.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated view variable.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXABI">
            <summary>
            Represents a platform-dependent PTX ABI.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXABI.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new PTX ABI
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="targetPlatform">The target platform</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper">
            <summary>
            Constructs mappings for PTX kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="argumentLocal">The unsafe target argument array.</param>
            <param name="argumentOffset">The target argument offset.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.ArgumentLocal">
            <summary>
            Returns the associated unsafe kernel argument local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.ArgumentOffset">
            <summary>
            Returns the argument offset.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.MapArgument``2(``0@,``1,System.Int32)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler.MapArgument``2(``0@,``1,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new PTX argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.StoreKernelLength``1(``0@,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Stores the kernel length argument of an implicitly grouped kernel.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="argumentBuffer">The current local holding the native argument pointers.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.Map``1(``0@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="entryPoint">The entry point.</param>
            <returns>A local that stores the native kernel argument pointers.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend">
            <summary>
            Represents a PTX (Cuda) backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend.IntrinsicSpecializerConfiguration">
            <summary>
            The kernel specializer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.IntrinsicSpecializerConfiguration.#ctor(ILGPU.ContextFlags)">
            <summary>
            Constructs a new specializer configuration.
            </summary>
            <param name="flags">The associated context flags.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.IntrinsicSpecializerConfiguration.ContextFlags">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.IntrinsicSpecializerConfiguration.EnableAssertions">
            <summary cref="P:ILGPU.IR.Transformations.IIntrinsicSpecializerConfiguration.EnableAssertions"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend.AcceleratorSpecializerConfiguration">
            <summary>
            The kernel specializer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.AcceleratorSpecializerConfiguration.#ctor(ILGPU.Backends.ABI)">
            <summary>
            Constructs a new specializer configuration.
            </summary>
            <param name="abi">The ABI specification.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.AcceleratorSpecializerConfiguration.WarpSize">
            <summary cref="P:ILGPU.IR.Transformations.IAcceleratorSpecializerConfiguration.WarpSize"/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.AcceleratorSpecializerConfiguration.ABI">
            <summary>
            Returns the current ABI.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.AcceleratorSpecializerConfiguration.TryGetSizeOf(ILGPU.IR.Types.TypeNode,System.Int32@)">
            <summary cref="M:ILGPU.IR.Transformations.IAcceleratorSpecializerConfiguration.TryGetSizeOf(ILGPU.IR.Types.TypeNode,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.#ctor(ILGPU.Context,ILGPU.Backends.PTXArchitecture,ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="architecture">The target gpu architecture.</param>
            <param name="instructionSet">The target gpu instruction set.</param>
            <param name="platform">The target platform.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.Architecture">
            <summary>
            Returns the current architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.InstructionSet">
            <summary>
            Returns the current instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,`1@)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas,`1)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,System.Text.StringBuilder,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary cref="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,`3,`1)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator">
            <summary>
            Generates PTX code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.SupportedInstructionSets">
            <summary>
            The supported PTX instruction sets (in descending order).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.DynamicSharedMemoryAllocationName">
            <summary>
            The name for the globally registered dynamic shared memory alloca (if any).
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.ContextFlags">
            <summary>
            Returns the current context flags.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.DebugInfoGenerator">
            <summary>
            Returns the debug-information code generator.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to PTX.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="register">The PTX register.</param>
            <param name="ptxName">The name of the parameter in PTX code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Register">
            <summary>
            Returns the associated PTX register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.PTXName">
            <summary>
            Returns the name of the parameter in PTX code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic">
            <summary>
            Represents a setup logic for function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated register (if any).
            </summary>
            <param name="parameterOffset">The current intrinsic parameter index.</param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated register (if any).</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic">
            <summary>
            Represents an empty parameter setup logic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator">
            <summary>
            Represents a specialized phi binding allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator)">
            <summary>
            Constructs a new phi binding allocator.
            </summary>
            <param name="parent">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Parent">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Process(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.Phis)">
            <summary cref="M:ILGPU.Backends.IPhiBindingAllocator.Process(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.Phis)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiBindingAllocator.Allocate(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IPhiBindingAllocator.Allocate(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.BasicSuffixes">
            <summary>
            Maps basic types to basic PTX suffixes.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.RegisterMovementTypeRemapping">
            <summary>
            Maps basic types to constant-loading target basic types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetBasicSuffix(ILGPU.BasicValueType)">
            <summary>
            Resolves the PTX suffix for the given basic value type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved type suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ResolveRegisterMovementType(ILGPU.BasicValueType)">
            <summary>
            Remaps the given basic type for register movement instructions.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The remapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetCompatibleName(System.String,ILGPU.IR.NodeId)">
            <summary>
            Returns a PTX compatible name for the given entity.
            </summary>
            <param name="name">The source name.</param>
            <param name="nodeId">The source node id.</param>
            <returns>The resolved PTX name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the PTX function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved PTX function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the PTX parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved PTX parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new PTX generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Method">
            <summary>
            Returns the associated top-level function.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Scope">
            <summary>
            Returns the current function scope.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Architecture">
            <summary>
            Returns the currently used PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.DebugInfoGenerator">
            <summary>
            Returns the associated debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.FastMath">
            <summary>
            Returns true if fast math is active.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ReturnParamName">
            <summary>
            Returns the name of the return parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter">
            <summary>
            Emits complex phi-value moves.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PrepareCodeGeneration">
            <summary>
            Prepares the general code generation process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCodeInternal(System.Int32)">
            <summary>
            Generates code for all basic blocks.
            </summary>
            <param name="registerOffset">The internal register offset.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations``1(ILGPU.IR.Analyses.AllocaKindInformation,System.String,System.String,``0)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpacePrefix">The source address-space prefix (like .local).</param>
            <param name="namePrefix">The name prefix.</param>
            <param name="result">The resulting list of allocations.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations">
            <summary>
            Setups local allocations.
            </summary>
            <returns>A collection of allocations.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Setups all method parameters.
            </summary>
            <typeparam name="TSetupLogic">The specific setup logic.</typeparam>
            <param name="targetBuilder">The target builder to append the information to.</param>
            <param name="logic">The current logic.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
            <returns>A list of mapped parameters.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter">
            <summary>
            Emits complex load params instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)"/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitLoadParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of load param instructions with the
            appropriate configuration.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The source register.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter">
            <summary>
            Emits complex store params instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)"/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitStoreParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of store param instructions with the
            appropriate configuration.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindParameters(System.Collections.Generic.List{ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter})">
            <summary>
            Binds the given mapped parameters.
            </summary>
            <param name="parameters">A list with mapped parameters.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindAllocations(System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Values.Alloca,System.String}})">
            <summary>
            Binds the given list of allocations.
            </summary>
            <param name="allocations">A list associating alloca nodes with their local names.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstantDeclarations">
            <summary>
            Generate global constant declarations.
            </summary>
            <returns>The declared global constants in PTX format.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.AppendParamDeclaration(System.Text.StringBuilder,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Appends parameter information.
            </summary>
            <param name="targetBuilder">The target builder to append the information to.</param>
            <param name="paramType">The param type.</param>
            <param name="paramName">The name of the param argument.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter">
            <summary>
            Represents a general PTX command emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.#ctor(System.Text.StringBuilder)">
            <summary>
            Constructs a new command emitter using the given target.
            </summary>
            <param name="target">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNonLocalAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given non-local address space.
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given address space
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRegisterMovementSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends a specialized basic type suffix for mov instructions.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends the given command basic value type suffix.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(System.String)">
            <summary>
            Appends the given command postfix.
            </summary>
            <param name="suffix">The postfix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNull(ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends the constant value 'null' of the given type.
            </summary>
            <param name="kind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendOffset(System.Int32)">
            <summary>
            Appends an offset computation.
            </summary>
            <param name="offset">The constant offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendLabel(System.String)">
            <summary>
            Appends a reference to the given label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String,System.Int32)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValueReference(System.String)">
            <summary>
            Appends the given value reference.
            </summary>
            <param name="valueReference">The value reference.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration">
            <summary>
            Represents a predicate-register configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Boolean)">
            <summary>
            Constructs a new predicate configuration.
            </summary>
            <param name="predicateRegister">The predicate register to test.</param>
            <param name="isTrue">Branch if the predicate register is true.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.PredicateRegister">
            <summary>
            The predicate register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.IsTrue">
            <summary>
            Branch if the predicate register is true.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope">
            <summary>
            Represents a scoped predicate-register allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.PTX.PTXRegisterAllocator)">
            <summary>
            Constructs a new predicate scope.
            </summary>
            <param name="registerAllocator">The parent register allocator.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Constructs a new predicate register.
            </summary>
            <param name="predicateRegister">The underlying predicate register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.RegisterAllocator">
            <summary>
            The associated register allocator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.PredicateRegister">
            <summary>
            The allocated predicate register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.GetConfiguration(System.Boolean)">
            <summary>
            Resolves a new predicate configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.ConvertToValue(ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Converts the underlying predicate register to a
            default target register.
            </summary>
            <param name="codeGenerator">The target code generator.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.Dispose">
            <summary>
            Frees the allocated predicate register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter">
            <summary>
            Enapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="commandEmitter">The command emitter.</param>
            <param name="registers">All involved primitive registers.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets">
            <summary>
            Enapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1">
            <summary>
            Emits a sequence of IO instructions.
            </summary>
            <typeparam name="T">The user state type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)">
            <summary>
            Emits a new sequence of primitive IO instructions.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="userState">The current user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])">
            <summary>
            Emits a complex command that might depend on non-primitive registers.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="registers">All involved registers.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommandWithOffsets``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.Int32)">
            <summary>
            A specialized version of <see cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])"/>.
            This version uses a single register and uses internal ABI-specific offset computations
            to resolve the correct offset in bytes within a structure.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="register">The involved register.</param>
            <param name="offset">The current offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertToPredicateScope(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertPredicateToValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Converts the given predicate register to a default integer register.
            </summary>
            <param name="register">The source register.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Converts the given register to a predicate value in the target register.
            </summary>
            <param name="register">The register to convert.</param>
            <param name="targetRegister">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOLoad``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">The register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOStore``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">THe register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginCommand(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new command.
            </summary>
            <param name="commandString">The command to begin.</param>
            <param name="predicate">The predicate under which to execute the command.</param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Command(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits the given commmand.
            </summary>
            <param name="commandString">The command to emit.</param>
            <param name="predicate">The predicate under which to execute the command.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Move(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits a simple move command.
            </summary>
            <param name="source">The source register.</param>
            <param name="target">The target register.</param>
            <param name="predicate">The predicate under which to execute the command.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginMove(System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new move command.
            </summary>
            <param name="predicate">The predicate under which to execute the command.</param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Moves the value of the specified intrinsic register to the target register.
            </summary>
            <param name="targetRegister">The target register.</param>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register and moves the value of the
            specified intrinsic register to the target register.
            </summary>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.IR.Value,ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register for the given value and
            moves the value of the specified intrinsic register to the target register.
            </summary>
            <param name="value">The value.</param>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.ConditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter">
            <summary>
            Emits complex predicate instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.PredicateRegister">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Predicate)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Predicate)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter">
            <summary>
            Emits complex load instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.SourceType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)"/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter">
            <summary>
            Emits complex store instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.TargetType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)"/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter">
            <summary>
            Emits complex null values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SizeOfValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SizeOfValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MakeCompoundRegisterLoad(ILGPU.IR.Values.ObjectOperationValue,System.Int32)">
            <summary>
            Emits a new compound-register load operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="index">The child index to load.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MakeCompoundRegisterStore(ILGPU.IR.Values.ObjectOperationValue,System.Int32,ILGPU.IR.Value)">
            <summary>
            Emits a new compound-register store operation.
            </summary>
            <param name="value">The source value.</param>
            <param name="index">The child index to update.</param>
            <param name="valueToStore">The value to store.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GetElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetElement)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SetElement)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetElement)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter">
            <summary>
            Represents an abstract emitter of warp shuffle masks.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary>
            Emits a new warp mask.
            </summary>
            <param name="commandEmitter">The current command emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitShuffleOperation``1(ILGPU.IR.Values.ShuffleOperation,``0@)">
            <summary>
            Creates a new shuffle operation.
            </summary>
            <typeparam name="TShuffleEmitter">The emitter type.</typeparam>
            <param name="shuffle">The current shuffle operation.</param>
            <param name="shuffleEmitter">The shuffle emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.WarpShuffle"/> operations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.XorDownMask">
            <summary>
            The basic mask that has be combined with an 'or' command
            in case of a <see cref="F:ILGPU.IR.Values.ShuffleKind.Xor"/> or a <see cref="F:ILGPU.IR.Values.ShuffleKind.Down"/>
            shuffle instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.BaseMaskShiftAmount">
            <summary>
            The amount of bits the basic mask has to be shifted to
            the left.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.#ctor(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="shuffleKind">The current shuffle kind.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.ShuffleKind">
            <summary>
            The shuffle kind.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> operations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="warpMaskRegister">The current mask register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.WarpMaskRegister">
            <summary>
            Returns the current mask register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.HandleValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.DebugOperation)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.NewView)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MakeNullView(ILGPU.IR.Values.NullValue,ILGPU.IR.Types.ViewType)">
            <summary>
            Creates a new empty view.
            </summary>
            <param name="value">The source value.</param>
            <param name="viewType">The view type.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.ViewCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MakeLoadElementAddress(ILGPU.IR.Types.AddressSpaceType,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Creates a set of instructions to realize a generic lea operation.
            </summary>
            <param name="sourceType">The source address type (pointer or view).</param>
            <param name="elementIndex">The current element index (the offset).</param>
            <param name="targetAddressRegister">The allocated target pointer register to write to.</param>
            <param name="address">The source address.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCompiledKernel">
            <summary>
            Represents a compiled kernel in PTX form.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCompiledKernel.EntryName">
            <summary>
            The entry name of the kernel function.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,System.String)">
            <summary>
            Constructs a new compiled kernel in PTX form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="ptxAssembly">The assembly code.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCompiledKernel.PTXAssembly">
            <summary>
            Returns the PTX assembly code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugInfoGenerator">
            <summary>
            A general debug info generator for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.#ctor">
            <summary>
            Constructs a new generic debug info generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugInfoGenerator.Current">
            <summary>
            Returns the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.ResetSequencePoints">
            <summary>
            Reset all sequence point information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
            <param name="sequencePoint">The current sequence point.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generate required debug-information sections in PTX code.
            </summary>
            <param name="builder">The target string builder to write to.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator">
            <summary>
            Represents an info generator that does not generate anything.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.Empty">
            <summary>
            An empty debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)">
            <summary cref="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator">
            <summary>
            Generates line-based debug information for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)">
            <summary cref="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator">
            <summary>
            Generates line-based location information and inserts the referenced
            source lines into the generated PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)">
            <summary cref="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.Frontend.DebugInformation.SequencePoint@)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeaderDeclaration(System.Text.StringBuilder)">
            <summary>
            Generates a PTX compatible list of mapped parameters.
            </summary>
            <param name="targetBuilder">The target builder to append the information to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXInstructions">
            <summary>
            Contains general PTX instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetLEAMulOperation(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a LEA operation.
            </summary>
            <param name="pointerType">The pointer type.</param>
            <returns>The resolved LEA operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetSelectValueOperation(ILGPU.BasicValueType)">
            <summary>
            Resolves a select-value operation.
            </summary>
            <param name="type">The basic value type.</param>
            <returns>The resolved select-value operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <param name="type">The type to compare.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetConvertOperation(ILGPU.ArithmeticBasicValueType,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a convert operation.
            </summary>
            <param name="source">The source type to convert from.</param>
            <param name="target">The target type to convert to.</param>
            <returns>The resolved convert operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind,System.Boolean)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="requireResult">True, if the return value is required.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperationSuffix(ILGPU.IR.Values.AtomicKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves an atomic-operation suffix.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved atomic-operation suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCast(System.Boolean)">
            <summary>
            Resolves an address-space-cast operation.
            </summary>
            <param name="convertToGeneric">True, to convert to the generic address space.</param>
            <returns>The resolved address-space-cast operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCastSuffix(ILGPU.Backends.ABI)">
            <summary>
            Resolves an address-space-cast suffix.
            </summary>
            <param name="abi">The current ABI.</param>
            <returns>The resolved address-space-cast suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Resolves a predicate-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved predicate-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Resolves a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved memory-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetShuffleOperation(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Resolves a shuffle operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved shuffle operation.</returns>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.ReturnOperation">
            <summary>
            A return operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.MoveOperation">
            <summary>
            A general move operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadOperation">
            <summary>
            A general load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadParamOperation">
            <summary>
            A general load operation that loads parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadLocalOperation">
            <summary>
            A general load operation that loads local values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreOperation">
            <summary>
            A general store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreParamOperation">
            <summary>
            A general store operation that stores parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchOperation">
            <summary>
            A branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexOperation">
            <summary>
            An indexed branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexRangeComparison">
            <summary>
            An indexed branch range comparison.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchTargetsDeclaration">
            <summary>
            A branch targets declaration prefix.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.IndexFMAOperationLo">
            <summary>
            An index FMA operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AllThreadsInAWarpMemberMask">
            <summary>
            A warp member mask that considers all threads in a warp.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.PTX.PTXBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
            <param name="architecture">The target architecture (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="architecture">The target architecture (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Backends.PTXArchitecture},ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="minArchitecture">The min architecture (if any).</param>
            <param name="maxArchitecture">The max architecture.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MinArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MaxArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics">
            <summary>
            Implements and initializes PTX intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXIntrinsics.PTXIntrinsicsType">
            <summary>
            The PTXIntrinsics type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Backends.PTXArchitecture},ILGPU.Backends.PTXArchitecture)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <param name="minArchitecture">The minimum architecture.</param>
            <param name="maxArchitecture">The maximum architecture.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.Register(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics.AddDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.AtomicAddF64(System.Double@,System.Double)">
            <summary>
            A software implementation for atomic adds on 64-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.GroupBroadcast``1(``0,System.Int32)">
            <summary>
            Implements a single group-broadcast operation.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpBroadcast``1(``0,System.Int32)">
            <summary>
            Wraps a single warp-broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterWarpShuffles(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX warp intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.IndexRegister">
            <summary>
            Returns the main index register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.LengthRegister">
            <summary>
            Returns the length register of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the associated register allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX kernel generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="scope">The current scope.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelSpecialization(ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Setups kernel specialization hints.
            </summary>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EmitImplicitKernelIndex(System.Int32,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="dimension">The parameter dimension.</param>
            <param name="targetRegister">The primitive target register to write to.</param>
            <param name="boundsRegister">The associated bounds register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.StructureRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.StructureRegister)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexRegister">The main kernel index register.</param>
            <param name="lengthRegister">The length register of implicitly grouped kernels.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterKind">
            <summary>
            Represents the register kind of a PTX register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Predicate">
            <summary>
            A predicate register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int16">
            <summary>
            An int16 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int32">
            <summary>
            An int32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int64">
            <summary>
            An int64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float32">
            <summary>
            A float32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float64">
            <summary>
            A float64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Ctaid">
            <summary>
            The Ctaid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Tid">
            <summary>
            The Tid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NctaId">
            <summary>
            The NctaId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NtId">
            <summary>
            The NtId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.LaneId">
            <summary>
            The LaneId register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterAllocator">
            <summary>
            Represents a specialized PTX register allocator.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.NumRegisterTypes">
            <summary>
            The number of possible register types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.RegisterTypeMapping">
            <summary>
            Maps basic types to PTX register kinds.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.ParameterTypeRemapping">
            <summary>
            Maps basic value types to their PTX-specific parameter-type counterparts.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetRegisterKind(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveDeviceConstantValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Returns the corresponding device constant string value.
            </summary>
            <param name="register">The primitive register.</param>
            <returns>The corresponding device constant string value.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetStringRepresentation(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Returns the string representation of the given primitive register.
            </summary>
            <param name="register">The register.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.#ctor(ILGPU.Backends.ABI)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="abi">The current ABI.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocatePlatformRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription@)">
            <summary>
            Allocates a platform-specific register and returns the resulting PTX type
            for the current platform.
            </summary>
            <param name="description">The resolved register.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocatePlatformRegister(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription@)">
            <summary>
            Allocates a platform-specific register for the given node and
            returns the resulting PTX type for the current platform.
            </summary>
            <param name="node">The node to allocate.</param>
            <param name="description">The resolved register description.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.BasicValueType)">
            <summary>
            Resolves a register description for the basic value type.
            </summary>
            <param name="basicValueType">The basic value type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given parameter type.
            </summary>
            <param name="type">The parameter type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.Backends.RegisterAllocator`1.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.FreeRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary cref="M:ILGPU.Backends.RegisterAllocator`1.FreeRegister(ILGPU.Backends.RegisterAllocator{`0}.PrimitiveRegister)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateInt32Register">
            <summary>
            Allocates a new 32bit integer register.
            </summary>
            <returns>The allocated primitive 32bit integer register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription)">
            <summary cref="M:ILGPU.Backends.RegisterAllocator`1.AllocateRegister(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AppendRegisterDeclaration(System.Text.StringBuilder,System.String,System.String,System.String,ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends register information to the given builder.
            </summary>
            <param name="builder">The builder to append to.</param>
            <param name="prefix">The prefix.</param>
            <param name="typeName">The type name.</param>
            <param name="registerName">The register name.</param>
            <param name="registerKind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GenerateRegisterInformation(System.String)">
            <summary>
            Generates register allocation information.
            </summary>
            <param name="prefix">The prefix to add.</param>
            <returns>Register allocation information.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTXArchitecture">
            <summary>
            Represents a PTX architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_30">
            <summary>
            The 3.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_32">
            <summary>
            The 3.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_35">
            <summary>
            The 3.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_37">
            <summary>
            The 3.7 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_50">
            <summary>
            The 5.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_52">
            <summary>
            The 5.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_53">
            <summary>
            The 5.3 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_60">
            <summary>
            The 6.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_61">
            <summary>
            The 6.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_62">
            <summary>
            The 6.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_70">
            <summary>
            The 7.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_72">
            <summary>
            The 7.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_75">
            <summary>
            The 7.5 architecture.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTXArchitectureUtils">
            <summary>
            Utilities for the <see cref="T:ILGPU.Backends.PTXArchitecture"/> enumeration.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitectureUtils.ArchitectureLookup">
            <summary>
            Maps major and minor versions of Cuda devices to their corresponding PTX architecture.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXArchitectureUtils.GetArchitecture(System.Int32,System.Int32)">
            <summary>
            Resolves the PTX architecture for the given major and minor versions.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <returns>The resolved PTX version.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTXInstructionSet">
            <summary>
            Represents a PTX ISA (Instruction Set Architecture).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_30">
            <summary>
            The 3.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_31">
            <summary>
            The 3.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_32">
            <summary>
            The 3.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_40">
            <summary>
            The 4.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_41">
            <summary>
            The 4.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_42">
            <summary>
            The 4.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_43">
            <summary>
            The 4.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_50">
            <summary>
            The 5.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_60">
            <summary>
            The 6.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_61">
            <summary>
            The 6.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_62">
            <summary>
            The 6.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_63">
            <summary>
            The 6.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXInstructionSet.ISA_64">
            <summary>
            The 6.4 ISA.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.Equals(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the given instruction set is equal to this instruction set.
            </summary>
            <param name="other">The other instruction set.</param>
            <returns>True, iff the given instruction set is equal to this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.CompareTo(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Compares this instruction set to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Backends.PTXInstructionSet.Major">
            <summary>
            The major version
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXInstructionSet.Minor">
            <summary>
            The minor version
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this instruction set.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.GetHashCode">
            <summary>
            Returns the hash code of this instruction set.
            </summary>
            <returns>The hash code of this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.ToString">
            <summary>
            Returns the string representation of the instruction set.
            </summary>
            <returns>The string representation of the instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_Equality(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first and the second instruction set are the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first and the second instruction set are the same.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_Inequality(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first and the second instruction set are not the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first and the second instruction set are not the same.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_LessThan(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first instruction set is smaller than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first instruction set is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_LessThanOrEqual(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first instruction set is less than or equal to the second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first instruction set is less or equal to the second instruction set.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_GreaterThan(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first instruction set is greater than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first instruction set is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXInstructionSet.op_GreaterThanOrEqual(ILGPU.Backends.PTXInstructionSet,ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Returns true iff the first instruction set is greater than or equal to the second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>True, iff the first instruction set is greater or equal to the second instruction set.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1">
            <summary>
            Represents a generic register allocator.
            </summary>
            <typeparam name="TKind">The register kind.</typeparam>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterDescription">
            <summary>
            Describes allocation information of a single primitive register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.#ctor(ILGPU.BasicValueType,`0)">
            <summary>
            Constructs a new register description.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <param name="kind">The register kind.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Kind">
            <summary>
            Returns the associated register kind.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.Register">
            <summary>
            Represents an abstract register
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Register.#ctor">
            <summary>
            Constructs a new abstract register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsPrimitive">
            <summary>
            Returns true if this register is a primitive register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsCompound">
            <summary>
            Returns true if this register is a compound register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister">
            <summary>
            Represents a primitive register that represents an actual hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription,System.Int32)">
            <summary>
            Constructs a new primitive register.
            </summary>
            <param name="description">The current register description.</param>
            <param name="registerValue">The associated register value.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Description">
            <summary>
            Returns the associated register description.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.RegisterValue">
            <summary>
            Returns the register index value.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Kind">
            <summary>
            Returns the actual register kind.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.ToString">
            <summary>
            Returns the string representation of the current register.
            </summary>
            <returns>The string representation of the current register.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.CompoundRegister">
            <summary>
            Represents a compound register of a complex type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.NewRegister(ILGPU.Backends.RegisterAllocator{`0}.CompoundRegister,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Creates a new compound-register instance.
            </summary>
            <param name="source">The source register.</param>
            <param name="registers">The updated child registers.</param>
            <returns>The created compound register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.#ctor(ILGPU.IR.Types.TypeNode,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Constructs a new compound register.
            </summary>
            <param name="typeNode">The underlying type node.</param>
            <param name="registers">The child registers.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Type">
            <summary>
            Returns the underlying type.k
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Children">
            <summary>
            Returns all child registers.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.NumChildren">
            <summary>
            Returns the number of child registers.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.StructureRegister">
            <summary>
            Represents a compound register of a structure type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.StructureRegister.#ctor(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Constructs a new structure register.
            </summary>
            <param name="structureType">The structure type.</param>
            <param name="registers">The child registers.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.StructureRegister.StructureType">
            <summary>
            Returns the underlying structure type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.ArrayRegister">
            <summary>
            Represents a compound register of an array type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ArrayRegister.#ctor(ILGPU.IR.Types.ArrayType,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Constructs a new array register.
            </summary>
            <param name="arrayType">The array type.</param>
            <param name="registers">The child registers.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.ArrayRegister.ArrayType">
            <summary>
            Returns the underlying array type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.ViewRegister">
            <summary>
            Represents a compound register of a view type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ViewRegister.#ctor(ILGPU.IR.Types.ViewType)">
            <summary>
            Constructs a new view register.
            </summary>
            <param name="viewType">The view type.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.ViewRegister.ViewType">
            <summary>
            Returns the underlying view type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterEntry">
            <summary>
            Represents a register mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.#ctor(ILGPU.Backends.RegisterAllocator{`0}.Register,ILGPU.IR.Value)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="register">The register.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Register">
            <summary>
            Returns the associated register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Node">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.#ctor(ILGPU.Backends.ABI)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="abi">The underlying ABI.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.ABI">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given type.
            </summary>
            <param name="type">The type to convert to.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateRegister(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a new primitive register of the given kind.
            </summary>
            <param name="description">The register description used for allocation.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeRegister(ILGPU.Backends.RegisterAllocator{`0}.PrimitiveRegister)">
            <summary>
            Frees the given register.
            </summary>
            <param name="primitiveRegister">The register to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateViewRegister(ILGPU.IR.Types.ViewType)">
            <summary>
            Allocates a new register of a view type.
            </summary>
            <param name="viewType">The view type to allocate.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateViewRegisterAs``1(ILGPU.IR.Types.ViewType)">
            <summary>
            Allocates a new register of a view type.
            </summary>
            <param name="viewType">The view type to allocate.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeViewRegister(ILGPU.Backends.RegisterAllocator{`0}.ViewRegister)">
            <summary>
            Frees the given view register.
            </summary>
            <param name="viewRegister">The view register to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <param name="description">The register description to allocate.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocatePrimitive(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Bind(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Binds the given value to the target register.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetRegister">The target register to bind to.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates a new register recursively
            </summary>
            <param name="typeNode">The node type to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Alias(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Regisers a register alias.
            </summary>
            <param name="node">The node.</param>
            <param name="aliasNode">The alias node.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Load(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadPrimitive(ILGPU.IR.Value)">
            <summary>
            Loads the allocated primitive register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Free(ILGPU.IR.Value)">
            <summary>
            Frees the given node.
            </summary>
            <param name="node">The node to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeRecursive(ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Frees the given register recursively.
            </summary>
            <param name="register">The register to free.</param>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewArgumentMapper">
            <summary>
            Maps array views to seperate view implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewType(System.Type,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewInstance``3(``0@,``1,``2)">
            <summary cref="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewInstance``3(``0@,``1,``2)"/>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewImplementation">
            <summary>
            Represents an array view that is not implemented directly
            and relies on separate driver support to map the actual device
            pointers to allocated memory buffers.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.CreateMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetCreateMethod(System.Type)">
            <summary>
            Returns a specialized create method.
            </summary>
            <param name="sourceType">The source array-view type.</param>
            <returns>The resolved creation method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})">
            <summary>
            Creates a new view implemented using the given array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view.</param>
            <returns>The created view implementation.</returns>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Index">
            <summary>
            The linear index into the view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="index">The index into the view.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewVariableAllocator">
            <summary>
            Represents a variable allocator that uses the <see cref="T:ILGPU.Backends.SeparateViews.ViewImplementation"/>
            as native view representation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator">
            <summary>
            Represents a generic high-level variable allocator.
            </summary>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.Variable">
            <summary>
            A variable that can be accessed and allocated.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.#ctor(System.Int32)">
            <summary>
            Constructs a new variable.
            </summary>
            <param name="id">The current variable id.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.Id">
            <summary>
            Returns the unique variable id.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.VariableName">
            <summary>
            Returns the associated variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PrimitiveVariable">
            <summary>
            A primitive variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PrimitiveVariable.#ctor(System.Int32,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Constructs a new primitive variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PrimitiveVariable.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PointerVariable">
            <summary>
            A pointer variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PointerVariable.#ctor(System.Int32,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new pointer variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PointerVariable.ElementType">
            <summary>
            Returns the represented IR element type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PointerVariable.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.TypedVariable">
            <summary>
            A typed variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.TypedVariable.#ctor(System.Int32,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new typed variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.TypedVariable.Type">
            <summary>
            Returns the underlying type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ObjectVariable">
            <summary>
            An object variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ObjectVariable.#ctor(System.Int32,ILGPU.IR.Types.ObjectType)">
            <summary>
            Constructs a new object variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ObjectVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ViewVariable">
            <summary>
            A virtual view variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ViewVariable.#ctor(System.Int32,ILGPU.IR.Types.ViewType)">
            <summary>
            Constructs a new view variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="viewType">The view type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ViewVariable.ElementType">
            <summary>
            Returns the represented IR element type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ViewVariable.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ViewVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.#ctor">
            <summary>
            Constructs a new variable allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <param name="basicValueType">The actual type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateAs``1(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable as type <typeparamref name="T"/>.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.BasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Allocates a pointer type.
            </summary>
            <param name="elementType">The pointer element type to allocate.</param>
            <param name="addressSpace">The associated address space.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateViewType(ILGPU.IR.Types.ViewType)">
            <summary>
            Allocates a view type.
            </summary>
            <param name="viewType">The view type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateViewVariable(System.Int32,ILGPU.IR.Types.ViewType)">
            <summary>
            Allocates a new view variable.
            </summary>
            <param name="variableId">The variable id.</param>
            <param name="viewType">The view type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="typeNode">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Load(ILGPU.IR.Value)">
            <summary>
            Loads the given value.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the given value as variable type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type to load.</typeparam>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Bind(ILGPU.IR.Value,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Binds the given value to the target variable.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetVariable">The target variable to bind to.</param>
        </member>
        <member name="T:ILGPU.BasicValueType">
            <summary>
            Represents a basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.None">
            <summary>
            Represent a non-basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="T:ILGPU.ArithmeticBasicValueType">
            <summary>
            Represents an arithmetic basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.None">
            <summary>
            Represent a non-arithemtic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt8">
            <summary>
            Represents an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt16">
            <summary>
            Represents a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt64">
            <summary>
            Represents a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="T:ILGPU.Context">
            <summary>
            Represents the main ILGPU context.
            </summary>
            <remarks>Members of this class are thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Context.RuntimeAssemblyName">
            <summary>
            The name of the dynamic runtime assembly.
            </summary>
        </member>
        <member name="F:ILGPU.Context.AssemblyName">
            <summary>
            Represents the general ILGPU assembly name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.FullAssemblyModuleName">
            <summary>
            Represents the general ILGPU assembly module name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.IRFileExtension">
            <summary>
            The ILGPU assembly file extension.
            </summary>
        </member>
        <member name="F:ILGPU.Context.CustomTypeName">
            <summary>
            A custom runtime type name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.LauncherMethodName">
            <summary>
            A default launcher name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.DefaultFlags">
            <summary>
            Represents the default flags of a new context.
            </summary>
        </member>
        <member name="F:ILGPU.Context.DefaultDebug">
            <summary>
            Represents the default debug flags of a new context.
            </summary>
        </member>
        <member name="F:ILGPU.Context.FastMathFlags">
            <summary>
            Represents the default flags of a new context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Version">
            <summary>
            Returns the current ILGPU version.
            </summary>
        </member>
        <member name="P:ILGPU.Context.InliningAttributeBuilder">
            <summary>
            Represents an aggressive inlining attribute builder.
            </summary>
            <remarks>Note that this attribute will not enforce inlining.</remarks>
        </member>
        <member name="M:ILGPU.Context.#cctor">
            <summary>
            Initializes all static context attributes.
            </summary>
        </member>
        <member name="T:ILGPU.Context.MethodEmitter">
            <summary>
            Represents a method builder in the .Net world.
            </summary>
        </member>
        <member name="M:ILGPU.Context.MethodEmitter.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Constructs a new method emitter.
            </summary>
            <param name="method">The desired internal method.</param>
        </member>
        <member name="P:ILGPU.Context.MethodEmitter.Method">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Context.MethodEmitter.ILGenerator">
            <summary>
            Returns the internal IL generator.
            </summary>
        </member>
        <member name="M:ILGPU.Context.MethodEmitter.Finish">
            <summary>
            Finishes the building process.
            </summary>
            <returns>The emitted method.</returns>
        </member>
        <member name="M:ILGPU.Context.#ctor">
            <summary>
            Constructs a new ILGPU main context
            </summary>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.ContextFlags)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="flags">The context flags.</param>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="optimizationLevel">The optimization level.</param>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.ContextFlags,ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="optimizationLevel">The optimization level.</param>
            <param name="flags">The context flags.</param>
        </member>
        <member name="P:ILGPU.Context.IRContext">
            <summary>
            Returns the main IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Flags">
            <summary>
            Returns the associated context flags.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ILFrontend">
            <summary>
            Returns the associated IL frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DefautltILBackend">
            <summary>
            Returns the associated default IL backend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.OptimizationLevel">
            <summary>
            Returns the optimization level.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DebugInformationManager">
            <summary>
            Returns the main debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Context.TypeContext">
            <summary>
            Returns the main type context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ContextTransformer">
            <summary>
            Returns the default context transformer.
            </summary>
        </member>
        <member name="P:ILGPU.Context.IntrinsicManager">
            <summary>
            Returns the underlying intrinsic manager.
            </summary>
        </member>
        <member name="M:ILGPU.Context.InitIntrinsics">
            <summary>
            Initializes all intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Context.ReloadAssemblyBuilder">
            <summary>
            Reloads the assembly builder.
            </summary>
        </member>
        <member name="M:ILGPU.Context.HasFlags(ILGPU.ContextFlags)">
            <summary>
            Returns true if the current context has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if the current context has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Context.NewNodeMarker">
            <summary>
            Creates a new unique node marker.
            </summary>
            <returns>The new node marker.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateNodeId">
            <summary>
            Creates a new unique node id.
            </summary>
            <returns>A new unique node id.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateFunctionHandle">
            <summary>
            Creates a new unique function handle.
            </summary>
            <returns>A new unique function handle.</returns>
        </member>
        <member name="M:ILGPU.Context.ReleaseCodeGenerationLock">
            <summary>
            Releases the internal code-generation lock.
            </summary>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync">
            <summary>
            Begins a new code generation phase (async).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase (async).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches. However, this does not affect individual accelerator caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Context.DefineRuntimeType(System.Reflection.TypeAttributes,System.Type)">
            <summary>
            Defines a new runtime type.
            </summary>
            <param name="attributes">The custom type attributes.</param>
            <param name="baseClass">The base class.</param>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.Context.DefineRuntimeClass(System.Type)">
            <summary>
            Defines a new runtime class.
            </summary>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.Context.DefineRuntimeStruct">
            <summary>
            Defines a new runtime structure.
            </summary>
            <returns>A new runtime type builder.</returns>
        </member>
        <member name="M:ILGPU.Context.DefineRuntimeMethod(System.Type,System.Type[])">
            <summary>
            Defines a new runtime method.
            </summary>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">All parameter types.</param>
            <returns>The defined method.</returns>
        </member>
        <member name="M:ILGPU.Context.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.ContextCodeGenerationPhase">
            <summary>
            A single code generation phase.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.#ctor(ILGPU.Context,ILGPU.IR.IRContext)">
            <summary>
            Constructs a new code generation phase.
            </summary>
            <param name="context">The current context.</param>
            <param name="irContext">The current IR context.</param>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.Context">
            <summary>
            Returns the main context.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.IRContext">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.BeginFrontendCodeGeneration">
            <summary>
            Starts a new frontend code-generation phase.
            </summary>
            <returns>The frontend code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Optimize">
            <summary>
            Optimizes the IR.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.ContextFlags">
            <summary>
            Represents flags for a <see cref="T:ILGPU.Context"/>.
            </summary>
            <remarks>
            [ 0 -  7] = debugging settings
            [ 8 - 15] = code generation settings
            [16 - 23] = transformation settings
            [24 - 32] = accelerator settings
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.None">
            <summary>
            Default flags.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableDebugInformation">
            <summary>
            Enables debug information (if available),
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableInlineSourceAnnotations">
            <summary>
            Enables inline source-code annotations when generating kernels.
            </summary>
            <remarks>Note that this is only supported if debug information is activated.</remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableAssertions">
            <summary>
            Enables assertions.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.EnableParallelCodeGenerationInFrontend">
            <summary>
            Enables parallel code generation in frontend.
            Note that this does not affect parallel transformations.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.InlineMutableStaticFieldValues">
            <summary>
            Loads from mutable static fields are rejected by default.
            However, their current values can be inlined during jit
            compilation. Adding this flags causes values from mutable
            static fields to be inlined instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.IgnoreStaticFieldStores">
            <summary>
            Stores to static fields are rejected by default.
            Adding this flag causes stores to static fields
            to be silently ignored instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.FastMath">
            <summary>
            Represents fast math compilation flags.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.Force32BitFloats">
            <summary>
            Forces the use of 32bit floats instead of 64bit floats.
            This affects all math operations (like Math.Sqrt(double)) and
            all 64bit float conversions. This settings might improve
            performance dramatically but might cause precision loss.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.ForceSystemGC">
            <summary>
            Forces a .Net GC run after every context GC.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.SkipCPUCodeGeneration">
            <summary>
            Skips the internal IR code generation phase for CPU kernels (debug flag).
            </summary>
            <remarks>
            Caution: this avoids general kernel code-analysis and verfication checks.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.AggressiveInlining">
            <summary>
            Represents an aggressive inlining policy.
            (all functions will be inlined).
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.NoInlining">
            <summary>
            No functions will be inlined at all.
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableConstantPropagation">
            <summary>
            Disables the on-the-fly constant propagation functionality
            (e.g. for debugging purposes).
            </summary>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableKernelCaching">
            <summary>
            Disables all kernel-loading caches.
            </summary>
            <remarks>
            However, IR nodes, type information and debug information will still
            be cached, since they are used for different kernel compilation operations.
            If you want to clear those caches as well, you will have to clear them
            manually using <see cref="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal">
            <summary>
            Disables automatic disposal of memory buffers in the scope of ILGPU GC threads.
            It should only be used by experienced users.
            </summary>
            <remarks>
            In theory, allocated memory buffers will be disposed automatically by the .Net GC.
            However, disposing accelerator objects before their associated memory buffers have been
            freed will end up in exceptions and sometimes driver crashes on different systems.
            If you disable automatic buffer disposal, you have to ensure that all accelerator
            child objects have been freed manually before disposing the associated accelerator object.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal">
            <summary>
            Disables automatic disposal of kernels in the scope of ILGPU GC threads.  This is dangerous as the
            'default' kernel-loading methods do not return <see cref="T:ILGPU.Runtime.Kernel"/> instances that can
            be disposed manually.
            It should only be used by experienced users.
            </summary>
            <remarks>
            In theory, allocated accelerator kernels will be disposed automatically by the .Net GC.
            However, disposing accelerator objects before their associated kernels have been
            freed will end up in exceptions and sometimes driver crashes on different systems.
            If you disable automatic kernel disposal, you have to ensure that all accelerator
            child objects have been freed manually before disposing the associated accelerator object.
            </remarks>
        </member>
        <member name="F:ILGPU.ContextFlags.DisableAcceleratorGC">
            <summary>
            Disables kernel caching and automatic disposal of memory buffers and kernels.
            It should only be used by experienced users.
            </summary>
        </member>
        <member name="T:ILGPU.ContextFlagsExtensions">
            <summary>
            Helper methods for the <see cref="T:ILGPU.ContextFlags"/> enumeration.
            </summary>
        </member>
        <member name="M:ILGPU.ContextFlagsExtensions.HasFlags(ILGPU.ContextFlags,ILGPU.ContextFlags)">
            <summary>
            Determines whether one or more bits are set in the current flags.
            </summary>
            <param name="flags">The current flags.</param>
            <param name="flagsToCheck">The flags to check.</param>
            <returns>True, the requested bits are set.</returns>
        </member>
        <member name="M:ILGPU.ContextFlagsExtensions.Prepare(ILGPU.ContextFlags)">
            <summary>
            Prepares the given flags by toggeling convenient flag combinations.
            </summary>
            <param name="flags">The flags to prepare.</param>
            <returns>The prepared flags.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Block">
            <summary>
            A simple basic block in the scope of an IR code-generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block.CFGBuilder">
            <summary>
            Constructs CFGs out of disassembled methods.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new CFG builder.
            </summary>
            <param name="codeGenerator">The current code generator.</param>
            <param name="methodBuilder">The current method builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AppendBasicBlock(System.Int32)">
            <summary>
            Appends a basic block with the given target.
            </summary>
            <param name="target">The block target.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.BuildBasicBlocks">
            <summary>
            Build all required basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AddSuccessor(ILGPU.Frontend.Block,ILGPU.Frontend.Block)">
            <summary>
            Adds a new successor to the current block.
            </summary>
            <param name="current">The current block.</param>
            <param name="successor">The successor to add to the current block.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlock(ILGPU.IR.NodeMarker,ILGPU.Frontend.Block,System.Int32,System.Int32)">
            <summary>
            Setups a single basic block.
            </summary>
            <param name="nodeMarker">The current node marker.</param>
            <param name="current">The current block.</param>
            <param name="stackCounter">The current stack counter.</param>
            <param name="target">The target block.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlocks(ILGPU.IR.NodeMarker,ILGPU.Frontend.Block,System.Int32)">
            <summary>
            Setups all basic blocks (fills in the required information).
            </summary>
            <param name="nodeMarker">The current node marker.</param>
            <param name="current">The current block.</param>
            <param name="instructionIdx">The starting instruction index.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.WireBlocks">
            <summary>
            Wires all terminators and connects all basic blocks.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Scope">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.CFG">
            <summary>
            Returns the associated CFG.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Builder">
            <summary>
            Returns the internal method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the block for the given basic block.
            </summary>
            <param name="basicBlock">The source basic block.</param>
            <returns>The resolved frontend block.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
            <param name="builder">The current basic block builder.</param>
        </member>
        <member name="P:ILGPU.Frontend.Block.CodeGenerator">
            <summary>
            Returns the code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGNode">
            <summary>
            Returns the associated CFG node.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Builder">
            <summary>
            Returns the associated IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.BasicBlock">
            <summary>
            Returns the underlying basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.StackCounter">
            <summary>
            Returns the current stack counter.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionOffset">
            <summary>
            Returns the instruction offset of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionCount">
            <summary>
            Returns the number of instructions in this block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.NodeIndex">
            <summary>
            Returns the current node index.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.SetValue(ILGPU.Frontend.VariableRef,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetValue(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetBuilderTerminator(System.Int32)">
            <summary>
            Resolves the current terminator as builder terminator.
            </summary>
            <param name="count">The number of expected branch targets.</param>
            <returns>The resolved branch targets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PeekBasicValueType">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Dup">
            <summary>
            Duplicates the element at the top of the stack.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop">
            <summary>
            Pops a value from the execution stack.
            </summary>
            <returns>The popped value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop(ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value as the required type from the execution stack.
            </summary>
            <param name="targetType">The required targt type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.Convert(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts a value to the required type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The required targt type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopInt(ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops an element as integer from the stack.
            </summary>
            <param name="flags">The conversion flags.</param>
            <returns>The popped element as integer.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopMethodArgs(System.Reflection.MethodBase,ILGPU.IR.Value)">
            <summary>
            Pops the required arguments from the stack.
            </summary>
            <param name="methodBase">The method to use for the argument types.</param>
            <param name="instanceValue">The instance value (if available).</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareValue(ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare operations.
            </summary>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareOrArithmeticValue(ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare and arithmetic operations.
            </summary>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopArithmeticArgs(ILGPU.IR.Values.ConvertFlags,ILGPU.IR.Value@,ILGPU.IR.Value@)">
            <summary>
            Pops two compatible arithmetic arguments from the execution stack.
            </summary>
            <param name="flags">The conversion flags.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The type of the two operands.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Push(ILGPU.IR.Value)">
            <summary>
            Pushes the value of the given type onto the execution stack.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerator">
            <summary>
            Represents an IR code generator for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="kind">The kind of the arithmetic operation.</param>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="kind">The kind of the arithmetic operation.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateArray(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new n-dimensional array.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="extent">The array extent.</param>
            <param name="elementType">The element type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewArray(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an array creation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="elementType">The element type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElement(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an array load-element operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="elementType">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoadElementAddress(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new load-element-address operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="typeNode">The element type to load.</param>
            <returns>The loaded element address.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElementAddress(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an array load-element-address operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="elementType">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreElement(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an array store-element operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="elementType">The element type to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadArrayLength(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Realizes an array length value.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCall(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.MethodBase,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Creates a call instruction to the given method with the given arguments.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="method">The target method to invoke.</param>
            <param name="arguments">The call arguments.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCall(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.MethodBase)">
            <summary>
            Realizes a call instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.ResolveVirtualCallTarget(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Resolves the virtual call target of the given virtual (or abstract) method.
            </summary>
            <param name="target">The virtual method to call.</param>
            <param name="constrainedType">The constrained type of the virtual call.</param>
            <returns>The resolved call target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="target">The target method to invoke.</param>
            <param name="constrainedType">The target type on which to invoke the method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCalli(System.Object)">
            <summary>
            Realizes an indirect call instruction.
            </summary>
            <param name="signature">The target signature.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeJump(System.Reflection.MethodBase)">
            <summary>
            Realizes a jump instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.Method.Builder,ILGPU.Frontend.DisassembledMethod,System.Collections.Generic.HashSet{System.Reflection.MethodBase})">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="methodBuilder">The current method builder.</param>
            <param name="disassembledMethod">The corresponding disassembled method.</param>
            <param name="detectedMethods">The set of newly detected methods.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.SetupVariables">
            <summary>
            Setups all parameter and local bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DetectedMethods">
            <summary>
            Returns the set of detected methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Frontend">
            <summary>
            Returns the associated frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Builder">
            <summary>
            Returns the current method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DisassembledMethod">
            <summary>
            Returns the current disassembled method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Method">
            <summary>
            Returns the current mananged method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.SSABuilder">
            <summary>
            Returns the current SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.DeclareMethod(System.Reflection.MethodBase)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateTempAlloca(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a temporary alloca for the given type.
            </summary>
            <param name="type">The type to allocate.</param>
            <returns>The created alloca.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateTempAlloca(ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a temporary alloca for the given type.
            </summary>
            <param name="length">The length of the array.</param>
            <param name="type">The type to allocate.</param>
            <returns>The created alloca.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCode">
            <summary>
            Generates code for the current function.
            </summary>
            <returns>The created top-level function.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCodeForBlock(ILGPU.Frontend.Block)">
            <summary>
            Generates code for the given block.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GetException``1(System.String,System.Object[])">
            <summary cref="M:ILGPU.Frontend.ICodeGenerationContext.GetException``1(System.String,System.Object[])"/>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyNotRuntimeMethod(System.Reflection.MethodBase)">
            <summary>
            Verifies that the given method is not a .Net-runtime-dependent method.
            If it depends on the runtime, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldLoad(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field load operation.
            </summary>
            <param name="field">The static field to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldStore(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field store operation.
            </summary>
            <param name="field">The static field to store to.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNop">
            <summary>
            Realizes a nop instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeTrap">
            <summary>
            Realizes a trap instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadOntoEvaluationStack(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Value,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts the given value (already loaded) into its corresponding
            evaluation-stack representation.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="value">The source value to load (already loaded).</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoad(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="address">The source address.</param>
            <param name="type">The target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateStore(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="address">The target address.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeDup(ILGPU.Frontend.Block)">
            <summary>
            Realizes a dup operation.
            </summary>
            <param name="block">The current basic block.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakePop(ILGPU.Frontend.Block)">
            <summary>
            Realizes a pop operation.
            </summary>
            <param name="block">The current basic block.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadToken(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Object)">
            <summary>
            Realizes an internal load-token operation.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="handleValue">The managed handle object.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCompare(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a compare instruction of the given type.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="builder">The current builder.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Int32)">
            <summary>
            Loads an int.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Int64)">
            <summary>
            Loads a long.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Single)">
            <summary>
            Loads a float.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Double)">
            <summary>
            Loads a double.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadString(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.String)">
            <summary>
            Loads a string.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeReturn(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Realizes a return instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Realizes an uncoditional branch instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a conditional branch instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="compareKind">The comparison type of the condition.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIntrinsicBranch(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.CompareKind)">
            <summary>
            Make an intrinsic branch.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="kind">The current compare kind.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchTrue(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Make a true branch.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchFalse(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Make a false branch.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeSwitch(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.Frontend.ILInstructionBranchTargets)">
            <summary>
            Realizes a switch instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="branchTargets">All switch branch targets.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeConvert(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a convert instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="targetType">The target type.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateConversion(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Conerts the given value to the target type.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadField(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Loads the value of a field specified by the given metadata token.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadFieldAddress(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a field specified by the given metadata token.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoadStaticFieldValue(ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value and returns the created IR node.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
            <returns>The loaded field value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticField(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticFieldAddress(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a static field specified by the given metadata token.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreField(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a field.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreStaticField(ILGPU.Frontend.Block,System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a static field.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBox(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Realizes a boxing operation that boxes a value.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeUnbox(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an un-boxing operation that unboxes a previously boxed value.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewObject(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Reflection.MethodBase)">
            <summary>
            Realizes a new-object operation that creates a new instance of a specified type.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="method">The target method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeInitObject(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes a managed-object initialization.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIsInstance(ILGPU.Frontend.Block,System.Type)">
            <summary>
            Realizes an is-instance instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadObject(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreObject(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,System.Type)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariable(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable. This can be an argument or a local reference.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariableAddress(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable address. This can be an argument or a local reference.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.StoreVariable(ILGPU.Frontend.Block,ILGPU.IR.Construction.IRBuilder,ILGPU.Frontend.VariableRef)">
            <summary>
            Stores a value to the argument with index idx.
            </summary>
            <param name="block">The current basic block.</param>
            <param name="builder">The current builder.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation">
            <summary>
            Represents assembly debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs new empty assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly,System.IO.Stream)">
            <summary>
            Constructs new assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
            <param name="pdbStream">The associated PDB stream.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Assembly">
            <summary>
            Returns the associated assembly.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Modules">
            <summary>
            Returns the associated modules.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.IsValid">
            <summary>
            Returns true if this container holds valid debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryResolveMethod(System.Int32,System.Reflection.MethodBase@)">
            <summary>
            Tries to resolve the given metadata token to a method.
            </summary>
            <param name="metadataToken">The metadata token to resolve.</param>
            <param name="method">The resolved method (or null).</param>
            <returns>True, iff the given token could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="methodDebugInformation">The loaded debug information (or null).</param>
            <returns>True, iff the requested debug information could be loaded.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager">
            <summary>
            Represents a debug-information manager.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileExtensions">
            <summary>
            The PDB file extension (.pdb).
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileSearchPattern">
            <summary>
            The PDB file-search extension (*.pdb).
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader">
            <summary>
            Represents a custom PDB loader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Executes the actual loader logic.
            </summary>
            <param name="assembly">The current assembly.</param>
            <param name="assemblyDebugInformation">The loaded debug-information instance.</param>
            <returns>True, if the requested debug information could be loaded.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader">
            <summary>
            Represents a file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.String)">
            <summary>
            Constructs a new file loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbFileName">The file name to load.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.PDBFileName">
            <summary>
            Returns the file name to load.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader">
            <summary>
            Represents a automatic file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new automatic file loader.
            </summary>
            <param name="parent">The parent manager.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader">
            <summary>
            Represents a stream loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.IO.Stream)">
            <summary>
            Constructs a new stream loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbStream">The stream to load from.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.PDBStream">
            <summary>
            Returns the stream to load from.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.#ctor">
            <summary>
            Constructs a new debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assemlby.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="assemblyDebugInformation">The loaded debug information (or null).</param>
            <returns>True, iff the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.String,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="assemblyDebugInformation">The loaded debug information (or null).</param>
            <returns>True, iff the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.IO.Stream,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given PDB stream.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbStream">The source PDB stream.</param>
            <param name="assemblyDebugInformation">The loaded debug information (or null).</param>
            <returns>True, iff the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbolsInternal``1(System.Reflection.Assembly,``0@,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="loader">The internal loader.</param>
            <param name="assemblyDebugInformation">The loaded debug information (or null).</param>
            <returns>True, iff the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryFindPbdFile(System.String,System.String@)">
            <summary>
            Tries to find a debug-information file with the name <paramref name="pdbFileName"/>.
            </summary>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="fileName">The resolved filename (or null).</param>
            <returns>True, iff the given debug-information file could be found.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.RegisterLookupDirectory(System.String)">
            <summary>
            Registers the given directory as a source directory for debug-information files.
            </summary>
            <param name="directory">The directory to register.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method.
            </summary>
            <param name="methodBase">The method.</param>
            <param name="methodDebugInformation">Loaded debug information (or null).</param>
            <returns>True, iff debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.LoadSequencePoints(System.Reflection.MethodBase)">
            <summary>
            Loads the sequence points of the given method.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>A sequence-point enumerator that targets the given method.</returns>
            <remarks>
            If no debug information could be loaded for the given method, an empty
            <see cref="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator"/> will be returned.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.LoadScopes(System.Reflection.MethodBase)">
            <summary>
            Loads the scopes of the given method.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>A scope-enumerator that targets the given method.</returns>
            <remarks>
            If no debug information could be loaded for the given method, an empty
            <see cref="T:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator"/> will be returned.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached debug information.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IDebugInformationEnumeratorValue">
            <summary>
            Represents an abstract item of a <see cref="T:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.IDebugInformationEnumeratorValue.IsValid">
            <summary>
            Returns true if this information is valid.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1">
            <summary>
            Represents a debug-information enumerator.
            </summary>
            <typeparam name="T">The enumerator type.</typeparam>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.MoveTo(System.Int32)">
            <summary>
            Moves the enumerator forward to the given instruction offset.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.LocalVariable">
            <summary>
            Represents a local variable in a scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a new local variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="name">The variable name.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Index">
            <summary>
            Returns the referenced local-variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Name">
            <summary>
            Returns the variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true iff the given local variable is equal to the current local variable.
            </summary>
            <param name="other">The other local variable.</param>
            <returns>True, iff the given index is equal to the current local variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current local variable.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current local variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.ToString">
            <summary>
            Returns the string representation of this local variable.
            </summary>
            <returns>The string representation of this local variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Equality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true iff the first and second local variable are the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>True, iff the first and second local variable are the same.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Inequality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true iff the first and second local variable are not the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>True, iff the first and second local variable are not the same.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodDebugInformation">
            <summary>
            Represents method debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.#ctor(ILGPU.Frontend.DebugInformation.AssemblyDebugInformation,System.Reflection.MethodBase,System.Reflection.Metadata.MethodDebugInformationHandle)">
            <summary>
            Constructs method debug information.
            </summary>
            <param name="assemblyDebugInformation">The parent assembly debug information</param>
            <param name="methodBase">The target method.</param>
            <param name="debugInformationHandle">The debug handle of the given method.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.AssemblyDebugInformation">
            <summary>
            Returns the associated assembly debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MethodBase">
            <summary>
            Returns the associated method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.SequencePoints">
            <summary>
            Returns the associated sequence points.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.DebugInformationHandle">
            <summary>
            Returns the associated the method debug-information handle.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.LoadSequencePoints">
            <summary>
            Loads the requested sequence points.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.CreateSequencePointEnumerator">
            <summary>
            Creates a new sequence-point enumerator for the current method.
            </summary>
            <returns>The created sequence-point enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.CreateScopeEnumerator">
            <summary>
            Creates a new scope enumerator for the current method.
            </summary>
            <returns>The create scope enumerator.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodScope">
            <summary>
            Represents a default method scope.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator">
            <summary>
            Represents a variable enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.#ctor(System.Reflection.Metadata.LocalVariableHandleCollection,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Constructs a new variable enumerator.
            </summary>
            <param name="localVariables">The collection of local variables.</param>
            <param name="metadataReader">The assocated metadata reader.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.LocalVariables">
            <summary>
            Returns the assocated collection of local variables.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.MetadataReader">
            <summary>
            Returns the assocated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.VariableEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodScope.Invalid">
            <summary>
            Represents an invalid method scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.#ctor(System.Reflection.Metadata.LocalScope,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Constructs a new scope.
            </summary>
            <param name="localScope">The current local scope.</param>
            <param name="metadataReader">The assocated metadata reader.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.IsValid">
            <summary>
            Returns true iff the current method scope might represent
            a valid scope of an existing method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.StartOffset">
            <summary>
            Returns the start offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.EndOffset">
            <summary>
            Returns the end offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.Length">
            <summary>
            Returns the length of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.NumVariables">
            <summary>
            Returns the number of declared variables.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetEnumerator">
            <summary>
            Returns an unboxed variable enumerator.
            </summary>
            <returns>An unboxed variable enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.System#Collections#Generic#IEnumerable{ILGPU#Frontend#DebugInformation#LocalVariable}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(ILGPU.Frontend.DebugInformation.MethodScope)">
            <summary>
            Returns true iff the given scope is equal to the current scope.
            </summary>
            <param name="other">The other scope.</param>
            <returns>True, iff the given scope is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current scope.
            </summary>
            <param name="obj">The other sequence object.</param>
            <returns>True, iff the given object is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetHashCode">
            <summary>
            Returns the hash code of this scope.
            </summary>
            <returns>The hash code of this scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.ToString">
            <summary>
            Returns the string representation of this scope.
            </summary>
            <returns>The string representation of this scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.op_Equality(ILGPU.Frontend.DebugInformation.MethodScope,ILGPU.Frontend.DebugInformation.MethodScope)">
            <summary>
            Returns true iff the first scope and the second scope are the same.
            </summary>
            <param name="first">The first scope.</param>
            <param name="second">The second scope.</param>
            <returns>True, iff the first and second the scope are the same.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.op_Inequality(ILGPU.Frontend.DebugInformation.MethodScope,ILGPU.Frontend.DebugInformation.MethodScope)">
            <summary>
            Returns true iff the first scope and the second scope are not the same.
            </summary>
            <param name="first">The first scope.</param>
            <param name="second">The second scope.</param>
            <returns>True, iff the first and second the scope are not the same.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator">
            <summary>
            Represents a scope enumerator for methods.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.Empty">
            <summary>
            Represents an empty scope enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.#ctor">
            <summary>
            Constructs an empty scope enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.#ctor(ILGPU.Frontend.DebugInformation.MethodDebugInformation)">
            <summary>
            Constructs a new scope enumerator.
            </summary>
            <param name="methodDebugInformation">The referenced method debug information.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.Current">
            <summary>
            Returns the current scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScopeEnumerator.MoveTo(System.Int32)">
            <summary>
            Tries to move the scope enumerator to the given offset in bytes.
            </summary>
            <param name="offset">The target instruction offset in bytes.</param>
            <returns>True, iff the enumerator could be moved to the next scope.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePoint">
            <summary>
            Represents a single sequence point of an instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.SequencePoint.Invalid">
            <summary>
            Represents an invalid sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.Merge(ILGPU.Frontend.DebugInformation.SequencePoint@,ILGPU.Frontend.DebugInformation.SequencePoint@)">
            <summary>
            Merges both sequence points.
            </summary>
            <param name="first">The first sequence point to merge.</param>
            <param name="second">The second sequence point to merge.</param>
            <returns>The merged sequence point</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new sequence point.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="offset">The byte offset.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startLine">The start line.</param>
            <param name="endLine">The end line.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.IsValid">
            <summary>
            Returns true iff the current sequence point might represent
            a valid point within a file.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.Offset">
            <summary>
            Returns the associated offset.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.FileName">
            <summary>
            Return the associated file name.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.StartColumn">
            <summary>
            Returns the start column.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.EndColumn">
            <summary>
            Returns the end column.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.StartLine">
            <summary>
            Returns the start line.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.EndLine">
            <summary>
            Returns the end line.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.Equals(ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Returns true iff the given sequence point is equal to the current sequence point.
            </summary>
            <param name="other">The other sequence point.</param>
            <returns>True, iff the given sequence point is equal to the current sequence point.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current sequence point.
            </summary>
            <param name="obj">The other sequence object.</param>
            <returns>True, iff the given object is equal to the current sequence point.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.GetHashCode">
            <summary>
            Returns the hash code of this sequence point.
            </summary>
            <returns>The hash code of this sequence point.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.ToVisualStudioErrorString">
            <summary>
            Returns the location information of this sequence point in VS format.
            </summary>
            <returns>The location information string that represents this sequence point.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>The location information string that represents this sequence point.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.op_Equality(ILGPU.Frontend.DebugInformation.SequencePoint,ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Returns true iff the first sequence point and the second sequence point are the same.
            </summary>
            <param name="first">The first sequence point.</param>
            <param name="second">The second sequence point.</param>
            <returns>True, iff the first and the second sequence point are the same.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.op_Inequality(ILGPU.Frontend.DebugInformation.SequencePoint,ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Returns true iff the first sequence point and the second sequence point are not the same.
            </summary>
            <param name="first">The first sequence point.</param>
            <param name="second">The second sequence point.</param>
            <returns>True, iff the first and the second sequence point are not the same.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator">
            <summary>
            Represents a sequence-point enumerator for methods.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Empty">
            <summary>
            Represents an empty sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.#ctor">
            <summary>
            Constructs an empty sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.Frontend.DebugInformation.SequencePoint})">
            <summary>
            Constructs a new sequence-point enumerator.
            </summary>
            <param name="sequencePoints">The wrapped sequence points.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.SequencePoints">
            <summary>
            Returns the associated sequence points.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.IsValid">
            <summary>
            Returns true iff the current enumerator state points to a valid sequence point.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Current">
            <summary>
            Returns the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.TryGetCurrentDebugLocationString(System.String@)">
            <summary>
            Tries to resolve a debug-location string for the current debug location.
            </summary>
            <param name="debugLocationString">The location string (or null).</param>
            <returns>True, iff the requested location string could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.MoveTo(System.Int32)">
            <summary>
            Tries to move the enumerator to the given offset in bytes.
            </summary>
            <param name="offset">The target instruction offset in bytes.</param>
            <returns></returns>
        </member>
        <member name="T:ILGPU.Frontend.DisassembledMethod">
            <summary>
            Represents a disassembled method.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Method">
            <summary>
            Returns the method that was disassembled.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstInstruction">
            <summary>
            Returns the first disassembled instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstSequencePoint">
            <summary>
            Returns the first sequence point of this function.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Instructions">
            <summary>
            Returns the disassembled instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.MaxStackSize">
            <summary>
            Returns the maximum stack size.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Count">
            <summary>
            Returns the number of instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Item(System.Int32)">
            <summary>
            Returns the instruction at the given index.
            </summary>
            <param name="index">The instruction index.</param>
            <returns>The instruction at the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.GetEnumerator">
            <summary>
            Returns an instruction enumerator.
            </summary>
            <returns>An instruction enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <param name="sequencePointEnumerator">The assocated sequence-point enumerator.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Disassembler">
            <summary>
            Represents a disassembler for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.NativePtrType">
            <summary>
            Represents the native pointer type that is used during the
            disassembling process.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.il">
            <summary>
            The current il byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.ilOffset">
            <summary>
            The current offset within the byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructionOffset">
            <summary>
            The current instruction type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flags">
            <summary>
            The current flags that are applied to the next instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flagsArgument">
            <summary>
            The current flags argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructions">
            <summary>
            Represents the current list of instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.debugInformationEnumerator">
            <summary>
            Represents the associated sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.#ctor(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator)">
            <summary>
            Constructs a new disassembler.
            </summary>
            <param name="methodBase">The target method.</param>
            <param name="sequencePointEnumerator">The assocated sequence-point enumerator.</param>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBase">
            <summary>
            Returns the current method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBody">
            <summary>
            Returns the current method body.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.DeclaringType">
            <summary>
            Returns the declaring type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.AssociatedModule">
            <summary>
            Returns the associated managed module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodGenericArguments">
            <summary>
            Returns the generic arguments of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.TypeGenericArguments">
            <summary>
            Returns the generic arguments of the declaring type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.CurrentSequencePoint">
            <summary>
            Returns the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.Disassemble">
            <summary>
            Disassembles the current method and returns a list of
            disassembled instructions.
            </summary>
            <returns>The list of disassembled instructions.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.DisassembleCall(ILGPU.Frontend.ILInstructionType,System.Int32)">
            <summary>
            Disassembles a call to the given method.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="methodToken">The token of the method to be disassembled.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AddFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Adds the given flags to the current instruction flags.
            </summary>
            <param name="flagsToAdd">The flags to be added.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstruction(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstructionWithFlags(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="additionalFlags">Additional instruction flags.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveType(System.Int32)">
            <summary>
            Resolves the type for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the type to resolve.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveMethod(System.Int32)">
            <summary>
            Resolves the method for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the method to resolve.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveField(System.Int32)">
            <summary>
            Resolves the field for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the field to resolve.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadOpCode">
            <summary>
            Reads an op-code from the current instruction data.
            </summary>
            <returns>The decoded op-code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadShortBranchTarget">
            <summary>
            Reads a short branch target from the current instruction data.
            </summary>
            <returns>The decoded short branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadBranchTarget">
            <summary>
            Reads a branch target from the current instruction data.
            </summary>
            <returns>The decoded branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadByteArg">
            <summary>
            Reads a byte from the current instruction data.
            </summary>
            <returns>The decoded byte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadTypeArg">
            <summary>
            Reads a type reference from the current instruction data.
            </summary>
            <returns>The decoded type reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadFieldArg">
            <summary>
            Reads a field reference from the current instruction data.
            </summary>
            <returns>The decoded field reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSByteArg">
            <summary>
            Reads a sbyte from the current instruction data.
            </summary>
            <returns>The decoded sbyte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUShortArg">
            <summary>
            Reads an ushort from the current instruction data.
            </summary>
            <returns>The decoded ushort.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadIntArg">
            <summary>
            Reads an int from the current instruction data.
            </summary>
            <returns>The decoded int.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUIntArg">
            <summary>
            Reads an uint from the current instruction data.
            </summary>
            <returns>The decoded uint.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSingleArg">
            <summary>
            Reads a string from the current instruction data.
            </summary>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadLongArg">
            <summary>
            Reads a long from the current instruction data.
            </summary>
            <returns>The decoded long.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadDoubleArg">
            <summary>
            Reads a double from the current instruction data.
            </summary>
            <returns>The decoded double.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ExternalAttribute">
            <summary>
            Marks external methods that are opaque in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.#ctor(System.String)">
            <summary>
            Constructs a new external attribute.
            </summary>
            <param name="name">The external name.</param>
        </member>
        <member name="P:ILGPU.Frontend.ExternalAttribute.Name">
            <summary>
            Returns the associated internal function name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.GetName(System.Reflection.MethodInfo)">
            <summary>
            Resolves the actual IR name.
            </summary>
            <param name="method">The source method.</param>
            <returns>The IR name.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ICodeGenerationContext">
            <summary>
            An abstract code-generation context.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ICodeGenerationContext.GetException``1(System.String,System.Object[])">
            <summary>
            Constructs a new exception of the given type based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new exception of type <typeparamref name="TException"/>.</returns>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationContextExtensions">
            <summary>
            Contains extensions methods for abstract code-generation contexts.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationContextExtensions.GetArgumentException``1(``0,System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.ArgumentException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="context">The code-generation context.</param>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationContextExtensions.GetNotSupportedException``1(``0,System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.NotSupportedException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="context">The code-generation context.</param>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationContextExtensions.GetInvalidOperationException``1(``0,System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="context">The code-generation context.</param>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationContextExtensions.GetInvalidILCodeException``1(``0)">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid IL code.
            </summary>
            <param name="context">The code-generation context.</param>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend">
            <summary>
            The ILGPU MSIL frontend.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend.ProcessingEntry">
            <summary>
            Represents a single processing entry.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Method">
            <summary>
            Returns the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Result">
            <summary>
            Returns the processing future.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.IsExternalRequest">
            <summary>
            Returns true if this is an external processing request.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.ProcessingEntry.SetResult(ILGPU.IR.Method)">
            <summary>
            Signals the future with the given value.
            </summary>
            <param name="irFunction">The function value.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new frontend with two threads.
            </summary>
            <param name="debugInformationManager">The associated debug information manager.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.Int32)">
            <summary>
            Constructs a new frontend that uses the given number of
            threads for code generation.
            </summary>
            <param name="debugInformationManager">The associated debug information manager.</param>
            <param name="numThreads">The number of threads.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.DoWork">
            <summary>
            The code-generation thread.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Internal method used for code generation.
            </summary>
            <param name="method">The method.</param>
            <returns>The generation future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Starts a code-generation phase.
            </summary>
            <param name="context">The target IR context.</param>
            <returns>The created code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.FinishCodeGeneration(ILGPU.Frontend.CodeGenerationPhase)">
            <summary>
            Finishes the current code-generation phase.
            </summary>
            <param name="phase">The current phase.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationResult">
            <summary>
            Represents a code-generation future.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationResult.#ctor(System.Reflection.MethodBase)">
            <summary>
            Creates a new code generation result.
            </summary>
            <param name="method">The associated method.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Result">
            <summary>
            The associated function result.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.ResultHandle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.HasResult">
            <summary>
            Returns true if this result has a function value.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationPhase">
            <summary>
            A single code generation phase.
            Note that only a single phase instance can be created at a time.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.IRContext)">
            <summary>
            Constructs a new generation phase.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="context">The target IR context.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Frontend">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.IsFinished">
            <summary>
            Returns true if the generation phase has been finished.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.HadWorkToDo">
            <summary>
            Returns true if the code generation phase had work to do.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.DeclareMethod(ILGPU.IR.MethodDeclaration)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.DeclareMethod(ILGPU.IR.MethodDeclaration,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodDeclaration">The method declaration.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCodeInternal(System.Reflection.MethodBase,System.Boolean,System.Collections.Generic.HashSet{System.Reflection.MethodBase},ILGPU.IR.Method@)">
            <summary>
            Performs the actual (async) code generation.
            </summary>
            <param name="method">The method.</param>
            <param name="isExternalRequest">True, if processing of this method was requested by a user.</param>
            <param name="detectedMethods">The set of newly detected methods.</param>
            <param name="generatedMethod">The resolved IR method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Generates code for the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>A completion future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionType">
            <summary>
            Represents an instruction type of a single il instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Nop">
            
             <summary>Nop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Break">
            
             <summary>Break</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarg">
            
             <summary>Ldarg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarga">
            
             <summary>Ldarga</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Starg">
            
             <summary>Starg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloc">
            
             <summary>Ldloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloca">
            
             <summary>Ldloca</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stloc">
            
             <summary>Stloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldnull">
            
             <summary>Ldnull</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI4">
            
             <summary>LdI4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI8">
            
             <summary>LdI8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR4">
            
             <summary>LdR4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR8">
            
             <summary>LdR8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldstr">
            
             <summary>Ldstr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Dup">
            
             <summary>Dup</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Pop">
            
             <summary>Pop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Jmp">
            
             <summary>Jmp</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Call">
            
             <summary>Call</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Calli">
            
             <summary>Calli</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Callvirt">
            
             <summary>Callvirt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ret">
            
             <summary>Ret</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Br">
            
             <summary>Br</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brfalse">
            
             <summary>Brfalse</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brtrue">
            
             <summary>Brtrue</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Beq">
            
             <summary></summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bne">
            
             <summary>Bne</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bge">
            
             <summary>Bge</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bgt">
            
             <summary>Bgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ble">
            
             <summary>Ble</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Blt">
            
             <summary>Blt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Switch">
            
             <summary>Switch</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Add">
            
             <summary>Add</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Sub">
            
             <summary>Sub</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Mul">
            
             <summary>Mul</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Div">
            
             <summary>Div</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Rem">
            
             <summary>Rem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.And">
            
             <summary>And</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Or">
            
             <summary>Or</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Xor">
            
             <summary>Xor</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shl">
            
             <summary>Shl</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shr">
            
             <summary>Shr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Neg">
            
             <summary>Neg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Not">
            
             <summary>Not</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Conv">
            
             <summary>Conv</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initobj">
            
             <summary>Initobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newobj">
            
             <summary>Newobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newarr">
            
             <summary>Newarr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Castclass">
            
             <summary>Castclass</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Isinst">
            
             <summary>Isinst</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Box">
            
             <summary>Box</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Unbox">
            
             <summary>Unbox</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldfld">
            
             <summary>Ldfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldflda">
            
             <summary>Ldflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stfld">
            
             <summary>Stfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsfld">
            
             <summary>Ldsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsflda">
            
             <summary>Ldsflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stsfld">
            
             <summary>Stsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldobj">
            
             <summary>Ldobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stobj">
            
             <summary>Stobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpobj">
            
             <summary>Cpobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldlen">
            
             <summary>Ldlen</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelem">
            
             <summary>Ldelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelema">
            
             <summary>Ldelema</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stelem">
            
             <summary>Stelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ceq">
            
             <summary>Ceq</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cgt">
            
             <summary>Cgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Clt">
            
             <summary>Clt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldind">
            
             <summary>Ldind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stind">
            
             <summary>Stind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Localloc">
            
             <summary>Localloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpblk">
            
             <summary>Cpblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initblk">
            
             <summary>Initblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.SizeOf">
            
             <summary>SizeOf</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdToken">
            
             <summary>LoadToken</summary>
            
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionBranchTargets">
            <summary>
            Represents a collection fo branch targets.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.#ctor(System.Int32[])">
            <summary>
            Constructs a new container for branch targets.
            </summary>
            <param name="targets"></param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Count">
            <summary>
            Returns the number of targets
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Item(System.Int32)">
            <summary>
            Returns the target offset at the given index.
            </summary>
            <param name="index">The index of the target offset.</param>
            <returns>The resolved target offset.</returns>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.UnconditionalBranchTarget">
            <summary>
            Returns the unconditional branch target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchIfTarget">
            <summary>
            Returns the conditional branch if-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchElseTarget">
            <summary>
            Returns the conditional branch else-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.SwitchDefaultTarget">
            <summary>
            Returns the default switch branch target (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.GetTargetOffsets">
            <summary>
            Returns the branch offsets.
            </summary>
            <returns>The branch offsets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.ToString">
            <summary>
            Returns the string representation of the branch targets.
            </summary>
            <returns>The string representation of the branch targets.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlags">
            <summary>
            Represent flags of an il instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unsigned">
            <summary>
            Unsigned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Overflow">
            <summary>
            Overflow check requested.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unchecked">
            <summary>
            Unchecked operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unaligned">
            <summary>
            Unaligned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Volatile">
            <summary>
            Volatile access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.ReadOnly">
            <summary>
            ReadOnly access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Tail">
            <summary>
            Tail call.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Constrained">
            <summary>
            Constraint virtual-function access.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsExtensions">
            <summary>
            Contains extension methods for instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsExtensions.HasFlags(ILGPU.Frontend.ILInstructionFlags,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true iff given flags have the other flags set;
            </summary>
            <param name="flags">The current flags.</param>
            <param name="otherFlags">The flags to check.</param>
            <returns>True, iff given falgs have the other flags set.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsContext">
            <summary>
            Represents a context of instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.#ctor(ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Constructs a new instruction-flag context.
            </summary>
            <param name="flags">The instruction flags.</param>
            <param name="argument">The flags argument.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Flags">
            <summary>
            Returns the flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Argument">
            <summary>
            Returns the flag argument.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(System.Object)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.GetHashCode">
            <summary>
            Returns the hash code of this flags.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.ToString">
            <summary>
            Returns the string representation of this flags.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Equality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the first instruction context is equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>True, iff the first instruction is equal to the second one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Inequality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the first instruction context is not equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>True, iff the first instruction is not equal to the second one.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstruction">
            <summary>
            Represents a single il instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.#ctor(System.Int32,ILGPU.Frontend.ILInstructionType,ILGPU.Frontend.ILInstructionFlagsContext,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Constructs a new il instruction.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
            <param name="type">The instruction type.</param>
            <param name="flagsContext">The flags context.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="argument">The instruction argument.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.#ctor(System.Int32,ILGPU.Frontend.ILInstructionType,ILGPU.Frontend.ILInstructionFlagsContext,System.UInt16,System.UInt16,System.Object,ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Constructs a new il instruction.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
            <param name="type">The instruction type.</param>
            <param name="flagsContext">The flags context.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="argument">The instruction argument.</param>
            <param name="sequencePoint">The current sequence point.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Offset">
            <summary>
            Returns the instruction offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.InstructionType">
            <summary>
            Returns the instruction type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Flags">
            <summary>
            Returns the instruction flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.FlagsContext">
            <summary>
            Returns the instruction-flags context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PopCount">
            <summary>
            Returns the number of elements to pop from the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PushCount">
            <summary>
            Returns the number of elements to push onto the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Argument">
            <summary>
            Returns the instruction argument.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsCall">
            <summary>
            Returns true iff the instruction is a call instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsTerminator">
            <summary>
            Returns true iff this instruction is a basic block terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.SequencePoint">
            <summary>
            Returns the associated sequence point.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.HasValidSequencePoint">
            <summary>
            Returns true if this instruction has a valid sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetArgumentAs``1">
            <summary>
            Returns the instruction argument as T.
            </summary>
            <typeparam name="T">The target type T.</typeparam>
            <returns>The instruction argument T.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.HasFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true iff current instruction has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, iff current instruction has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(ILGPU.Frontend.ILInstruction)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(System.Object)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetHashCode">
            <summary>
            Returns the hash code of this instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.ToString">
            <summary>
            Returns the string representation of this instruction.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute">
            <summary>
            Marks intrinsic atomic methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics">
            <summary>
            Contains default ILGPU intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleAtomicOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute)">
            <summary>
            Handles atomics.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGridOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute)">
            <summary>
            Handles grid operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGroupOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute)">
            <summary>
            Handles group operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleInterop(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute)">
            <summary>
            Handles interop operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics.DeviceFunctionHandler">
            <summary>
            Represents a basic handler for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.Intrinsics.FunctionHandlers">
            <summary>
            Stores function handlers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleIntrinsic(ILGPU.Frontend.InvocationContext@,ILGPU.IR.Values.ValueReference@)">
            <summary>
            Tries to handle a specific invocation context. This method
            can generate custom code instead of the default method-invocation
            functionality.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="result">The resulting value of the intrinsic call.</param>
            <returns>True, iff this class could handle the call.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.IsIntrinsicArrayType(System.Type)">
            <summary>
            Determines whether the given type is an intrinsic array type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True, if the given type is an intrinsic array type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleActivator(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles activator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleDebug(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles debugging operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleRuntimeHelper(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles runtime operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.InitializeArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Initializes arrays.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleArrays(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles array operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMathOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute)">
            <summary>
            Handles math operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMemoryBarrierOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute)">
            <summary>
            Handles memory barriers.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleSharedMemoryOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute)">
            <summary>
            Handles view operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleUtilityOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute)">
            <summary>
            Handles utility functions.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleViewOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute)">
            <summary>
            Handles shared memory operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleWarpOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute)">
            <summary>
            Handles warp operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute">
            <summary>
            Marks grid methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.Dimension">
            <summary>
            The associated constant dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute">
            <summary>
            Marks group methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute">
            <summary>
            Marks intrinsic interop methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.IntrinsicAttribute">
            <summary>
            Marks methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.IntrinsicAttribute.Type">
            <summary>
            Returns the type of this intrinsic attribute.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute">
            <summary>
            Marks math methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute">
            <summary>
            Marks memory-barrier methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics">
            <summary>
            Contains default remapped ILGPU intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.MathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.CPUMathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath.CPUOnly"/> type.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper">
            <summary>
            Represents a basic remapper for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.FunctionRemappers">
            <summary>
            Stores function remappers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddDebugRemapping(System.Type,System.String,System.Type,System.String,System.Type[])">
            <summary>
            Registers a new debug mapping.
            </summary>
            <param name="remappedType">The remapped intrinsics type.</param>
            <param name="internalMethod">The internal method name.</param>
            <param name="debugType">The debug type.</param>
            <param name="method">The original method name.</param>
            <param name="parameters">The parameters types of all functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Registers a math mapping for a function from a source type to a target type.
            </summary>
            <param name="sourceType">The source math type.</param>
            <param name="targetType">The target math type.</param>
            <param name="functionName">The name of the function in the scope of mathType.</param>
            <param name="paramTypes">The parameter types of both functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Reflection.MethodInfo,ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper)">
            <summary>
            Registers a global remapping for the given method object.
            </summary>
            <param name="methodInfo">The method to remap.</param>
            <param name="remapper">The remapping method.</param>
            <remarks>
            This method is not thread safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.RemapIntrinsic(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Tries to remap the given invocation context.
            </summary>
            <param name="context">The invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DebugAssertCondition(System.Boolean)">
            <summary>
            Implements a simple debug assertion.
            </summary>
            <param name="condition">The assertion condition.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DebugAssertConditionMessage(System.Boolean,System.String)">
            <summary>
            Implements a simple debug assertion.
            </summary>
            <param name="condition">The assertion condition.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute">
            <summary>
            Marks shared-memory methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute">
            <summary>
            Marks intrinsic utility methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute">
            <summary>
            Marks view methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute">
            <summary>
            Marks warp methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.InvocationContext">
            <summary>
            Represents an invocation context for compiler-known methods
            that are supported in the scope of ILGPU programs.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.Frontend.Block,System.Reflection.MethodBase,System.Reflection.MethodBase,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new invocation context.
            </summary>
            <param name="codeGenerator">The associated code generator.</param>
            <param name="block">The current block.</param>
            <param name="callerMethod">The caller.</param>
            <param name="method">The called method.</param>
            <param name="arguments">The method arguments.</param>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Block">
            <summary>
            Return the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Builder">
            <summary>
            Returns the current IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CallerMethod">
            <summary>
            Represents the caller method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Method">
            <summary>
            Represents the targeted method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Module">
            <summary>
            Returns the associated module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Arguments">
            <summary>
            Returns the call arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.NumArguments">
            <summary>
            Returns the number of arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Item(System.Int32)">
            <summary>
            Returns the argument with the given index.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The argument with the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetMethodGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetTypeGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetException``1(System.String,System.Object[])">
            <summary cref="M:ILGPU.Frontend.ICodeGenerationContext.GetException``1(System.String,System.Object[])"/>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.DeclareFunction(System.Reflection.MethodBase)">
            <summary>
            Declares a new top-level function.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared top-level function.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.Remap(System.Reflection.MethodBase,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Remaps the current target to the given one.
            </summary>
            <param name="targetMethod">The new target method.</param>
            <param name="arguments">The target arguments.</param>
            <returns>The remapped context.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.Equals(ILGPU.Frontend.InvocationContext)">
            <summary>
            Returns true iff the given invocation context is equal to the current invocation context.
            </summary>
            <param name="other">The other invocation context.</param>
            <returns>True, iff the given invocation context is equal to the current invocation context.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current invocation context.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current invocation context.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetHashCode">
            <summary>
            Returns the hash code of this invocation context.
            </summary>
            <returns>The hash code of this invocation context.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.ToString">
            <summary>
            Returns the string representation of this invocation context.
            </summary>
            <returns>The string representation of this invocation context.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.op_Equality(ILGPU.Frontend.InvocationContext,ILGPU.Frontend.InvocationContext)">
            <summary>
            Returns true iff the first and second invocation contexts are the same.
            </summary>
            <param name="first">The first invocation context.</param>
            <param name="second">The second invocation context.</param>
            <returns>True, iff the first and second invocation contexts are the same.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.op_Inequality(ILGPU.Frontend.InvocationContext,ILGPU.Frontend.InvocationContext)">
            <summary>
            Returns true iff the first and second invocation contexts are not the same.
            </summary>
            <param name="first">The first invocation context.</param>
            <param name="second">The second invocation context.</param>
            <returns>True, iff the first and second invocation contexts are not the same.</returns>
        </member>
        <member name="T:ILGPU.Frontend.VariableRefType">
            <summary>
            The type of a single variable reference.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Argument">
            <summary>
            Represents a reference to a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Local">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Stack">
            <summary>
            Represents a reference to a stack slot.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Memory">
            <summary>
            Represents an abstract memory monad.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.VariableRef">
            <summary>
            Represents a single variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRef.Memory">
            <summary>
            Represents a reference to a memory monad.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.#ctor(System.Int32,ILGPU.Frontend.VariableRefType)">
            <summary>
            Constructs a new variable entry. 
            </summary>
            <param name="index">Index of the variable.</param>
            <param name="refType">Type of this variable reference.</param>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.Index">
            <summary>
            Returns the index of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.RefType">
            <summary>
            Returns the variable-reference type.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true iff the given variable ref is equal to the current one.
            </summary>
            <param name="other">The other variable reference.</param>
            <returns>True, iff the given variable ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given variable ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.GetHashCode">
            <summary>
            Returns the hash code of this variable reference.
            </summary>
            <returns>The hash code of this variable reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Equality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true iff both variable references represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>True, iff both variable references represent the same variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Inequality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true iff both variable references do not represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>True, iff both variable references do not represent the same variable.</returns>
        </member>
        <member name="T:ILGPU.Grid">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.IndexX">
            <summary>
            Returns the X index withing the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxX">
            <summary>
            Returns the X index withing the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IndexY">
            <summary>
            Returns the Y index withing the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IndexZ">
            <summary>
            Returns the Z index withing the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Index">
            <summary>
            Returns the index within the scheduled thread grid.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionX">
            <summary>
            Returns the X dimension of the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimX">
            <summary>
            Returns the X dimension of the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionY">
            <summary>
            Returns the Y dimension of the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimY">
            <summary>
            Returns the Y dimension of the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimensionZ">
            <summary>
            Returns the Z dimension of the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimZ">
            <summary>
            Returns the Z dimension of the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Dimension">
            <summary>
            Returns the dimension of the scheduled thread grid.
            </summary>
            <returns>The grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.GlobalIndex">
            <summary>
            Returns the global index.
            </summary>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="T:ILGPU.Group">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IndexX">
            <summary>
            Returns the X index withing the scheduled thread group.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxX">
            <summary>
            Returns the X index withing the scheduled thread group.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IndexY">
            <summary>
            Returns the Y index withing the scheduled thread group.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread group.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IndexZ">
            <summary>
            Returns the Z index withing the scheduled thread group.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread group.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.Index">
            <summary>
            Returns the group index within the scheduled thread group.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionX">
            <summary>
            Returns X the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The X thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimX">
            <summary>
            Returns X the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The X thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionY">
            <summary>
            Returns Y the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Y thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimY">
            <summary>
            Returns Y the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Y thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimensionZ">
            <summary>
            Returns Z the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Z thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimZ">
            <summary>
            Returns Z the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Z thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.Dimension">
            <summary>
            Returns the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.LinearIndex">
            <summary>
            Returns the linear thread index of the current thread within the current thread group.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IsFirstThread">
            <summary>
            Returns true if the current thread is the first in the group.
            </summary>
        </member>
        <member name="M:ILGPU.Group.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Group.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>The number of threads for which the predicate evaluated to true.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff all threads in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff all threads in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff any thread in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff any thread in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the group.
            </summary>
            <param name="value">The value to broadcast.</param>
            <param name="groupIndex">The source thread index within the group.</param>
            <remarks>
            Note that the group index must be the same for all threads in the group.</remarks>
        </member>
        <member name="T:ILGPU.ClearCacheMode">
            <summary>
            Specifies which resources should be removed from the cache.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Default">
            <summary>
            Removes all non-ILGPU objects form the caches.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Everything">
            <summary>
            Removes everything from the caches.
            </summary>
        </member>
        <member name="T:ILGPU.ICache">
            <summary>
            Represents an object that contains internal caches.
            </summary>
        </member>
        <member name="M:ILGPU.ICache.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            Implementations of this method are not guaranteed to be thread-safe.
            </remarks>
        </member>
        <member name="T:ILGPU.IndexType">
            <summary>
            Represents the type of index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.None">
            <summary>
            Represents no compatible index type.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.KernelConfig">
            <summary>
            Represents a generic kernel config.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeExtensions">
            <summary>
            Contains utility functions for handling index types.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetManagedIndexType(ILGPU.IndexType)">
            <summary>
            Resolves the managed type of an index for a given index type.
            </summary>
            <param name="indexType">The index type.</param>
            <returns>The resolved managed index type..</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIndexType(System.Type)">
            <summary>
            Tries to resolve an index type based on the given .Net type.
            </summary>
            <param name="indexType">The managed .Net index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="T:ILGPU.IIndex">
            <summary>
            Represents a basic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIndex.Size">
            <summary>
            Returns the size represented by this index (eg. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.IIntrinsicIndex">
            <summary>
            Represents an intrinsic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIntrinsicIndex.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="T:ILGPU.IGenericIndex`1">
            <summary>
            Represents a generic index type.
            </summary>
            <typeparam name="TIndex">The type of the generic index.</typeparam>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBounds(`0)">
            <summary>
            Returs true iff the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True iff the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)">
            <summary>
            Returs true iff the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True iff the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ComputeLinearIndex(`0)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Add(`0)">
            <summary>
            Computes this + rhs.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Subtract(`0)">
            <summary>
            Computes this - rhs.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory of elements with
            size <paramref name="elementSize"/>. The parameter <paramref name="newElementSize"/> describes
            the requested new element size. The result of this function is a new extent dimension that
            represents the given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">The current element size in the scope of the current extent.</param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="T:ILGPU.Index">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="F:ILGPU.Index.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index.Min(ILGPU.Index,ILGPU.Index)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index.Max(ILGPU.Index,ILGPU.Index)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index.Clamp(ILGPU.Index,ILGPU.Index,ILGPU.Index)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index.#ctor(System.Int32)">
            <summary>
            Constructs a new 1D index.
            </summary>
            <param name="x">The x index.</param>
        </member>
        <member name="P:ILGPU.Index.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index.IsFirst">
            <summary>
            Returns true iff this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index.Size">
            <summary>
            Returns the size represented by this index (x);
            </summary>
        </member>
        <member name="M:ILGPU.Index.InBounds(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index.InBoundsInclusive(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ComputeLinearIndex(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputeLinearIndex(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ReconstructIndex(System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ReconstructIndex(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index.Add(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index.Subtract(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ComputedCastedExtent(ILGPU.Index,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index.Equals(ILGPU.Index)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index.CompareTo(ILGPU.Index)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index.Add(ILGPU.Index,ILGPU.Index)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Addition(ILGPU.Index,ILGPU.Index)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index.Subtract(ILGPU.Index,ILGPU.Index)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Subtraction(ILGPU.Index,ILGPU.Index)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index.Multiply(ILGPU.Index,ILGPU.Index)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Multiply(ILGPU.Index,ILGPU.Index)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index.Divide(ILGPU.Index,ILGPU.Index)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Division(ILGPU.Index,ILGPU.Index)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Equality(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Inequality(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index.op_LessThan(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_LessThanOrEqual(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_GreaterThan(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_GreaterThanOrEqual(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Implicit(ILGPU.Index)~System.Int32">
            <summary>
            Implictly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.Index.op_Implicit(System.Int32)~ILGPU.Index">
            <summary>
            Implictly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.Index.op_Explicit(ILGPU.Index)~System.UInt32">
            <summary>
            Implictly converts an index to an uint.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.Index1">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index1.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index1.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index1.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="F:ILGPU.Index1.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index1.Min(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1.Max(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1.Clamp(ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index1.#ctor(System.Int32)">
            <summary>
            Constructs a new 1D index.
            </summary>
            <param name="x">The x index.</param>
        </member>
        <member name="P:ILGPU.Index1.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index1.Size">
            <summary>
            Returns the size represented by this index (x);
            </summary>
        </member>
        <member name="M:ILGPU.Index1.InBounds(ILGPU.Index1)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.InBoundsInclusive(ILGPU.Index1)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.ComputeLinearIndex(ILGPU.Index1)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputeLinearIndex(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.ReconstructIndex(System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ReconstructIndex(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index1.Add(ILGPU.Index1)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.Subtract(ILGPU.Index1)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.ComputedCastedExtent(ILGPU.Index1,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index1.Equals(ILGPU.Index1)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1.CompareTo(ILGPU.Index1)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Add(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Addition(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Subtract(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Subtraction(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Multiply(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Multiply(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1.Divide(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Division(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Equality(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Inequality(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_LessThan(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_LessThanOrEqual(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_GreaterThan(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_GreaterThanOrEqual(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(ILGPU.Index1)~System.Int32">
            <summary>
            Implictly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.Index1.op_Implicit(System.Int32)~ILGPU.Index1">
            <summary>
            Implictly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.Index1.op_Explicit(ILGPU.Index1)~System.UInt32">
            <summary>
            Implictly converts an index to an uint.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.Index2">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index2.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32,ILGPU.Index2)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <param name="dimension">The 2D dimension for reconstruction.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="F:ILGPU.Index2.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.Min(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Max(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Clamp(ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32)">
            <summary>
            Constructs a new 2D index.
            </summary>
            <param name="value">The value of every component (x, y).</param>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
        </member>
        <member name="P:ILGPU.Index2.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Y">
            <summary>
            Returns the y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Size">
            <summary>
            Returns the size represented by this index (x * y).
            </summary>
        </member>
        <member name="M:ILGPU.Index2.InBounds(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.InBoundsInclusive(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.ComputeLinearIndex(ILGPU.Index2)">
            <summary>
            Computes the linear index of this 2D index by using the provided 2D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this 2D index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.ComputedCastedExtent(ILGPU.Index2,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index2.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a value tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:ILGPU.Index2.Equals(ILGPU.Index2)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.CompareTo(ILGPU.Index2)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~ILGPU.Index2">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index2"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Addition(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Subtraction(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(System.Int32,ILGPU.Index2)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(ILGPU.Index2,System.Int32)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(System.Int32,ILGPU.Index2)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(ILGPU.Index2,System.Int32)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Divide(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Equality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Inequality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="T:ILGPU.Index3">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index3.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32,ILGPU.Index3)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <param name="dimension">The 3D dimension for reconstruction.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="F:ILGPU.Index3.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.Min(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Max(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Clamp(ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="value">The value of every component (x, y, z).</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(ILGPU.Index2,System.Int32)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="xy">The x and y indices.</param>
            <param name="z">The z index.</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32,ILGPU.Index2)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="x">The x index.</param>
            <param name="yz">The y and z indices.</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="z">The z index.</param>
        </member>
        <member name="P:ILGPU.Index3.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Y">
            <summary>
            Returns the y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Z">
            <summary>
            Returns the z index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Size">
            <summary>
            Returns the size represented by this index (x * y * z).
            </summary>
        </member>
        <member name="P:ILGPU.Index3.XY">
            <summary>
            /Returns the x and y components as <see cref="T:ILGPU.Index2"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.YZ">
            <summary>
            /Returns the y and z components as <see cref="T:ILGPU.Index2"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.InBounds(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.InBoundsInclusive(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.ComputeLinearIndex(ILGPU.Index3)">
            <summary>
            Computes the linear index of this 3D index by using the provided 3D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this 3D index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.ComputedCastedExtent(ILGPU.Index3,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index3.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a value tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.Index3.Equals(ILGPU.Index3)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.CompareTo(ILGPU.Index3)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~ILGPU.Index3">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index3"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Addition(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Subtraction(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(System.Int32,ILGPU.Index3)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(ILGPU.Index3,System.Int32)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(System.Int32,ILGPU.Index3)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(ILGPU.Index3,System.Int32)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Divide(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Equality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Inequality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is smaller than or equal the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true if the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first index is greater or equal to the second index.</returns>
        </member>
        <member name="T:ILGPU.Interop">
            <summary>
            Contains general interop functions.
            </summary>
        </member>
        <member name="M:ILGPU.Interop.ComputeEffectiveAddress(System.Byte@,ILGPU.Index1,System.Int32)">
            <summary>
            Computes the effective address for the given pointer/index combination.
            </summary>
            <param name="nativePtr">The source pointer.</param>
            <param name="index">The element index.</param>
            <param name="elementSize">The element size.</param>
            <returns>The computed pointer.</returns>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1(``0)">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.ComputeRelativeSizeOf``2">
            <summary>
            Computes number of elements of type <typeparamref name="TFirst"/>
            that are required to store a type <typeparamref name="TSecond"/> in
            unmanaged memory.
            </summary>
            <typeparam name="TFirst">The type that should represent type <typeparamref name="TSecond"/>.</typeparam>
            <typeparam name="TSecond">The base type that should be represented with <typeparamref name="TFirst"/>.</typeparam>
            <returns>
            The number of required <typeparamref name="TFirst"/> instances to store on instance of type <typeparamref name="TSecond"/>.
            </returns>
        </member>
        <member name="M:ILGPU.Interop.OffsetOf``1(System.String)">
            <summary>
            Computes the unsigned offset of the given field in bytes.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="fieldName">The name of the target field.</param>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Single)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Double)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt32)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt64)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath">
            <summary>
            Represents basic intrinsic math helpers for general
            math operations that are supported on the CPU and the GPU.
            </summary>
            <remarks>
            For more advanced math functions refer to the algorithms library.
            </remarks>
        </member>
        <member name="T:ILGPU.IntrinsicMath.CPUOnly">
            <summary>
            Contains CPU-only math functions that are automatically mapped to IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Double)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Single)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Double)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Single)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Double)">
            <summary>
            Computes 1.0 / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0 / value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Single)">
            <summary>
            Computes 1.0f / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0f / value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Double,System.Double)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Double)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Double)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Double)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Double)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Double)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Double)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Double)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Double)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Double)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Double,System.Double)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Double,System.Double)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Double)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Double)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Double)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Double)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double,System.Double)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Double)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Double)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Single,System.Single)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Single)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Single)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Single)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Single)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Single)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Single)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Single)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Single)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Single)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Single,System.Single)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Single,System.Single)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Single)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Single)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Single)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Single)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single,System.Single)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Single)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Single)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded up (away from zero).</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded up (away from zero).</returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath.IntegerParts">
            <summary>
            Represents integer parts of an 64 bit integer.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt64)">
            <summary>
            Converts the given value into lower and upper parts.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Stores the given lower and upper parts.
            </summary>
            <param name="lower">The lower part.</param>
            <param name="upper">The upper part.</param>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Lower">
            <summary>
            The lower 32 bits.
            </summary>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Upper">
            <summary>
            The upper 32 bits.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.ToULong">
            <summary>
            Converts the parts into a single ulong value.
            </summary>
            <returns>The resolved ulong value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.Int64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.UInt64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeULong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeLong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="T:ILGPU.InvalidKernelOperationException">
            <summary>
            An exception that is thrown when an ILGPU kernel method is called from the
            managed CPU side instead of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.InvalidKernelOperationException.#ctor">
            <summary>
            Constructs a new exception.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MemoryAddressSpace">
            <summary>
            Represents an address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Generic">
            <summary>
            The generic address space (any space).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IAddressSpace">
            <summary>
            Represents the base interface for all address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaceAttribute">
            <summary>
            Represents an address-space annotation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaceAttribute.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address-space attribute.
            </summary>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.AddressSpaceAttribute.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces">
            <summary>
            Contains pre-defined address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Generic">
            <summary>
            Represents the generic address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaceExtensions">
            <summary>
            Extensions to encode ILGPU address space information in the .Net type system environment.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaceExtensions.GetManagedType(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves the managed type for the given address space.
            </summary>
            <param name="space">The address space.</param>
            <returns>The .Net representation of the given address space.</returns>
        </member>
        <member name="M:ILGPU.IR.AddressSpaceExtensions.GetAddressSpaceType(System.Type)">
            <summary>
            Resolves the address-space type for the given .Net type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved address space.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaInformation">
            <summary>
            Represents information about an alloca node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaInformation.#ctor(System.Int32,ILGPU.IR.Values.Alloca,System.Int32)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="index">The allocation index.</param>
            <param name="alloca">The alloca node.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Index">
            <summary>
            Returns the allocation index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Alloca">
            <summary>
            Returns the alloca node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsArray">
            <summary>
            Returns true if this is an array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsDynamicArray">
            <summary>
            Returns true if this is an array with dynamic length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ArraySize">
            <summary>
            Returns the number 
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.TotalSize">
            <summary>
            Returns the total size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaKindInformation">
            <summary>
            Represents information about a whole category of alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation},System.Int32)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="allocas">The alloca nodes.</param>
            <param name="totalSize">The total size.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Allocas">
            <summary>
            Returns the alloca nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Item(System.Int32)">
            <summary>
            Returns the i-th allocations.
            </summary>
            <param name="index">The index.</param>
            <returns>The resolved alloca information.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Length">
            <summary>
            Returns the number of allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.TotalSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all allocas.
            </summary>
            <returns>An enumerator to enumerate all allocas.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Allocas">
            <summary>
            Implements an alloca analysis to resolve information
            about alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.Create(ILGPU.IR.Analyses.Scope,ILGPU.Backends.ABI)">
            <summary>
            Creates an alloca analysis.
            </summary>
            <param name="scope">The parent scope.</param>
            <param name="abi">The ABI specification.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.#ctor(ILGPU.IR.Analyses.Scope,ILGPU.Backends.ABI)">
            <summary>
            Constructs a new analysis.
            </summary>
            <param name="scope">The current scope.</param>
            <param name="abi">The ABI specification.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.AddAllocation(ILGPU.Backends.ABI,ILGPU.IR.Values.Alloca,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder,System.Int32@,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder)">
            <summary>
            Creates and adds a new allocation to the given list.
            </summary>
            <param name="abi">The current ABI.</param>
            <param name="alloca">The current alloca.</param>
            <param name="builder">The target builder.</param>
            <param name="memorySize">The current memory size.</param>
            <param name="dynamicBuilder">The target builder for dynamic allocations.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalAllocations">
            <summary>
            Returns all location allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalMemorySize">
            <summary>
            Returns the total local memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedMemorySize">
            <summary>
            Returns the total shared memory size in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG">
            <summary>
            Represents a control flow graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.INodeMappingValueProvider`1">
            <summary>
            A provider for node mapping values.
            </summary>
            <typeparam name="T">The mapping element type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.INodeMappingValueProvider`1.GetValue(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Resolves a mapping value for the given node.
            </summary>
            <param name="node">The graph node.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.NodeMapping`1">
            <summary>
            Represents a mapping thats maps CFG nodes to values.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.NodeMapping`1.Create``1(ILGPU.IR.Analyses.CFG,``0@)">
            <summary>
            Creates a new node mapping
            </summary>
            <typeparam name="TProvider">The value provider type.</typeparam>
            <param name="cfg">The source graph.</param>
            <param name="provider">The value provider.</param>
            <returns>The resolved node mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.NodeMapping`1.#ctor(ILGPU.IR.Analyses.CFG)">
            <summary>
            Constructs a new node mapping.
            </summary>
            <param name="cfg">The parent cfg.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.NodeMapping`1.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.NodeMapping`1.Scope">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.NodeMapping`1.Item(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Resolves the associated value.
            </summary>
            <param name="node">The node.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.INode">
            <summary>
            Represents an abstract interface for all nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.INode.Block">
            <summary>
            Returns the associated function value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.INode.NodeIndex">
            <summary>
            Returns the zero-based node index that can be used
            for fast lookups using arrays.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.Node">
            <summary>
            Represents a single node in the scope of a control flow graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.Node.NodeCollection">
            <summary>
            Represents a node collection of attached nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NodeCollection.Nodes">
            <summary>
            Returns the associated node set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NodeCollection.Count">
            <summary cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NodeCollection.Item(System.Int32)">
            <summary>
            Returns the i-th node.
            </summary>
            <param name="index">The relative node index.</param>
            <returns>The resolved node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.NodeCollection.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all attached nodes.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.NodeCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#CFG#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.NodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.Node.Enumerator">
            <summary>
            Represents a child enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.CFG.Node})">
            <summary>
            Constructs a new child enumerator.
            </summary>
            <param name="valueSet">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.#ctor(ILGPU.IR.Analyses.CFG,ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new node.
            </summary>
            <param name="parent">The parent graph.</param>
            <param name="block">The associated block.</param>
            <param name="nodeIndex">The unique node index.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Parent">
            <summary>
            Returns the parent cfg.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NodeIndex">
            <summary>
            Returns the zero-based node index that can be used
            for fast lookups using arrays.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Predecessors">
            <summary>
            Returns the predecessors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.Successors">
            <summary>
            Returns the successors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NumPredecessors">
            <summary>
            Returns the number of predecessors.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Node.NumSuccessors">
            <summary>
            Returns the number of successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.AddSuccessor(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Adds the given block as successor.
            </summary>
            <param name="successor">The successor to add.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.GetEnumerator">
            <summary>
            Returns the successors of this node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Node.ToString">
            <summary>
            Returns the string representation of this CFG node.
            </summary>
            <returns>The string representation of this CFG node.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG.Enumerator">
            <summary>
            Represents a node enumerator to iterate over all nodes
            in a control flow graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Enumerator.Parent">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.Create(ILGPU.IR.Analyses.Scope)">
            <summary>
            Creates a new cfg.
            </summary>
            <param name="scope">The parent scope.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.#ctor(ILGPU.IR.Analyses.Scope)">
            <summary>
            Constructs a new CFG.
            </summary>
            <param name="scope">The current scope.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Context">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Scope">
            <summary>
            Return the associated scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.EntryNode">
            <summary>
            Returns the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Count">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the cfg node for the given basic block.
            </summary>
            <param name="block">The basic block to resolve.</param>
            <returns>The resolved basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.CreateSCCs">
            <summary>
            Creates a new SCC analysis.
            </summary>
            <returns>The created SCC analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.CreateNodeMapping``2(``1@)">
            <summary>
            Creates a new node mapping to associated with the current graph.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
            <typeparam name="TProvider">The value provider for each node.</typeparam>
            <returns>The created mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all nodes
            stored in this graph in reverse post order.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#CFG#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Dominators">
            <summary>
            Implements a dominator analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.Create(ILGPU.IR.Analyses.CFG)">
            <summary>
            Creates a dominator analysis.
            </summary>
            <param name="cfg">The control flow graph.</param>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators.idomsInRPO">
            <summary>
            Stores all idoms in RPO.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators.nodesInRPO">
            <summary>
            Stores all CFG nodes in RPO.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.#ctor(ILGPU.IR.Analyses.CFG)">
            <summary>
            Constructs the dominators for the given control flow graph.
            </summary>
            <param name="cfg">The control flow graph.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.Intersect(System.Int32,System.Int32)">
            <summary>
            Intersects two RPO numbers in  order to find the associated idom.
            </summary>
            <returns>The resulting LCA node.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators.Context">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators.CFG">
            <summary>
            Returns the associated control flow graph.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.IsDominatedBy(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Returns true iff the given <paramref name="cfgNode"/> node is
            dominated by the <paramref name="dominator"/> node.
            </summary>
            <param name="cfgNode">The node.</param>
            <param name="dominator">The potential dominator.</param>
            <returns>True, iff the given node is dominated by the dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.Dominates(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Returns true iff the given <paramref name="dominator"/> node. is
            dominating the <paramref name="cfgNode"/> node.
            </summary>
            <param name="dominator">The potential dominator.</param>
            <param name="cfgNode">The other node.</param>
            <returns>True, iff the given node is dominating the other node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.GetImmediateDominator(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Returns the first dominator of the given node.
            This might be the node itself iff there are no other
            dominators.
            </summary>
            <param name="cfgNode">The node.</param>
            <returns>The first dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.GetImmediateCommonDominator(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Returns the first dominator of the given node.
            This might be the node itself iff there are no other
            dominators.
            </summary>
            <param name="first">The first node.</param>
            <param name="second">The first node.</param>
            <returns>The first dominator.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfInfo">
            <summary>
            A simple if-information object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfo.#ctor(ILGPU.IR.Value,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new if-information object.
            </summary>
            <param name="condition">The if condition.</param>
            <param name="entryBlock">The entry block using the condition.</param>
            <param name="ifBlock">The if block.</param>
            <param name="elseBlock">The else block (if any).</param>
            <param name="exitBlock">The exit block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.Condition">
            <summary>
            The basic if condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.EntryBlock">
            <summary>
            The entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.IfBlock">
            <summary>
            The if block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.ElseBlock">
            <summary>
            The final else block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.ExitBlock">
            <summary>
            The final exit block (continue target).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfo.HasElseBlock">
            <summary>
            Returns true if the current if has an else block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfo.IsSimpleIf">
            <summary>
            Returns tue if this is a simple if. A simple if is directly
            connected to both branch blocks. Furthermore, each branch block
            is directly linked to exit block.
            </summary>
            <returns>True, if this is a simple if.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfo.HasSideEffects">
            <summary>
            Returns true if this if has side effects.
            </summary>
            <returns>True, if this if has side effects.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfo.ResolveVariableInfo">
            <summary>
            Resolves detailed variable information.
            </summary>
            <returns>The resolved variable information.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfVariableInfo">
            <summary>
            Represents detailed variable information with respect
            to an if statement.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfVariableInfo.Variable">
            <summary>
            A single if variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Variable.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new variable.
            </summary>
            <param name="trueValue">The true value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Variable.#ctor(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Constructs a new variable.
            </summary>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfVariableInfo.Variable.TrueValue">
            <summary>
            The value from the true branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfVariableInfo.Variable.FalseValue">
            <summary>
            The value from the false branch.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfVariableInfo.Enumerator">
            <summary>
            An enumerator to iterate over all variables.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.#ctor(ILGPU.IR.Analyses.IfVariableInfo@)">
            <summary>
            Constructs a new variable enumerator.
            </summary>
            <param name="info">The parent info instance.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.Current">
            <summary>
            Returns the current info.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.#ctor(ILGPU.IR.Analyses.IfInfo@)">
            <summary>
            Constructs a new detailed variable information instance.
            </summary>
            <param name="ifInfo">The variable info.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfVariableInfo.Count">
            <summary>
            Returns the number of phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all variables.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{ILGPU#IR#Values#PhiValue,ILGPU#IR#Analyses#IfVariableInfo#Variable}}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfVariableInfo.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfInfos">
            <summary>
            Inferes high-level control-flow ifs
            from unstructred low-level control flow.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.IfInfos.Enumerator">
            <summary>
            An enumerator to iterate over all ifs.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.IfInfo})">
            <summary>
            Constructs a new info enumerator.
            </summary>
            <param name="infos">The infos to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfos.Enumerator.Current">
            <summary>
            Returns the current info.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfos.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Create(ILGPU.IR.Analyses.CFG)">
            <summary>
            Creates a new if infos instance.
            </summary>
            <param name="cfg">The current CFG.</param>
            <returns>The created info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.Create(ILGPU.IR.Analyses.Dominators)">
            <summary>
            Creates a new if infos instance.
            </summary>
            <param name="dominators">The current dominators.</param>
            <returns>The created info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.TryCreate(ILGPU.IR.Analyses.Dominators,ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.IfInfo@)">
            <summary>
            Tries to create a new if-info instance.
            </summary>
            <param name="dominators">The dominators.</param>
            <param name="exitNode">The exit node.</param>
            <param name="ifInfo">The resulting if info.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.#ctor(ILGPU.IR.Analyses.Dominators)">
            <summary>
            Constructs a new info infos instance.
            </summary>
            <param name="dominators">The source dominators.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfos.Dominators">
            <summary>
            Returns the associated dominators.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfos.Count">
            <summary>
            Returns the number of info objects.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IfInfos.Item(System.Int32)">
            <summary>
            Lookups the given if-info index.
            </summary>
            <param name="index">The if-info index.</param>
            <returns>The resolved if info.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.TryGetIfInfo(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.IfInfo@)">
            <summary>
            Tries to resolve the given node to an if-info instance.
            </summary>
            <param name="node">The node to lookup.</param>
            <param name="ifInfo">The resolved if info (if any).</param>
            <returns>True, if any if info could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all infos.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#IfInfo}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.IfInfos.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
            <typeparam name="T">Custom information type per entry.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Entry">
            <summary>
            Represents a landscape entry.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Landscape`1.Entry.Comparison">
            <summary>
            Compares two entries according to their associated method's id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Scope">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Data">
            <summary>
            Returns custom information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NodeCount">
            <summary>
            Returns the number of nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumBlocks">
            <summary>
            Returns the number of basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumUses">
            <summary>
            Returns the number of uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.HasReferences">
            <summary>
            Returns true if this function has references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.References">
            <summary>
            Returns all method references to other methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.IsUsedBy(ILGPU.IR.Method)">
            <summary>
            Registers all resolved uses (backward edges).
            </summary>
            <param name="method">The method.</param>
            <returns>True, if this method is used by the given one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.AddUse(ILGPU.IR.Method)">
            <summary>
            Registers the given method use.
            </summary>
            <param name="method">The method to register.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.FinishUses">
            <summary>
            Finishes the adding of use nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method entries that
            depend on this one (backward edges).
            </summary>
            <returns>An enumerator to enumerate all depending method entries.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.ToString">
            <summary>
            Returns the string representation of this entry.
            </summary>
            <returns>The string representation of this entry.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.IDataProvider">
            <summary>
            An abstract data provider per node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.References)">
            <summary>
            Resolves custom entry information for the given node.
            </summary>
            <param name="scope">The current scope.</param>
            <param name="methodReferences">All references to other methods.</param>
            <returns>The resolved custom data.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Enumerator">
            <summary>
            Enumerates all functions in the call graph scope in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.#ctor(ILGPU.IR.Analyses.Landscape{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="landscape">The parent landscape.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Landscape">
            <summary>
            Returns the parent scope;
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Current">
            <summary>
            Returns the current function entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``2(ILGPU.IR.MethodCollection{``0}@,``1@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``2(ILGPU.IR.UnsafeMethodCollection{``0}@,``1@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``3(``0@,``2@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.#ctor">
            <summary>
            Constructs a new structure instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Item(ILGPU.IR.Method)">
            <summary>
            Returns the landscape entry of the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The resolved landscape entry.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Count">
            <summary>
            Returns the number of function entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.TryGetEntry(ILGPU.IR.Method,ILGPU.IR.Analyses.Landscape{`0}.Entry@)">
            <summary>
            Tries to resolve the landscape entry of the given method.
            </summary>
            <param name="method">The method.</param>
            <param name="entry">The resolved entry.</param>
            <returns>True, if the entry could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Init``3(``0@,``2)">
            <summary>
            Computes all entries.
            </summary>
            <param name="view">The source view.</param>
            <param name="dataProvider">A custom data provider.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.ComputeOrder">
            <summary>
            Computes the post order of the nested call graph.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all functions in the call graph in post order.
            </summary>
            <returns>An enumerator that enumerates all functions in the call graph.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape.DataProvider">
            <summary>
            The default data provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.DataProvider.GetData(ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.References)">
            <summary cref="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Analyses.Scope,ILGPU.IR.Analyses.References)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create``2(``0@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <param name="functionView">The source function view.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create``4(``1@,``3@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="T">The custom information type.</typeparam>
            <typeparam name="TFunctionView">The type of the function view.</typeparam>
            <typeparam name="TPredicate">The view predicate.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="functionView">The source function view.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.#ctor">
            <summary>
            Constructs a new function structure instance.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo">
            <summary>
            A simple loop info object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.Create(ILGPU.IR.Analyses.SCCs.SCC)">
            <summary>
            Creates a new loop info instance from the given
            scc while checking for unique entry and exit blocks.
            </summary>
            <param name="scc">The scc.</param>
            <returns>The resolved loop info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.TryCreate(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.Analyses.LoopInfo@)">
            <summary>
            Tries to create a new loop info instance from the given
            scc while checking for unique entry and exit blocks.
            </summary>
            <param name="scc">The scc.</param>
            <param name="loopInfo">The resolved loop info object (if any).</param>
            <returns>True, if the resulting loop info object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.TryGetEntryBlock(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.BasicBlock@)">
            <summary>
            Checks whether the given node is a loop entry point.
            </summary>
            <param name="scc">All SCCS.</param>
            <param name="entryPoint">The resolved entry point (if any).</param>
            <returns>True, if the given node is a loop entry point.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.TryGetExitBlock(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to resolve a unique exit block.
            </summary>
            <param name="scc">The current SCC.</param>
            <param name="exitBlock">The resolved exit block (if any).</param>
            <returns>True, if an unique break node could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.TryResolveInductionVariable(ILGPU.IR.Analyses.SCCs.SCC@,System.Int32,System.Collections.Generic.HashSet{ILGPU.IR.Node},ILGPU.IR.Values.PhiValue,ILGPU.IR.Analyses.InductionVariable@)">
            <summary>
            Checks whether the given phi value can be resolved
            to an induction variable.
            </summary>
            <param name="scc">The related SCC.</param>
            <param name="variableIndex">The variable index.</param>
            <param name="visitedNodes">The set of already visited nodes.</param>
            <param name="phiValue">The current phi value.</param>
            <param name="inductionVariable">The resolved induction variable (if any).</param>
            <returns>True, if the given phi node could be resolved to an induction variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.IsInductionVariableBranch(ILGPU.IR.Analyses.SCCs.SCC@,System.Collections.Generic.HashSet{ILGPU.IR.Node},ILGPU.IR.Value)">
            <summary>
            Tries to trace an induction-variable branch.
            </summary>
            <param name="scc">The current scc.</param>
            <param name="visitedNodes">The set of already visited nodes.</param>
            <param name="node">The node to trace.</param>
            <returns>True, if the given node is an induction-variable branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.#ctor(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new loop info instance.
            </summary>
            <param name="scc">The parent scc.</param>
            <param name="entryBlock">The unique entry block.</param>
            <param name="exitBlock">The unique exit block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo.SCC">
            <summary>
            Returns the associated SCC.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo.ExitBlock">
            <summary>
            Returns the exit block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo.InductionVariables">
            <summary>
            Returns all underlying induction variables.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to the associated SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <returns>True, if the node belongs to the associated SCC.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfos">
            <summary>
            Inferes high-level control-flow loops
            from unstructred low-level control flow.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfos.Enumerator">
            <summary>
            An enumerator to iterate over all SCCs.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.LoopInfo})">
            <summary>
            Constructs a new info enumerator.
            </summary>
            <param name="infos">The infos to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.Enumerator.Current">
            <summary>
            Returns the current info.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Create(ILGPU.IR.Analyses.CFG)">
            <summary>
            Creates a new loop infos instance.
            </summary>
            <param name="cfg">The current CFG.</param>
            <returns>The created info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.Create(ILGPU.IR.Analyses.SCCs)">
            <summary>
            Creates a new loop infos instance.
            </summary>
            <param name="sccs">The current SCCs.</param>
            <returns>The created info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.#ctor(ILGPU.IR.Analyses.SCCs)">
            <summary>
            Constructs a new loop infos instance.
            </summary>
            <param name="sccs">The SCCs.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.SCCs">
            <summary>
            Returns the underlying SCCs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.Count">
            <summary>
            Returns the number of info objects.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos.Item(System.Int32)">
            <summary>
            Lookups the given loop-info index.
            </summary>
            <param name="index">The loop-info index.</param>
            <returns>The resolved loop info.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.TryGetLoopInfo(ILGPU.IR.Analyses.CFG.Node,ILGPU.IR.Analyses.LoopInfo@)">
            <summary>
            Tries to resolve the given node to an associated loop-info instance.
            </summary>
            <param name="node">The node to map to a loop-info instance.</param>
            <param name="loopInfo">The resulting loop info (if any).</param>
            <returns>True, if the node could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.TryGetLoopInfo(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.LoopInfo@)">
            <summary>
            Tries to resolve the given block to an associated loop-info instance.
            </summary>
            <param name="block">The block to map to a loop-info instance.</param>
            <param name="loopInfo">The resulting loop info (if any).</param>
            <returns>True, if the node could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.TryGetLoopInfo(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.Analyses.LoopInfo@)">
            <summary>
            Tries to resolve the given SCC to a loop-info instance.
            </summary>
            <param name="scc">The SCC to lookup.</param>
            <param name="loopInfo">The resolved loop info (if any).</param>
            <returns>True, if any loop info could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all infos.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#LoopInfo}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableOperation`1">
            <summary>
            Represents an operation that works on an induction variable.
            </summary>
            <typeparam name="T">The operation kind.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Index">
            <summary>
            Returns the operand index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Value">
            <summary>
            Returns the associated constant value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Kind">
            <summary>
            Returns the kind of the operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.IsLeft">
            <summary>
            Returns true if the constant operand value is on the left.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableBounds">
            <summary>
            Represents variable bounds of an induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.#ctor(ILGPU.IR.Value,ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind},ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind})">
            <summary>
            Constructs a new induction-variable bounds.
            </summary>
            <param name="init">The initialization value.</param>
            <param name="updateOperation">The update operation.</param>
            <param name="breakOperation">The break operation.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.Init">
            <summary>
            The initialization value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateValue">
            <summary>
            Returns the update value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakValue">
            <summary>
            Returns the break value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperation">
            <summary>
            The update kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakOperation">
            <summary>
            The break kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariable">
            <summary>
            A single induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.#ctor(System.Int32,ILGPU.IR.Values.PhiValue,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new induction variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="phi">The phi node.</param>
            <param name="init">The init value.</param>
            <param name="update">The update value.</param>
            <param name="breakCondition">The break condition.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Phi">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Init">
            <summary>
            Returns a link to the init expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Update">
            <summary>
            Returns a link to the update expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.BreakCondition">
            <summary>
            Returns a link to the break-condition expression.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveUpdateOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind}@)">
            <summary>
            Tries to resolve a known update operation.
            </summary>
            <param name="updateOperation">The resolved update operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBreakOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind}@)">
            <summary>
            Tries to resolve a known break operation.
            </summary>
            <param name="breakOperation">The resolved break operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBounds(ILGPU.IR.Analyses.InductionVariableBounds@)">
            <summary>
            Tries to resolve the related loop bounds.
            </summary>
            <param name="bounds">The resolved loop bounds (if any).</param>
            <returns>True, if the bounds could be resoled.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis">
            <summary>
            Gathers all phis in a basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis.Enumerator">
            <summary>
            Represents a phi-value enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Values.PhiValue})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="phiValues">All phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves all phi values in the given block.
            </summary>
            <param name="block">The source block.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create``1(``0)">
            <summary>
            Resolves all phi values using the given enumerator.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.#ctor(System.Collections.Generic.List{ILGPU.IR.Values.PhiValue})">
            <summary>
            Constructs a new Phis instance.
            </summary>
            <param name="phis">All detected phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Count">
            <summary>
            Returns the number of phi values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Item(System.Int32)">
            <summary>
            Returns the i-th phi value.
            </summary>
            <param name="index">The phi value index.</param>
            <returns>The resolved phi value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.GetEnumerator">
            <summary>
            Returns a phi-value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#PhiValue}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.References">
            <summary>
            Represents references to other methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.References.Enumerator">
            <summary>
            Enumerates all references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.#ctor(ILGPU.IR.Analyses.References@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="references">The source references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.Current">
            <summary>
            Returns the current function reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="T:ILGPU.IR.Analyses.References.ReferencesVistor`1">
            <summary>
            Represents a specific target and argument visitor.
            </summary>
            <typeparam name="TPredicate">The view predicate type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.ReferencesVistor`1.References">
            <summary>
            Returns the associated references collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.ReferencesVistor`1.ReferencesList">
            <summary>
            Returns the associated references list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.ReferencesVistor`1.Visit(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.IR.Analyses.Scope.IFunctionCallVisitor.Visit(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Create``1(ILGPU.IR.Analyses.Scope,``0@)">
            <summary>
            Computes method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="scope">The source scope.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.#ctor(ILGPU.IR.Analyses.Scope,System.Collections.Generic.List{ILGPU.IR.Method})">
            <summary>
            Constructs a references instance.
            </summary>
            <param name="scope">The source scope.</param>
            <param name="references">All method references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.SourceMethod">
            <summary>
            Returns the associated source function.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Scope">
            <summary>
            Returns the parent scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Count">
            <summary>
            Returns the number of function references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.IsEmpty">
            <summary>
            Returns true if the number of function references is zero.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.TryGetFirstReference(ILGPU.IR.Method@,ILGPU.IR.Analyses.References.Enumerator@)">
            <summary>
            Tries to resolve the first reference.
            </summary>
            <param name="firstReference">The first resolved reference.</param>
            <param name="enumerator">The resolved enumerator.</param>
            <returns>True, if the first reference could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method references.
            </summary>
            <returns>An enumerator to enumerate all method references.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllReferences">
            <summary>
            Represents a collection of all references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllReferences.Create``2(ILGPU.IR.Method,``0@,``1)">
            <summary>
            Computes method references to all methods recursively.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="sourceMethod">The source method.</param>
            <param name="predicate">The current predicate.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllReferences.Create``2(ILGPU.IR.Analyses.Scope,``0@,``1)">
            <summary>
            Computes method references to all methods recursively.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="sourceScope">The source scope.</param>
            <param name="predicate">The current predicate.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllReferences.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Analyses.References})">
            <summary>
            Constructs a new references instance.
            </summary>
            <param name="mapping">The underyling mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllReferences.Mapping">
            <summary>
            Stores the internal mapping dictionary.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllReferences.Item(ILGPU.IR.Method)">
            <summary>
            Resolves method references for the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The resolved references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllReferences.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method references.
            </summary>
            <returns>An enumerator to enumerate all method references.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs">
            <summary>
            An analysis to detect strongly-connected components.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.SCC">
            <summary>
            Represents a single strongly-connected component.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.SCC.Enumerator">
            <summary>
            An enumerator to iterate over all nodes in the current SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.CFG.Node})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="nodes">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator">
            <summary>
            A value enumerator to iterate over all values in the current SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.#ctor(ILGPU.IR.Analyses.SCCs.SCC.Enumerator)">
            <summary>
            Constructs a new value enumerator.
            </summary>
            <param name="iterator">The SCC enumerator.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ValueEnumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator">
            <summary>
            A value enumerator to iterate over all phi values
            that have a dependency on outer and inner values of this SCC.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.#ctor(ILGPU.IR.Analyses.SCCs.SCC)">
            <summary>
            Constructs a new value enumerator.
            </summary>
            <param name="parent">The parent SCC.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.Parent">
            <summary>
            The parent SCCs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.PhiValueEnumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.#ctor(ILGPU.IR.Analyses.SCCs,System.Int32,System.Collections.Generic.List{ILGPU.IR.Analyses.CFG.Node})">
            <summary>
            Constructs a new SCC.
            </summary>
            <param name="parent">The parent SCC.</param>
            <param name="index">The SCC index.</param>
            <param name="sccMembers">All SCC members.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Parent">
            <summary>
            Returns the parent SCCs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Index">
            <summary>
            Returns the SCC index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Count">
            <summary>
            Returns the number of members.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.SCC.Item(System.Int32)">
            <summary>
            Returns the i-th SCC member.
            </summary>
            <param name="index">The index of the i-th SCC member.</param>
            <returns>The resolved SCC member.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to this SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <returns>True, if the node belongs to this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Contains(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Checks whether the given node belongs to this SCC.
            </summary>
            <param name="node">The node to map to an SCC.</param>
            <returns>True, if the node belongs to this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ResolvePhis">
            <summary>
            Resolves all <see cref="T:ILGPU.IR.Values.PhiValue"/>s that are contained
            in this SCC which reference at least one operand that is not
            defined in this SCC.
            </summary>
            <returns>The list of resolved phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ResolveBreakingBlocks">
            <summary>
            Resolves all blocks that can leave this SCC.
            </summary>
            <returns>An array of all blocks that can leave this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.GetValueEnumerator">
            <summary>
            Returns a new value enumerator.
            </summary>
            <returns>The resolved value enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all members
            of this SCC.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#CFG#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Equals(ILGPU.IR.Analyses.SCCs.SCC)">
            <summary>
            Returns true if the other SCC refers to the same SCC.
            </summary>
            <param name="other">The other SCC.</param>
            <returns>True, if the other SCC refers to the same SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.Equals(System.Object)">
            <summary>
            Returns true if the other object refers to the same SCC.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the other object refers to the same SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.GetHashCode">
            <summary>
            Returns the hash code of this SCC.
            </summary>
            <returns>The hash code of this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.ToString">
            <summary>
            Returns the light-weight string representation of this SCC.
            </summary>
            <returns>The light-weight string representation of this SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.op_Equality(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.Analyses.SCCs.SCC)">
            <summary>
            Returns true if the first and the second SCCs refer to the same SCC.
            </summary>
            <param name="first">The first SCC.</param>
            <param name="second">The second SCC.</param>
            <returns>True, if both SCCs refer to the same SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.SCC.op_Inequality(ILGPU.IR.Analyses.SCCs.SCC,ILGPU.IR.Analyses.SCCs.SCC)">
            <summary>
            Returns true if the first and the second SCCs do not refer to the same SCC.
            </summary>
            <param name="first">The first SCC.</param>
            <param name="second">The second SCC.</param>
            <returns>True, if both SCCs do not refer to the same SCC.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.Enumerator">
            <summary>
            An enumerator to iterate over all SCCs.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.SCCs.SCC})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="nodes">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.NodeData">
            <summary>
            Represents node data that is required for Tarjan's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.NodeData.Pop(System.Collections.Generic.Stack{ILGPU.IR.Analyses.SCCs.NodeData})">
            <summary>
            Pops a new data element.
            </summary>
            <param name="stack">The source stack to pop from.</param>
            <returns>The popped node data.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.NodeData.#ctor(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Constructs a new data instance.
            </summary>
            <param name="node">The CFG node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.NodeData.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.NodeData.Index">
            <summary>
            The associated SCC index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.NodeData.LowLink">
            <summary>
            The associated SCC low link.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.NodeData.OnStack">
            <summary>
            Return true if the associated node is on the stack.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.NodeData.HasIndex">
            <summary>
            Returns true if the index has been initialized.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.NodeData.Push(System.Collections.Generic.Stack{ILGPU.IR.Analyses.SCCs.NodeData})">
            <summary>
            Pushes the current node onto the processing stack.
            </summary>
            <param name="stack">The processing stack.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.SCCs.NodeDataProvider">
            <summary>
            A data provider for Tarjan's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.NodeDataProvider.GetValue(ILGPU.IR.Analyses.CFG.Node)">
            <summary cref="M:ILGPU.IR.Analyses.CFG.INodeMappingValueProvider`1.GetValue(ILGPU.IR.Analyses.CFG.Node)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.Create(ILGPU.IR.Analyses.CFG)">
            <summary>
            Creates a new SCC analysis.
            </summary>
            <param name="cfg">The underlying source SCC.</param>
            <returns>The created SCC analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.#ctor(ILGPU.IR.Analyses.CFG)">
            <summary>
            Constructs a new collection of SCCs.
            </summary>
            <param name="cfg">The source CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.Count">
            <summary>
            Returns the number of SCCs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.SCCs.Item(System.Int32)">
            <summary>
            Returns the i-th SCC.
            </summary>
            <param name="index">The index of the i-th SCC.</param>
            <returns>The resolved SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.StrongConnect(System.Collections.Generic.Stack{ILGPU.IR.Analyses.SCCs.NodeData},ILGPU.IR.Analyses.CFG.NodeMapping{ILGPU.IR.Analyses.SCCs.NodeData},ILGPU.IR.Analyses.SCCs.NodeData,System.Int32@)">
            <summary>
            The heart of Tarjan's SCC algorithm.
            </summary>
            <param name="stack">The current processing stack.</param>
            <param name="nodeMapping">The current node mapping.</param>
            <param name="v">The current node.</param>
            <param name="index">The current index value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.TryGetSCC(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.SCCs.SCC@)">
            <summary>
            Tries to resolve the given block to an associated SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <param name="scc">The resulting SCC.</param>
            <returns>True, if the node could be resolved to an SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all SCCs.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#SCCs#SCC}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.SCCs.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.ScopeFlags">
            <summary>
            General scope flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.ScopeFlags.None">
            <summary>
            Default scope flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.ScopeFlags.AddAlreadyVisitedNodes">
            <summary>
            Adds already visited nodes to the post order list.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope">
            <summary>
            Represents a collection of all basic blocks.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.IFunctionCallVisitor">
            <summary>
            Represents a visitor for function calls.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.IFunctionCallVisitor.Visit(ILGPU.IR.Values.MethodCall)">
            <summary>
            Visits the given function call.
            </summary>
            <param name="functionCall">The function call.</param>
            <returns>True, iff the process should be continued.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.PostOrderEnumerator">
            <summary>
            Enumerates all actual basic blocks in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.#ctor(ILGPU.IR.Analyses.Scope)">
            <summary>
            Constructs a new basic block enumerator.
            </summary>
            <param name="scope">All blocks.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.BasicBlocks">
            <summary>
            Returns the associated basic block collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderEnumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.Enumerator">
            <summary>
            Enumerates all actual basic blocks in reverse post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Enumerator.#ctor(ILGPU.IR.Analyses.Scope@)">
            <summary>
            Constructs a new basic block enumerator.
            </summary>
            <param name="basicBlocks">All blocks.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Enumerator.BasicBlocks">
            <summary>
            Returns the associated basic block collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.ValueCollection">
            <summary>
            An abstract view on all values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator">
            <summary>
            Enumerates all nodes in all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.#ctor(ILGPU.IR.Analyses.Scope)">
            <summary>
            Constructs a new basic block enumerator.
            </summary>
            <param name="scope">The parent function scope.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.Current">
            <summary>
            Returns the current value and its parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.#ctor(ILGPU.IR.Analyses.Scope)">
            <summary>
            Constructs a new value collection.
            </summary>
            <param name="scope">The parent function scope.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.ValueCollection.FunctionScope">
            <summary>
            Returns the associated function scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.PostOrderCollection">
            <summary>
            Represents a post-order view of a scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderCollection.#ctor(ILGPU.IR.Analyses.Scope)">
            <summary>
            Constructs a new post-order view.
            </summary>
            <param name="scope">The parent scope.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.PostOrderCollection.Scope">
            <summary>
            Returns the parent scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderCollection.GetEnumerator">
            <summary>
            Returns a post-order enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.PostOrderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.IPostOrderNodeHandler">
            <summary>
            Specifies the handling of already visited nodes during post order traversal.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.IPostOrderNodeHandler.AddAlreadyVisitedNode(System.Collections.Generic.List{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock)">
            <summary>
            Adds an already visited node to the target list.
            </summary>
            <param name="target">The target post order list.</param>
            <param name="block">The block to add.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.DefaultPostOrderHandler">
            <summary>
            Does not add already visited nodes to the post oder list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.DefaultPostOrderHandler.AddAlreadyVisitedNode(System.Collections.Generic.List{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock)">
            <summary cref="M:ILGPU.IR.Analyses.Scope.IPostOrderNodeHandler.AddAlreadyVisitedNode(System.Collections.Generic.List{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock)"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Scope.AddAlreadyVisitedNodesPostOrderHandler">
            <summary>
            Adds already visited nodes to the post oder list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.AddAlreadyVisitedNodesPostOrderHandler.AddAlreadyVisitedNode(System.Collections.Generic.List{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock)">
            <summary cref="M:ILGPU.IR.Analyses.Scope.IPostOrderNodeHandler.AddAlreadyVisitedNode(System.Collections.Generic.List{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ComputePostOrder``1(ILGPU.IR.BasicBlock)">
            <summary>
            Computes the post order of all attached blocks
            starting with the entry block.
            </summary>
            <param name="entryBlock">The starting block.</param>
            <returns>The resolved list of blocks in post order.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Create(ILGPU.IR.Method)">
            <summary>
            Creates a new scope with default scope flags.
            </summary>
            <param name="method">The parent method.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.Create(ILGPU.IR.Method,ILGPU.IR.Analyses.ScopeFlags)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="method">The parent method.</param>
            <param name="scopeFlags">The scope flags.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.#ctor(ILGPU.IR.Method,ILGPU.IR.Analyses.ScopeFlags)">
            <summary>
            Creates a new method scope.
            </summary>
            <param name="method">The parent method.</param>
            <param name="scopeFlags">The current scope flags.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Context">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Method">
            <summary>
            Returns the associated function entry point.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.ScopeFlags">
            <summary>
            Returns the current scope flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.EntryBlock">
            <summary>
            Returns the method's entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Count">
            <summary>
            Returns the number of detected blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Item(System.Int32)">
            <summary>
            Returns the i-th basic block.
            </summary>
            <param name="index">The basic block index.</param>
            <returns>The resolved basic block.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.Values">
            <summary>
            Returns an abstract view on all values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Scope.PostOrder">
            <summary>
            Returns a post-order view of this scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.CreateCFG">
            <summary>
            Creates a new CFG.
            </summary>
            <returns>The created CFG.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.ComputeReferences``1(``0@)">
            <summary>
            Computes method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.VisitFunctionCalls``1(``0@)">
            <summary>
            Visits all function calls in this scope.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.GetEnumerator">
            <summary>
            Returns a reverse post-order enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Scope.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.IScopeProvider">
            <summary>
            Represents an abstract scope provider.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.IScopeProvider.Item(ILGPU.IR.Method)">
            <summary>
            Resolves the scope that belongs to the given method.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved scope</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AsyncCachedScopeProvider">
            <summary>
            Represents a thread-safe scope cache.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AsyncCachedScopeProvider.#ctor">
            <summary>
            Creates a new scope cache.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AsyncCachedScopeProvider.Item(ILGPU.IR.Method)">
            <summary>
            Resolves the scope that belongs to the given method.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved scope</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AsyncCachedScopeProvider.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CachedScopeProvider">
            <summary>
            Represents a non-thread-safe scope cache.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator">
            <summary>
            An enumerator to iterate over all cached elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator.Current">
            <summary>
            Returns the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.#ctor">
            <summary>
            Creates a new scope cache.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CachedScopeProvider.Count">
            <summary>
            Returns the number of cached scopes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CachedScopeProvider.Item(ILGPU.IR.Method)">
            <summary>
            Resolves the scope that belongs to the given method.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved scope</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.Resolve(ILGPU.IR.Method,ILGPU.IR.Analyses.Scope@)">
            <summary>
            Resolves the scope for the given method and returns true
            if the scope was not cached before.
            </summary>
            <param name="method">The method.</param>
            <param name="scope">The resolved scope.</param>
            <returns>True, if the scope was not registered before.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CachedScopeProvider.GetEnumerator">
            <summary>
            Resolves an enumerator to iterate over all cached elements.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.NewScopeProvider">
            <summary>
            Creates a new scope for every method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.NewScopeProvider.Item(ILGPU.IR.Method)">
            <summary>
            Creates a new scope that belongs to the given method.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The created scope</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlock">
            <summary>
            Represents a single basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ValueEntry">
            <summary>
            Represents a value reference within a single basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.#ctor(System.Int32,ILGPU.IR.Values.ValueReference)">
            <summary>
            Converts a new value entry.
            </summary>
            <param name="index">The index within the block.</param>
            <param name="valueReference">The actual value reference.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Index">
            <summary>
            The current index of the associated value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.ValueReference">
            <summary>
            The actual value reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Value">
            <summary>
            The resolved value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToValue">
            <summary>
            Implicitly converts the current value entry to its associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToString">
            <summary>
            Returns the string representation of the underlying value.
            </summary>
            <returns>The string representation of the underlying value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.op_Implicit(ILGPU.IR.BasicBlock.ValueEntry)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given value entry to its associated value.
            </summary>
            <param name="valueEntry">The value entry to convert.</param>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Enumerator">
            <summary>
            An enumerator for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="basicBlock">The basic block to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.#ctor(ILGPU.IR.Method,System.String,ILGPU.IR.NodeId)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="method">The parent method.</param>
            <param name="name">The name of the block (or null).</param>
            <param name="nodeId">The unique node id.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Method">
            <summary>
            Returns the parent IR method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Name">
            <summary>
            Returns the (meaningless) name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Successors">
            <summary>
            Returns all successor nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Count">
            <summary>
            Returns the number of detected blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Item(System.Int32)">
            <summary>
            Returns the i-th value.
            </summary>
            <param name="index">The value index.</param>
            <returns>The resolved value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.HasSideEffects">
            <summary>
            Checks whether this block has side effects.
            </summary>
            <returns>True, if this block has side effects.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetTerminatorAs``1">
            <summary>
            Returns the terminator converted to the given type.
            </summary>
            <typeparam name="T">The target terminator type.</typeparam>
            <returns>The converted terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetOrCreateBuilder(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder@)">
            <summary>
            Resolves the current builder or creates a new one.
            </summary>
            <param name="functionBuilder">The current function builder.</param>
            <param name="resolvedBuilder">The resolved bloc builder.</param>
            <returns>True, if the builder was created.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ReleaseBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="otherBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.CompactTerminator">
            <summary>
            Compacts the terminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.DumpToConsole">
            <summary>
            Dumps this block to the console output.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.DumpToConsole(System.Boolean)">
            <summary>
            Dumps this block to the console output.
            </summary>
            <param name="ignoreDeadValues">True, if dead values should be ignored.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Dump(System.IO.TextWriter,System.Boolean)">
            <summary>
            Dumps this block to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="ignoreDeadValues">True, if dead values should be ignored.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GC">
            <summary>
            Performs a GC run on this block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Builder">
            <summary>
            Represents a basic block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.values">
            <summary>
            A local cache of the value list.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.toRemove">
            <summary>
            A collection of values to remove
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.insertPosition">
            <summary>
            The current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="block">The parent block.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.MethodBuilder">
            <summary>
            Returns the parent function builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Terminator">
            <summary>
            Gets or sets the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Count">
            <summary>
            Returns the number of attached values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Values">
            <summary>
            Gets or sets the current value list.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.InsertPosition">
            <summary>
            Gets or sets the current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupSequencePoint(ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Setups the current sequence point of this basic block and
            sets the current sequence point of the parent method builder to
            the given point.
            </summary>
            <param name="sequencePoint">The sequence point to setup.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.BasicBlock.ValueEntry@)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="valueEntry">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.Value@)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="value">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.InsertAtBeginning(ILGPU.IR.Value)">
            <summary>
            Inserts the given value at the beginning of this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Clear">
            <summary>
            Clears all attached values (except the terminator).
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Remove(ILGPU.IR.Value)">
            <summary>
            Schedules the given value for removal.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval">
            <summary>
            Applies all scheduled removal operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval``1(``0)">
            <summary>
            Applies all scheduled removal operations by adding them to
            the given <paramref name="targetCollection"/>.
            </summary>
            <param name="targetCollection">The target collection to wich all elements will be appended.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.RemapPhiArguments(System.Collections.Generic.IEnumerable{ILGPU.IR.BasicBlock},ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Updates the phi values in the supplied blocks to expect the new block id
            </summary>
            <param name="successors">The blocks containing phi values to be updated</param>
            <param name="oldBlockId">The previous block id</param>
            <param name="newBlockId">The replacement block id</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SpecializeCall``1(ILGPU.IR.Values.MethodCall,``0)">
            <summary>
            Specializes a function call.
            </summary>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="call">The call to specialize.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
            <returns>The created target block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SpecializeCall(ILGPU.IR.Values.MethodCall,ILGPU.IR.Analyses.Scope)">
            <summary>
            Specializes a function call.
            </summary>
            <param name="call">The call to specialize.</param>
            <param name="scope">The call target's scope.</param>
            <returns>The created target block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SplitBlock(ILGPU.IR.Value,System.Boolean)">
            <summary>
            Splits the current block at the given value.
            </summary>
            <param name="splitPoint">The split point.</param>
            <param name="keepSplitPoint">True, if you want to keep the split point.</param>
            <returns>The created temporary block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.MergeBlock(ILGPU.IR.BasicBlock)">
            <summary>
            Merges the given block into the current one.
            </summary>
            <param name="other">The other block to merge.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ReplaceWithCall(ILGPU.IR.Value,ILGPU.IR.Method)">
            <summary>
            Replaces the given value with a call to the provided function.
            </summary>
            <param name="value">The value to replace.</param>
            <param name="implementationMethod">The target implementation method.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreateTerminator(ILGPU.IR.Values.TerminatorValue)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator(ILGPU.IR.Values.TerminatorValue)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Append``1(``0)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ToBasicBlock">
            <summary>
            Implicitly converts the current builder into its associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.op_Implicit(ILGPU.IR.BasicBlock.Builder)~ILGPU.IR.BasicBlock">
            <summary>
            Implicitly converts the given builder into its associated basic block.
            </summary>
            <param name="builder">The builder to convert.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Construction.IRBuilder">
            <summary>
            An IR builder that can construct IR nodes.
            </summary>
            <remarks>Members of this class are thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArray(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array value.
            </summary>
            <param name="elementType">The array element type.</param>
            <param name="length">The array length.</param>
            <returns>The created empty array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArray(ILGPU.IR.Types.ArrayType)">
            <summary>
            Creates a new array value.
            </summary>
            <param name="type">The array type.</param>
            <returns>The created empty array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetElement(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a load operation of an array element.
            </summary>
            <param name="arrayValue">The array value.</param>
            <param name="index">The field index to load.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetElement(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an array elmeent.
            </summary>
            <param name="arrayValue">The array value.</param>
            <param name="index">The array index to store.</param>
            <param name="value">The array value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayAccumulationMultiply(ILGPU.IR.Value)">
            <summary>
            Creates an array accumulation that accumulates all elements
            in the array into a single mutiplication value.
            </summary>
            <param name="arrayValue">The source array value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayImplementationExtent(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},System.Int32)">
            <summary>
            Creates array implemention extent.
            </summary>
            <param name="extents">The different extents.</param>
            <param name="startIndex">The start index within the extents array.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayImplementation(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates an array implementation instance that represents
            a managed array.
            </summary>
            <param name="arrayView">
            The raw view to a memory region that realizes the array.
            </param>
            <param name="extent">The array that holds all dimension indices.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayImplementationView(ILGPU.IR.Value)">
            <summary>
            Resolves the underlying view of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetLinearArrayImplementationLength(ILGPU.IR.Value)">
            <summary>
            Resolves the linear length of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayImplementationLength(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Resolves the underlying dimension length of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <param name="dimension">An dimension value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayImplementationElementIndex(ILGPU.IR.Value,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},System.Int32,System.Int32)">
            <summary>
            Resolves the underlying dimension length of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <param name="indices">An array containing all required index values.</param>
            <param name="startIndex">The start index within the indices array.</param>
            <param name="numIndices">The number of indices to use from the indices array.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadArrayImplementationElementAddress(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Resolves the address of an element in the scope of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <param name="linearIndex">An linear element index.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadArrayImplementationElementAddress(ILGPU.IR.Value,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},System.Int32,System.Int32)">
            <summary>
            Resolves the address of an element in the scope of an array implementation.
            </summary>
            <param name="arrayImplementation">An array implementation value.</param>
            <param name="indices">An array containing all required index values.</param>
            <param name="startIndex">The start index within the indices array.</param>
            <param name="numIndices">The number of indices to use from the indices array.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomic(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic operation.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The target value.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
            <returns>A node that represents the atomic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomicCAS(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic compare-and-swap operation
            </summary>
            <param name="target">The parent memory operation.</param>
            <param name="value">The target value.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
            <returns>A node that represents the atomic compare-and-swap operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerCast(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a cast operation that casts the element type of a pointer
            but does not change its address space.
            </summary>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAddressSpaceCast(ILGPU.IR.Value,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an address-space cast.
            </summary>
            <param name="node">The operand.</param>
            <param name="targetAddressSpace">The target address space.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewCast(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a view cast.
            </summary>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateFloatAsIntCast(ILGPU.IR.Value)">
            <summary>
            Creates a float as int reinterpret bit cast.
            </summary>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIntAsFloatCast(ILGPU.IR.Value)">
            <summary>
            Creates an int as float reinterpret bit cast.
            </summary>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePredicate(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a conditional predicate.
            </summary>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDebug(ILGPU.IR.Values.DebugKind,ILGPU.IR.Value)">
            <summary>
            Creates a new failed debug assertion.
            </summary>
            <param name="kind">The operation kind.</param>
            <param name="message">The assertion message.</param>
            <returns>A node that represents the debug assertion.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new IR builder.
            </summary>
            <param name="basicBlock">The current basic block.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.StringType">
            <summary>
            Returns the string type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.UseConstantPropagation">
            <summary>
            True, if the IR builder should use constant propagation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.NewNodeMarker">
            <summary>
            Creates a new unique node marker.
            </summary>
            <returns>The new node marker.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateWarpSizeValue">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLaneIdxValue">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridIndexValue(ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupIndexValue(ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridDimensionValue(ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupDimensionValue(ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents of a <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSizeOf(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a node that represents the native size of the
            give type.
            </summary>
            <param name="type">The type.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateUndefined">
            <summary>
            Creates a node that represents an undefined value.
            </summary>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateRuntimeHandle(System.Object)">
            <summary>
            Creates a node that represents a managed runtime handle.
            </summary>
            <param name="handle">The runtime handle.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIndex(ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new index structure instance.
            </summary>
            <param name="dimension">The dimension value.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIndex(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Creates a new index structure instance.
            </summary>
            <param name="dimensions">The dimension values.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary>
            Creates an instantiated phi value.
            </summary>
            <param name="phiValue">The phi value to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator(ILGPU.IR.Values.TerminatorValue)">
            <summary>
            Creates an instantiated terminator.
            </summary>
            <param name="node">The terminator to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)">
            <summary>
            Append a new value.
            </summary>
            <typeparam name="T">The node type.</typeparam>
            <param name="node">The node to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="arrayLength">The array length (number of elements to allocate).</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoad(ILGPU.IR.Value)">
            <summary>
            Creates a load operation.
            </summary>
            <param name="source">The source address.</param>
            <returns>A node that represents the load operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStore(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a store operation.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to store.</param>
            <returns>A node that represents the store operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Creates a memory barrier.
            </summary>
            <param name="kind">The type of the memory barrier.</param>
            <returns>A node that represents the memory barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSubViewValue(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes a new sub view from a given view.
            </summary>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the new sub view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadElementAddress(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes the address of a single element in the scope of a view or a pointer.
            </summary>
            <param name="source">The source view.</param>
            <param name="elementIndex">The element index to load.</param>
            <returns>A node that represents the element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadFieldAddress(ILGPU.IR.Value,System.Int32)">
            <summary>
            Computes the address of a single field.
            </summary>
            <param name="source">The source.</param>
            <param name="fieldIndex">The field index to load.</param>
            <returns>A node that represents the field address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCall(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Creates a new call node.
            </summary>
            <param name="target">The jump target.</param>
            <param name="arguments">The target arguments.</param>
            <returns>A function call.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhi(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new phi node builder.
            </summary>
            <param name="type">The given node type.</param>
            <returns>The created phi builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.DeclareMethod(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateObjectValue(System.Object)">
            <summary>
            Creates a new object value.
            </summary>
            <param name="instance">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructure(ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure value.
            </summary>
            <param name="structureType">The structure type.</param>
            <returns>The created empty structure value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructure(ILGPU.IR.Values.ValueReference[])">
            <summary>
            Creates a new structure instance value.
            </summary>
            <param name="values">The structure instance values.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructure(ILGPU.IR.Types.StructureType,ILGPU.IR.Values.ValueReference[])">
            <summary>
            Creates a new structure instance value.
            </summary>
            <param name="structureType">The structure type.</param>
            <param name="values">The structure instance values.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetField(ILGPU.IR.Value,System.Int32)">
            <summary>
            Creates a load operation of an object field.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="fieldIndex">The field index to load.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetField``1(ILGPU.IR.Value,``0@)">
            <summary>
            Creates a load operation of an object field using
            the given access chain. If the access chain is empty,
            the source value is returned.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="accessChain">The field index chain.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetField(ILGPU.IR.Value,System.Int32,ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an object field.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="fieldIndex">The field index to store.</param>
            <param name="value">The field value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetField(ILGPU.IR.Value,System.Collections.Immutable.ImmutableArray{System.Int32},ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an object field using
            the given access chain. If the access chain is empty,
            the target value to set is returned.
            </summary>
            <param name="objectValue">The object value.</param>
            <param name="accessChain">The field index chain.</param>
            <param name="value">The field value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn">
            <summary>
            Creates a new return terminator.
            </summary>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn(ILGPU.IR.Value)">
            <summary>
            Creates a new return terminator.
            </summary>
            <param name="returnValue">The return value.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateUnconditionalBranch(ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new unconditional branch.
            </summary>
            <param name="target">The target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConditionalBranch(ILGPU.IR.Value,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new conditional branch.
            </summary>
            <param name="condition">The branch condition.</param>
            <param name="trueTarget">The true target block.</param>
            <param name="falseTarget">The false target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Value,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Creates a switch terminator.
            </summary>
            <param name="value">The selection value.</param>
            <param name="targets">All switch targets.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBuilderTerminator(System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Creates a temporary builder terminator.
            </summary>
            <param name="targets">All branch targets.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Value,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Creates a new predicated barrier.
            </summary>
            <param name="predicate">The barrier predicate.</param>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Creates a new barrier.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBroadcast(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Creates a new broadcast operation.
            </summary>
            <param name="variable">The variable.</param>
            <param name="origin">The broadcast origin (thread index within a group or a warp).</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the broadcast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new shuffle operation.
            </summary>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new sub-warp shuffle operation that operates
            on sub-groups of a warp.
            </summary>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the sub shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Creates a primitive type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGenericViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.StructureType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new generic view type that relies on an n-dimension index.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="indexType">The index type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="length">The array length.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayImplementationType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new structure type that implements array functionality.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created implementation structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode})">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <param name="fieldNames">The structure field names.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructureType(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="fieldTypes">The structure field types.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialzized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, iff the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNull(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a null value for the given type.
            </summary>
            <param name="type">The target type.</param>
            <returns>The null reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateEnumValue(System.Object)">
            <summary>
            Creates a new primitive enum constant.
            </summary>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Object)">
            <summary>
            Creates a new primitive constant.
            </summary>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.String)">
            <summary>
            Creates a new string constant.
            </summary>
            <param name="string">The string value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Boolean)">
            <summary>
            Creates a primitive <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.SByte)">
            <summary>
            Creates a primitive <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Byte)">
            <summary>
            Creates a primitive <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Int16)">
            <summary>
            Creates a primitive <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.UInt16)">
            <summary>
            Creates a primitive <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Int32)">
            <summary>
            Creates a primitive <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.UInt32)">
            <summary>
            Creates a primitive <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Int64)">
            <summary>
            Creates a primitive <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.UInt64)">
            <summary>
            Creates a primitive <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Single)">
            <summary>
            Creates a primitive <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(System.Double)">
            <summary>
            Creates a primitive <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.BasicValueType,System.Int64)">
            <summary>
            Creates a primitive value.
            </summary>
            <param name="type">The value type.</param>
            <param name="rawValue">The raw value (sign-extended to long).</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateValue(System.Object,System.Type)">
            <summary>
            Creates a generic value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>The created value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNewView(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Constructs a new view from a pointer and a length.
            </summary>
            <param name="pointer">The source pointer.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the created view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLength(ILGPU.IR.Value)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>The created node.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder">
            <summary>
            Represents an IR rebuilder to rebuild parts of the IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.methodMapping">
            <summary>
            Maps source methods to target methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.blockMapping">
            <summary>
            Maps old blocks to new block builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.blockIdMapping">
            <summary>
            Maps old block is to new block ids.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.phiMapping">
            <summary>
            Maps old phi nodes to new phi builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.valueMapping">
            <summary>
            Maps old nodes to new nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Analyses.Scope,ILGPU.IR.Method.MethodMapping)">
            <summary>
            Constructs a new IR rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="scope">The parent scope.</param>
            <param name="methodRemapping">The used method remapping.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Builder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Scope">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.EntryBlock">
            <summary>
            Returns the target entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.CurrentBlock">
            <summary>
            Gets or sets the current block builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild">
            <summary>
            Rebuilds all values.
            </summary>
            <returns>An array of exit blocks and their return values.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.TryGetNewNode(ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Tries to lookup the new node representation of the given old node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
            <returns>True, iff a corresponding new node could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Map(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Maps the old node to the new node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.ExportNodeMapping``1(``0)">
            <summary>
            Exports the internal node mapping to the given target dictionary.
            </summary>
            <typeparam name="TDictionary">The dictionary type.</typeparam>
            <param name="target">The target dictionary.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupCallTarget(ILGPU.IR.Method)">
            <summary>
            Resolves a method for the given old method
            </summary>
            <param name="oldTarget">The old method.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves a basic block builder for the given old block.
            </summary>
            <param name="oldTarget">The old basic block.</param>
            <returns>The resolved block builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables.
            </summary>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.RebuildAs``1(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables and
            returns the resolved casted to a specific type.
            </summary>
            <typeparam name="T">The target type to cast the new node to.</typeparam>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1">
            <summary>
            Constructs IR nodes that are in SSA form.
            </summary>
            <typeparam name="TVariable">The variable type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.Enumerator">
            <summary>
            A successor or predecessor enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="values">The values to enumerate.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider">
            <summary>
            Provides marker values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.#ctor(System.Int32)">
            <summary>
            Constructs a new marker provider.
            </summary>
            <param name="markerValue">The current marker value.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.MarkerValue">
            <summary>
            Returns the current marker value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.CreateMarker">
            <summary>
            Creates a new marker value.
            </summary>
            <returns>The created marker value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.Apply(System.Int32@)">
            <summary>
            Applies the internal marker value to the given target.
            </summary>
            <param name="targetMarkerValue">The target marker value reference.</param>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer">
            <summary>
            Represents a basic block during cps construction.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi">
            <summary>
            Represents an incomplete phi parameter that has to be
            completed by adding its required operands later on.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.#ctor(`0,ILGPU.IR.Values.PhiValue.Builder)">
            <summary>
            Constructs an incomplete phi.
            </summary>
            <param name="variableRef">The referenced variable.</param>
            <param name="phiBuilder">The phi builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.VariableRef">
            <summary>
            Returns the associated variable ref.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiBuilder">
            <summary>
            Returns the associated phi builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiType">
            <summary>
            Returns the type of the underlying phi node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.markerValue">
            <summary>
            Represents the internal marker value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.blockBuilder">
            <summary>
            Represents the current block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.values">
            <summary>
            Value cache for SSA GetValue and SetValue functionality.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.incompletePhis">
            <summary>
            Container for incomplete "phis" that have to be wired during block sealing.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.#ctor(ILGPU.IR.Construction.SSABuilder{`0},ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Constructs a new SSA block.
            </summary>
            <param name="parent">The associated parent builder.</param>
            <param name="node">The current node.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Builder">
            <summary>
            Returns the associated block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsSealed">
            <summary>
            Returns True iff this block is sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.CanSeal">
            <summary>
            Returns true iff this block can be sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsProcessed">
            <summary>
            Returns true iff this block has been processed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Mark(System.Int32)">
            <summary>
            Marks the current block with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, iff the old marker was not equal to the new marker
            (the block was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetValue(`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValue(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.RemoveValue(`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.PeekValue(`0,System.Int32)">
            <summary>
            Peeks a value recursively. This method only retrieves a value
            from a predecessor but does not build any phi nodes.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="marker">The current marker to break cycles.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValueRecursive(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable by asking the predecessors.
            This method recursively constructs required phi nodes to break cycles.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetupPhiArguments(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer.IncompletePhi@,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Setups phi arguments for the given variable reference and the given
            phi parameter. This method is invoked for sealed blocks during CPS
            construction or during the sealing process in the last step.
            </summary>
            <param name="incompletePhi">An incomplete phi node to complete.</param>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.TryRemoveTrivialPhi(ILGPU.IR.Values.PhiValue)">
            <summary>
            Tries to remove trivial phi value.
            </summary>
            <param name="phiValue">The phi value to check.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Seal(ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Seals this block (called when all predecessors have been seen) and
            wires all (previously unwired) phi nodes.
            </summary>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider">
            <summary>
            Creates a <see cref="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer"/> for every <see cref="T:ILGPU.IR.Analyses.CFG.Node"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.#ctor(ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Constructs a new value provider.
            </summary>
            <param name="parent">The parent builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.GetValue(ILGPU.IR.Analyses.CFG.Node)">
            <summary cref="M:ILGPU.IR.Analyses.CFG.INodeMappingValueProvider`1.GetValue(ILGPU.IR.Analyses.CFG.Node)"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Create(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.CFG)">
            <summary>
            Creates a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="cfg">The parent CFG.</param>
            <returns>The created SSA builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.CFG)">
            <summary>
            Constructs a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="cfg">The cfg.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Context">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Method">
            <summary>
            Returns the associated graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MethodBuilder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.CFG">
            <summary>
            Returns the associated graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Item(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Returns the internal value container for the given node.
            </summary>
            <param name="node">The cfg node.</param>
            <returns>The resolved value container.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SetValue(ILGPU.IR.Analyses.CFG.Node,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="node">The target node.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.GetValue(ILGPU.IR.Analyses.CFG.Node,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="node">The target node.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.RemoveValue(ILGPU.IR.Analyses.CFG.Node,`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="node">The target node.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SetValue(ILGPU.IR.BasicBlock,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given block.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.GetValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.RemoveValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Process(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Tries to process the associated block.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Process(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the associated block.
            </summary>
            <param name="basicBlock">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer)">
            <summary>
            Tries to seals the associated block.
            </summary>
            <param name="block">The block to seal.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Tries to seals the associated node.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to seals the associated block.
            </summary>
            <param name="basicBlock">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ProcessAndSeal(ILGPU.IR.Analyses.CFG.Node)">
            <summary>
            Tries to process the given node while always trying
            to seal the given node.
            </summary>
            <param name="node">The target node.</param>
            <returns>True, iff the node has not been processed.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ProcessAndSeal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the given node while always trying
            to seal the given block.
            </summary>
            <param name="basicBlock">The basic block.</param>
            <returns>True, iff the node has not been processed.</returns>
        </member>
        <member name="T:ILGPU.IR.Method">
            <summary>
            Represents a method node within the IR.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.Builder">
            <summary>
            A builder to build methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.basicBlockBuilders">
            <summary>
            All created basic block builders.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new method builder.
            </summary>
            <param name="method">The parent method.</param>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EnableDebugInformation">
            <summary>
            Retruns true if debbug information is enabled.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EntryBlock">
            <summary>
            Gets or sets the current entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(System.Int32)">
            <summary>
            Returns the parameter with the given index.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the associated basic block builder.
            </summary>
            <param name="basicBlock">The basic block to resolve the builder for.</param>
            <returns>The resolved basic block builder.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.NumParams">
            <summary>
            Returns the number of parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.SequencePoint">
            <summary>
            Gets or sets the current sequence point (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.SetupInitialSequencePoint(ILGPU.Frontend.DebugInformation.SequencePoint)">
            <summary>
            Setups the initial sequence point by binding the method's and
            the entry block's sequence points.
            </summary>
            <param name="sequencePoint">The sequence point to setup.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.NewNodeMarker">
            <summary>
            Creates a new unique node marker.
            </summary>
            <returns>The new node marker.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateScope">
            <summary>
            Creates a new method scope with default flags.
            </summary>
            <returns>A new method scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateScope(ILGPU.IR.Analyses.ScopeFlags)">
            <summary>
            Creates a new method scope with custom flags.
            </summary>
            <param name="scopeFlags">The scope flags.</param>
            <returns>A new method scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Analyses.Scope)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <param name="parameterMapping">The target value of every parameter.</param>
            <param name="scope">The used scope.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Analyses.Scope,ILGPU.IR.Method.MethodMapping)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <param name="parameterMapping">The target value of every parameter.</param>
            <param name="scope">The used scope.</param>
            <param name="methodMapping">The method mapping.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateParam(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Creates a parameter with the given index and type information.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateEntryBlock">
            <summary>
            Creates a new entry block.
            </summary>
            <returns>The created entry block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock">
            <summary>
            Creates a new basic block.
            </summary>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock(System.String)">
            <summary>
            Creates a new basic block.
            </summary>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Create(ILGPU.IR.Value)">
            <summary>
            Creates an instantiated value.
            </summary>
            <param name="node">The node to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.DeclareMethod(System.Reflection.MethodBase,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.DeclareMethod(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ToString">
            <summary>
            Returns the string representation of the underlying function.
            </summary>
            <returns>The string representation of the underlying function.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection">
            <summary>
            Represents a readonly view on all parameters.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection.Enumerator">
            <summary>
            Enumerates all actual (not replaced) parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="arguments">The parent source array.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current parameter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="nodeReferences">The source parameters.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Count">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th parameter.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#Parameter}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterMapping">
            <summary>
            Represents a parameter mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterMapping.#ctor(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new parameter mapping.
            </summary>
            <param name="method">The associated method.</param>
            <param name="arguments">The parameter arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Arguments">
            <summary>
            Returns the associated arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Item(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the value that is assigned to the given parameter.
            </summary>
            <param name="parameter">The parameter to map to a value.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.MethodMapping">
            <summary>
            Represents a method mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodMapping.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Method})">
            <summary>
            Constructs a new method mapping.
            </summary>
            <param name="methodMapping">The method mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Method.MethodMapping.Item(ILGPU.IR.Method)">
            <summary>
            Resolve the source method to a remapped target method.
            </summary>
            <param name="source">The source method.</param>
            <returns>The resolved target method.</returns>
        </member>
        <member name="F:ILGPU.IR.Method.Comparison">
            <summary>
            Compares two methods according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ResolveMethodFlags(System.Reflection.MethodBase)">
            <summary>
            Resolves <see cref="T:ILGPU.IR.MethodFlags"/> that represents properties of the
            given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>The resolved method flags.</returns>
        </member>
        <member name="F:ILGPU.IR.Method.transformationFlags">
            <summary>
            Stores internal transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.parameters">
            <summary>
            Stores all parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.#ctor(ILGPU.IR.IRContext,ILGPU.IR.MethodDeclaration@)">
            <summary>
            Creates a new method instance.
            </summary>
            <param name="context">The context this method belongs to.</param>
            <param name="declaration">The associated declaration.</param>
        </member>
        <member name="P:ILGPU.IR.Method.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Name">
            <summary>
            Returns the associated method name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Declaration">
            <summary>
            Returns the associated method declaration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Handle">
            <summary>
            Returns the associated method handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ReturnType">
            <summary>
            Returns the return-type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.IsVoid">
            <summary>
            Returns true iff the return type of the method is void.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasImplementation">
            <summary>
            Returns true if this method has an implementation (no intrinsic or external method).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.TransformationFlags">
            <summary>
            Returns the current transformation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Parameters">
            <summary>
            Returns all attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.NumParameters">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.EntryBlock">
            <summary>
            Returns the associated entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.MethodBuilder">
            <summary>
            Returns the current builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.GC">
            <summary>
            Performs an internal GC run.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.CreateParameterMapping(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Creates a new parameter mapping.
            </summary>
            <param name="arguments">The argument values.</param>
            <returns>The created parameter mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.CreateScope">
            <summary>
            Creates a new method scope with default flags.
            </summary>
            <returns>A new method scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.CreateScope(ILGPU.IR.Analyses.ScopeFlags)">
            <summary>
            Creates a new method scope with custom flags.
            </summary>
            <param name="scopeFlags">The scope flags.</param>
            <returns>A new method scope.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.DumpToConsole">
            <summary>
            Dumps this method to the console output.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.DumpToConsole(System.Boolean)">
            <summary>
            Dumps this method to the console output.
            </summary>
            <param name="ignoreDeadValues">True, if dead values should be ignored.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Dump(System.IO.TextWriter,System.Boolean)">
            <summary>
            Dumps this method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="ignoreDeadValues">True, if dead values should be ignored.</param>
        </member>
        <member name="M:ILGPU.IR.Method.SealParameters(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Seals the current parameters.
            </summary>
            <param name="parameterArray">The new parameters.</param>
        </member>
        <member name="M:ILGPU.IR.Method.CreateBuilder">
            <summary>
            Creates a new builder for this method.
            </summary>
            <returns>The created builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ReleaseBuilder(ILGPU.IR.Method.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="oldBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.Method.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this method has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this method has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.HasTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Returns true iff this method has the given transformation flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, iff this method has the given transformation flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationMode">
            <summary>
            Represents the handler mode of a custom handler routine.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.Redirect">
            <summary>
            Indicates whether the associated method should be replaced by a
            different method.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.GenerateCode">
            <summary>
            Indicates whether the associated method has a custom code-generation
            module is invoked during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementation">
            <summary>
            Represents an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.Mode">
            <summary>
            Returns the associated code-generator mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.TargetMethod">
            <summary>
            Returns the user-defined target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandle(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>True, if the attribute is compatible with the given backend.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>True, if the attribute is compatible with the given backend.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.ResolveMapping``1">
            <summary>
            Resolves an intrinsic implementation for the current attribute.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The resolved intrinsic implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationAttribute">
            <summary>
            Marks methods that rely on an intrinsic-implementation provider during backend specialization.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager">
            <summary>
            Represents an abstract intrinsic manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager">
            <summary>
            Represents an intrinisc manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry">
            <summary>
            Represents a single entry that is associated with a matcher.
            It stores several possible intrinsic implementations for specific backends.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator">
            <summary>
            An enumerator to enumerate all implementations in the scope of an entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Intrinsics.IntrinsicImplementation})">
            <summary>
            Constructs a new implementation enumerator.
            </summary>
            <param name="implementationSet">The implementations.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Current">
            <summary>
            Returns the current implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Register(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given implementation with the current entry.
            </summary>
            <param name="implementation">The implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.GetEnumerator">
            <summary>
            Returns a new enumerator to iterate over all implementations.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#Generic#IEnumerable{ILGPU#IR#Intrinsics#IntrinsicImplementation}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer">
            <summary>
            Represents a mapping of matchers to backend-type specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Create">
            <summary>
            Creates a new backend container.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Item(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind)">
            <summary>
            Returns teh associated intrinsic matcher.
            </summary>
            <param name="kind">The matcher kind.</param>
            <returns>The resolved intrinsic matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0}[])">
            <summary>
            Transforms all internal entries using the transformation provided.
            </summary>
            <typeparam name="TOther">The other matcher type.</typeparam>
            <typeparam name="TTransformer">The transformer type to use.</typeparam>
            <param name="transformer">The transformer instance.</param>
            <param name="otherMatchers">The other matchers (target array).</param>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.containers">
            <summary>
            Stores all intrinsic containers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.#ctor">
            <summary>
            Constructs a new empty implementation manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.Item(ILGPU.Backends.BackendType)">
            <summary>
            Resolves the associated intrinsic container for the given backend type.
            </summary>
            <param name="backendType">The backend type.</param>
            <returns>The resolved intrinsic container.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ResolveMatcher``1(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Resolves an intrinsic matcher.
            </summary>
            <typeparam name="TMatcher">The matcher type.</typeparam>
            <param name="kind">The matcher kind.</param>
            <param name="implementation">The implementation to use.</param>
            <returns>The resolved matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterMethod(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="method">The method information.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterDebug(ILGPU.IR.Values.DebugKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinisc implementation.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1">
            <summary>
            Represents an intrinsic provider that caches intrinsic remappings and implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer">
            <summary>
            Represents an implementation transformer to convert high-level intrinsic values
            into instantiated intrinsic mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Transform(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry)">
            <summary cref="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.CheckImplementations(ILGPU.Backends.Backend,ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry,ILGPU.IR.Intrinsics.IntrinsicImplementation@)">
            <summary>
            Checks the given intrinsic implementations.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="implementations">The availabled intrinsic implementations.</param>
            <param name="mainImplementation">The resolved main implementation.</param>
            <returns>True, if at least a single implementation could be resolved.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry">
            <summary>
            Represents a mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.#ctor(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.Frontend.CodeGenerationResult)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="mapping">The parent mapping.</param>
            <param name="mappingKey">The current mapping key.</param>
            <param name="codeGenerationResult">The intermediate code-generation result.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Mapping">
            <summary>
            The associated mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.MappingKey">
            <summary>
            The associated method mapping key.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.CodeGenerationResult">
            <summary>
            The code-generation result from the IL frontend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Apply">
            <summary>
            Applies the code-generation result to the underlying mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase">
            <summary>
            Represents a code generation phase for intrinsic methods.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Provider">
            <summary>
            Returns the associated provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.TryRegisterIntrinsic``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping{`0})">
            <summary>
            Internal method to register an intrinsic.
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="mapping">The current mapping instance.</param>
            <returns>True, if the intrinsic could be registered.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Method)">
            <summary>
            Tries to register an intrinsic for the given method.
            </summary>
            <param name="method">The method to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Value)">
            <summary>
            Tries to register an intrinsic for the given value.
            </summary>
            <param name="value">The value to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Dispose">
            <summary>
            Ends the current specialization phase.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1">
            <summary>
            Represents an abstract data provider. It can be used in combination
            with the <see cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)"/> method.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode">
            <summary>
            Returns the compatible implementation mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary>
            Gets data from the given intrinisc mapping.
            </summary>
            <typeparam name="TResolver">The resolver type.</typeparam>
            <param name="mapping">The mapping instance.</param>
            <param name="resolver">The resolver instance.</param>
            <returns>The resolved result.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider">
            <summary>
            Resolves IR implementations from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider">
            <summary>
            Resolves code generators from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer,ILGPU.Backends.Backend)">
            <summary>
            Constructs a new intrinsic implementation mapping.
            </summary>
            <param name="container">The source intrinsic container.</param>
            <param name="backend">The associated backend.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.BeginIRSpecialization">
            <summary>
            Begins a new specialization phase.
            </summary>
            <returns>The specialization context.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,System.Reflection.MethodInfo@,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="methodInfo">The resolved method information object (if any).</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Value,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)">
            <summary>
            Tries to resolve data from the given value.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <typeparam name="TDataProvider">The resolver type.</typeparam>
            <param name="value">The value to resolve.</param>
            <param name="result">The resulting value.</param>
            <returns>True, if the value could be resolved to an intrinsic value.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetImplementation(ILGPU.IR.Value,ILGPU.IR.Method@)">
            <summary>
            Resolves the intrinsic implementation (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="irImplementation">The resolved IR implementation.</param>
            <returns>True, if the given method could be resolved to an IR implementation.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetCodeGenerator(ILGPU.IR.Value,`0@)">
            <summary>
            Resolves the intrinsic code generator (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="codeGenerator">The resolved code generator.</param>
            <returns>True, if the given method could be resolved to a code generator.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping">
            <summary>
            Represents an abstract intrinsic implementation mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
            <returns>The resolved generic arguments.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="T:System.Reflection.MethodInfo"/> objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructs a new method-info argument resolver.
            </summary>
            <param name="methodInfo">The associated method information.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.MethodInfo">
            <summary>
            Returns the associated method information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value"/> objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new value argument resolver.
            </summary>
            <param name="value">The associated value.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey">
            <summary>
            Represents a cached mapping key.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.#ctor(System.Type[])">
            <summary>
            Constructs a new mapping key.
            </summary>
            <param name="arguments">The type arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Length">
            <summary>
            Returns the number of mapped generic arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the given object is equal to this mapping key.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="obj">The object.</param>
            <returns>True, if the given object is equal to this mapping key.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.ToString">
            <summary>
            Returns the string representation of this mapping key.
            </summary>
            <returns>The string representation of this mapping key.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Equality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Inequality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are not identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are not identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Implementation">
            <summary>
            Returns the associated intrinisc implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Mode">
            <summary>
            Returns the associated implementation mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.TargetMethod">
            <summary>
            Returns the associated target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveTarget``1(``0,System.Type[]@)">
            <summary>
            Resolves the target method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericArguments">The resolved generic arguments (if any).</param>
            <returns>The resolved target method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveRedirect``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey@)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericMapping">The resolved generic mapping key.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping`1">
            <summary>
            Represents a single intrinsic implementation mapping.
            </summary>
            <typeparam name="TDelegate">The implementation delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping`1.CodeGenerator">
            <summary>
            Returns the associated default code generator (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ProvideImplementation(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Method)">
            <summary>
            Provides the given implementation.
            </summary>
            <param name="genericMapping">The generic mapping key.</param>
            <param name="implementation">The implementation to provide.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveImplementation``1(``0)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveCodeGenerator``1(``0)">
            <summary>
            Resolves the code-generation method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved code-generation method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind">
            <summary>
            Represents a matcher kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.CreateMatchers``1">
            <summary>
            Creates a new set of intrinsic matchers.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementation">
            <summary>
            Defines an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2">
            <summary>
            Transforms a single intrinsic implementation into another one.
            </summary>
            <typeparam name="TFirst">The first implementation type.</typeparam>
            <typeparam name="TSecond">The second implementation type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)">
            <summary>
            Transforms the given implementation into another one.
            </summary>
            <param name="implementation">The implementation to transform.</param>
            <returns>The transformed implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`1">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary>
            Transforms the currently stored intrinsic implementations.
            </summary>
            <typeparam name="TOther">The other matcher value type.</typeparam>
            <typeparam name="TTransformer">The implementation transformer.</typeparam>
            <param name="transformer">The transformer to use.</param>
            <param name="other">The other matcher.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`2">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TMatchedValue">The value type to be matched.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="value">The value instance.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1">
            <summary>
            Represents an intrinic matcher that matches managed methods.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.Register(System.Reflection.MethodInfo,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="value">The method information.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TryGetImplementation(System.Reflection.MethodInfo,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1">
            <summary>
            Represents an intrinic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.ValueKind">
            <summary>
            Returns the target value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1">
            <summary>
            Represents an intrinic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.Implementation">
            <summary>
            Returns the associated implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.Register(`0)">
            <summary>
            Registers the given implementation.
            </summary>
            <param name="implementation">The implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2">
            <summary>
            Represents an intrinic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TValueKind">The type of the value kind.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.entries">
            <summary>
            All value implementation entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.Item(System.Int32)">
            <summary>
            Returns a reference to the i-th element.
            </summary>
            <param name="index">The element index.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicValueMatcher`2.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2">
            <summary>
            Represents an intrinic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TValueKind">The type of the value kind.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.entries">
            <summary>
            All value implementation entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.Item(System.Int32,ILGPU.BasicValueType)">
            <summary>
            Returns a reference to the i-th element.
            </summary>
            <param name="index">The element index.</param>
            <param name="basicValueType">The basic-value type.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.DebugMatcher`1">
            <summary>
            Matches Debug values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.#ctor">
            <summary>
            Constructs a new matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.Register(ILGPU.IR.Values.DebugKind,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.TryGetImplementation(ILGPU.IR.Values.DebugKind,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.DebugMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BroadcastMatcher`1">
            <summary>
            Matches typed Broadcast values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.Register(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1">
            <summary>
            Matches typed WarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1">
            <summary>
            Matches typed SubWarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1">
            <summary>
            Matches typed UnaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.Register(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1">
            <summary>
            Matches typed BinaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.Register(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1">
            <summary>
            Matches typed TernaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.Register(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1">
            <summary>
            Matches typed GenericAtomic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.Register(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.IRContext">
            <summary>
            Represents an IR context.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IRContext.NoHandler">
            <summary>
            Represents no transformer handler.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.NoHandler.BeforeTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary cref="M:ILGPU.IR.Transformations.ITransformerHandler.BeforeTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)"/>
        </member>
        <member name="M:ILGPU.IR.IRContext.NoHandler.AfterTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary cref="M:ILGPU.IR.Transformations.ITransformerHandler.AfterTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)"/>
        </member>
        <member name="M:ILGPU.IR.IRContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.IRContext.Context">
            <summary>
            Returns the main ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.UndefinedValue">
            <summary>
            Returns an undefined value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.UnsafeMethods">
            <summary>
            Internal (unsafe) access to all top-level functions.
            </summary>
            <remarks>
            The resulting collection is not thread safe in terms
            of parallel operations on this context.
            </remarks>
        </member>
        <member name="P:ILGPU.IR.IRContext.Methods">
            <summary>
            Returns all top-level functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.HasFlags(ILGPU.ContextFlags)">
            <summary>
            Returns true if the current context has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if the current context has the given flags.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetUnsafeMethodCollection``1(``0)">
            <summary>
            Returns an unsafe (not thread-safe) function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethodCollection``1(``0)">
            <summary>
            Returns a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.NewNodeMarker">
            <summary>
            Creates a new unique node marker.
            </summary>
            <returns>The new node marker.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethodHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function reference (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(ILGPU.IR.MethodHandle,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(System.Reflection.MethodBase,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethod(ILGPU.IR.MethodHandle)">
            <summary>
            Resolves the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved function.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(System.Reflection.MethodBase,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, iff the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Import``1(ILGPU.IR.Method,``0)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="source">The method to import.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.ImportInternal``1(ILGPU.IR.Method,``0)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="source">The method to import.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Create(ILGPU.IR.Value)">
            <summary>
            Creates an instantiated node by assigning a unique node id.
            </summary>
            <param name="value">The node to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Optimize">
            <summary>
            Applies all default optimization transformations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.Transform(ILGPU.IR.Transformations.Transformer@)">
            <summary>
            Applies the given transfomer to the current context.
            </summary>
            <param name="transformer">The target transformer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Transform``1(ILGPU.IR.Transformations.Transformer@,``0)">
            <summary>
            Applies the given transfomer to the current context.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <param name="transformer">The target transformer.</param>
            <param name="handler">The target handler.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.DumpToFile(System.String)">
            <summary>
            Dumps the IR context to the given file.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.DumpToConsole">
            <summary>
            Dumps the IR context to the console output.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the IR context to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.GC">
            <summary>
            Rebuilds all nodes and clears up the IR.
            </summary>
            <remarks>
            This method must not be invoked in the context of other
            parallel operations using this context.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.IRContext.Clear">
            <summary>
            Clears cached IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached IR nodes.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="P:ILGPU.IR.IRContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.HandleType">
            <summary>
            Returns the runtime handle type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRContext.IndexType">
            <summary>
            Returns the main index type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateGenericViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.StructureType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new generic view type that relies on an n-dimension index.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="indexType">The index type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="length">The array length.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateArrayImplementationType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new structure type that implements array functionality.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created implementation structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode})">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <param name="fieldNames">The structure field names.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateStructureType(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="fieldTypes">The structure field types.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialzized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, iff the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.MethodFlags">
            <summary>
            Represents custom method flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Inline">
            <summary>
            This method should be inlined.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.External">
            <summary>
            An external method declaration (without an implementation).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Intrinsic">
            <summary>
            An intrinisc method that requires a backend-specific implementation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodTransformationFlags">
            <summary>
            Represents transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Dirty">
            <summary>
            This method has been modified since the last GC.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Transformed">
            <summary>
            This method has been transformed and does not require further
            transformation passes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IMethodCollectionPredicate">
            <summary>
            Represents a predicate on a function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)">
            <summary>
            Returns true if this predicate matches the given function.
            </summary>
            <param name="method">The function to test.</param>
            <returns>True, if this predicate matches the given function.</returns>
        </member>
        <member name="T:ILGPU.IR.IMethodCollection">
            <summary>
            Represents an abstract function view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IMethodCollection`1">
            <summary>
            Represents an abstract function view using a predicate.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.IMethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollections">
            <summary>
            Represents useful extensions for function views.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.AllMethods">
            <summary>
            Represents a function predicate that matches all functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.AllMethods.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.NotTransformed">
            <summary>
            Represents a function predicate that matches all functions that have not been transformed yet.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.NotTransformed.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.Dirty">
            <summary>
            Represents a function predicate that matches all dirty functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.Dirty.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.UnsafeMethodCollection`1">
            <summary>
            Represents an unsafe function view.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.UnsafeMethodCollection`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.#ctor(ILGPU.IR.MethodMapping{ILGPU.IR.Method}.ReadOnlyCollection,`0)">
            <summary>
            Constructs a new internal enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
            <param name="currentPredicate">The view predicate.</param>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Collection">
            <summary>
            Returns the associated function collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#Generic#IReadOnlyCollection{ILGPU#IR#Method}#Count">
            <summary cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#Generic#IEnumerable{ILGPU#IR#Method}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.UnsafeMethodCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollection`1">
            <summary>
            Represents a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.MethodCollection`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Method})">
            <summary>
            Constructs a new internal enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Collection">
            <summary>
            Returns the associated function collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.Predicate">
            <summary>
            Returns the associated predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.TotalNumMethods">
            <summary>
            Returns the total number of functions without applying the predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection`1.System#Collections#Generic#IReadOnlyCollection{ILGPU#IR#Method}#Count">
            <summary cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.System#Collections#Generic#IEnumerable{ILGPU#IR#Method}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.MethodHandle">
            <summary>
            Represents a method handle to an <see cref="T:ILGPU.IR.Method"/>
            that is valid accross transformations.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodHandle.Empty">
            <summary>
            An empty method handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Deserialize(System.String)">
            <summary>
            Reconstructs a method handle from a serialization string.
            </summary>
            <param name="serializationString">The handle serialization string.</param>
            <returns>The deserialized method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Create(System.String)">
            <summary>
            Creates an empty named method handle.
            </summary>
            <param name="name">The name of the method reference.</param>
            <returns>The created method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.#ctor(System.Int64,System.String)">
            <summary>
            Constructs a new method handle.
            </summary>
            <param name="id">The unique id of the refernce.</param>
            <param name="name">The name of the method reference.</param>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Id">
            <summary>
            Returns the unique id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.IsEmpty">
            <summary>
            Returns true if this handle is empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Name">
            <summary>
            Returns the name of the referenced method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Serialize">
            <summary>
            Returns a serialization string.
            </summary>
            <returns>The created serialization string.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(ILGPU.IR.MethodHandle)">
            <summary>
            Returns true iff the given handle is equal to this handle.
            </summary>
            <param name="other">The other handle.</param>
            <returns>True, iff the given handle is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this handle.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.GetHashCode">
            <summary>
            Returns the hash code of this handle.
            </summary>
            <returns>The hash code of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.ToString">
            <summary>
            Returns the string representation of this handle.
            </summary>
            <returns>The string representation of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Equality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true iff the first and the second handle are the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>True, iff the first and the second handle are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Inequality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true iff the first and the second handle are not the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>True, iff the first and the second handle are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.MethodDeclaration">
            <summary>
            Represents a method declaration of a <see cref="T:ILGPU.IR.Method"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.IsExternal">
            <summary>
            Returns true if this method is an external method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasHandle">
            <summary>
            Returns true if the associated handle is not empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Handle">
            <summary>
            Returns the associated handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.ReturnType">
            <summary>
            Returns the return type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Source">
            <summary>
            Returns the managed source method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.MethodHandle)">
            <summary>
            Specializes the current method declaration by specializing
            an empty method handle.
            </summary>
            <param name="handle">The handle to specialize.</param>
            <returns>The specialized method declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.Types.TypeNode)">
            <summary>
            Specializes the current method declaration by specializing
            the return type.
            </summary>
            <param name="returnType">The return type to specialize.</param>
            <returns>The specialized methomethod declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this declaration has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this declaration has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this declaration.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this declaration.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true iff the given declaration is equal to this declaration.
            </summary>
            <param name="other">The other declaration.</param>
            <returns>True, iff the given declaration is equal to this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this declaration.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.GetHashCode">
            <summary>
            Returns the hash code of this declaration.
            </summary>
            <returns>The hash code of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.ToString">
            <summary>
            Returns the string representation of this declaration.
            </summary>
            <returns>The string representation of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Equality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true iff the first and the second declaration are the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>True, iff the first and the second declaration are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Inequality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true iff the first and the second declaration are not the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>True, iff the first and the second declaration are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.IMethodMappingObject">
            <summary>
            Represents an object that can be managed in the scope of a <see cref="T:ILGPU.IR.MethodMapping`1"/>
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1">
            <summary>
            Maps function handles and managed .Net methods to <see cref="T:ILGPU.IR.Method"/>
            objects.
            </summary>
            <typeparam name="T">The mapped type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="dataList">The data list.</param>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.ReadOnlyCollection">
            <summary>
            Represents a readonly view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetFunction(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.AsReadOnly">
            <summary>
            Constructs a readonly object view.
            </summary>
            <returns>The created readonly object view.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetHandle(System.Reflection.MethodBase,ILGPU.IR.MethodHandle@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetData(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, iff the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Register(ILGPU.IR.MethodHandle,`0)">
            <summary>
            Registers the handle with the given data object.
            </summary>
            <param name="handle">The function handle.</param>
            <param name="data">The data object to register.</param>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToArray">
            <summary>
            Converts this mapping object into an array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToImmutableArray">
            <summary>
            Converts this mapping object into an immutable array.
            </summary>
            <returns>The immutable array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Clear">
            <summary>
            Clears all contained functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="T:ILGPU.IR.INode">
            <summary>
            The base interface of all nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.SequencePoint">
            <summary>
            Returns the associated sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.IR.INode.Mark(ILGPU.IR.NodeMarker)">
            <summary>
            Marks the current node with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, iff the old marker was not equal to the new marker
            (the node was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.INode.IsMarked(ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the reference marker is less or equal to the
            current marker value.
            </summary>
            <param name="referenceMarker">The reference marker.</param>
            <returns>
            True, iff the reference marker is less or equal to
            the current marker value.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Node">
            <summary>
            Represents a basic intermediate-representation node.
            It is the base class for all nodes in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Node.Comparison">
            <summary>
            Compares two nodes according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.#ctor">
            <summary>
            Constructs a new node that is marked as replacable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Node.SequencePoint">
            <summary>
            Returns the associated sequence point.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Node.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.Mark(ILGPU.IR.NodeMarker)">
            <summary>
            Marks the current node with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, iff the old marker was not equal to the new marker
            (the node was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.Node.IsMarked(ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the reference marker is equal to the
            current marker value.
            </summary>
            <param name="referenceMarker">The reference marker.</param>
            <returns>
            True, iff the current marker is equal to the current
            marker value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToPrefixString">
            <summary>
            Returns the prefix string (operation name) of this node.
            </summary>
            <returns>The prefix string.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToReferenceString">
            <summary>
            Returns the string representation of this node as reference.
            </summary>
            <returns>The string representation of this node as reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToString">
            <summary>
            Returns the string represetation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.NodeId">
            <summary>
            Represents a node id.
            </summary>
        </member>
        <member name="F:ILGPU.IR.NodeId.Empty">
            <summary>
            Represents the empty node id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.#ctor(System.Int64)">
            <summary>
            Constructs a new node id.
            </summary>
            <param name="id">The raw id.</param>
        </member>
        <member name="P:ILGPU.IR.NodeId.Value">
            <summary>
            Returns the encapsulated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the given id is equal to this id.
            </summary>
            <param name="other">The other id.</param>
            <returns>True, iff the given id is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.CompareTo(ILGPU.IR.NodeId)">
            <summary>
            Compares this id to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.ToString">
            <summary>
            Returns the string representation of this id.
            </summary>
            <returns>The string representation of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Implicit(ILGPU.IR.NodeId)~System.Int64">
            <summary>
            Converts the given node id into its underlying long value.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Equality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first and the second id are the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first and the second id are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Inequality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first and the second id are not the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first and the second id are not the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first id is smaller than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first id is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first id is smaller than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first id is smaller than or equal to the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first id is greater than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first id is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true iff the first id is greater than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, iff the first id is greater than or equal to the second one.</returns>
        </member>
        <member name="T:ILGPU.IR.NodeMarker">
            <summary>
            Represents a node marker.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.#ctor(System.Int64)">
            <summary>
            Constructs a new node marker.
            </summary>
            <param name="marker">The raw marker.</param>
        </member>
        <member name="P:ILGPU.IR.NodeMarker.Marker">
            <summary>
            Returns the encapsulated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.Equals(ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the given marker is equal to this marker.
            </summary>
            <param name="other">The other marker.</param>
            <returns>True, iff the given marker is equal to this marker.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this marker.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this marker.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.GetHashCode">
            <summary>
            Returns the hash code of this marker.
            </summary>
            <returns>The hash code of this marker.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.ToString">
            <summary>
            Returns the string representation of this marker.
            </summary>
            <returns>The string representation of this marker.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.op_Equality(ILGPU.IR.NodeMarker,ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the first and the second marker are the same.
            </summary>
            <param name="first">The first marker.</param>
            <param name="second">The second marker.</param>
            <returns>True, iff the first and the second marker are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeMarker.op_Inequality(ILGPU.IR.NodeMarker,ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the first and the second marker are not the same.
            </summary>
            <param name="first">The first marker.</param>
            <param name="second">The second marker.</param>
            <returns>True, iff the first and the second marker are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IAcceleratorSpecializerConfiguration">
            <summary>
            The basic configuration interface for all intrinsic specializers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IAcceleratorSpecializerConfiguration.WarpSize">
            <summary>
            Returns the current warp size (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IAcceleratorSpecializerConfiguration.TryGetSizeOf(ILGPU.IR.Types.TypeNode,System.Int32@)">
            <summary>
            Tries to resolve the native size in bytes of the given type.
            </summary>
            <param name="type">The type.</param>
            <param name="size">The native size in bytes.</param>
            <returns>True, if the size could be resolved.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.AcceleratorSpecializer`1">
            <summary>
            Represents a device specializer that instantiates device-specific constants
            and updates device-specific functionality.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
            <typeparam name="TConfiguration">The actual configuration type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer`1.#ctor(`0@)">
            <summary>
            Constructs a new device specializer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer`1.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer`1.SpecializeConstant(ILGPU.IR.Method.Builder,ILGPU.IR.Value,System.Int32,System.Boolean@)">
            <summary>
            Specializes a single constant value.
            </summary>
            <param name="builder">The parent method builder.</param>
            <param name="value">The method to specialize.</param>
            <param name="constant">The constant integer value.</param>
            <param name="applied">The applied value.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.DeadCodeElimination">
            <summary>
            Represents a DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.#ctor">
            <summary>
            Constructs a new DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.FindLiveValues(ILGPU.IR.Analyses.Scope)">
            <summary>
            Detects all live values in the given scope.
            </summary>
            <param name="scope">The current scope.</param>
            <returns>The resolved set of live values.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion">
            <summary>
            Converts simple ifs to predicates.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxBlockSize">
            <summary>
            The default maximum number of instructions per block.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxSizeDifference">
            <summary>
            The default The maximum size difference of the if and the else block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor">
            <summary>
            Constructs a new if-conversion transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new if-conversion transformation.
            </summary>
            <param name="maxBlockSize">The maximum number of instructions per block.</param>
            <param name="maxSizeDifference">The maximum size difference of the if and the else block.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxBlockSize">
            <summary>
            Resolves the maximum number of instructions per block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxSizeDifference">
            <summary>
            Resolves the maximum size difference of the if and the else block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces">
            <summary>
            Infers address spaces by removing unnecessary address-space casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.#ctor">
            <summary>
            Constructs a new address-space inference pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.IsRedundant(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Returns true iff the given cast is redundant.
            </summary>
            <param name="cast">The cast to check.</param>
            <returns>True, iff the given cast is redundant.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.Inliner">
            <summary>
            Represents a function inliner.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Inliner.MaxNumILInstructionsToInline">
            <summary>
            The maximum number of IL instructions to inline.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.#ctor">
            <summary>
            Constructs a new inliner that inlines all methods marked with
            <see cref="F:ILGPU.IR.MethodFlags.Inline"/> flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.PerformTransformation``1(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry,``0)">
            <summary cref="M:ILGPU.IR.Transformations.OrderedTransformation.PerformTransformation``1(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry,``0)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.InlineCalls``1(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape{System.Object}.Entry,``0,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to inline method calls.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="caller">The parent caller entry.</param>
            <param name="scopeProvider">The scope provider.</param>
            <param name="currentBlock">The current block (may be modified).</param>
            <returns>True, in case of an inlined call.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicResolver`1">
            <summary>
            Resolved required intrinic IR implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0})">
            <summary>
            Constructs a new intrinsic resolver.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.CreateIntermediate">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.CreateIntermediate"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.FinishProcessing(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.FinishProcessing(`0)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.PerformTransformation(ILGPU.IR.Method.Builder,`0)"/>
        </member>
        <member name="T:ILGPU.IR.Transformations.IIntrinsicSpecializerConfiguration">
            <summary>
            The basic configuration interface for all intrinsic specializers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IIntrinsicSpecializerConfiguration.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicSpecializer`2">
            <summary>
            Represents an intrinsic implementation specializer.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
            <typeparam name="TConfiguration">The actual configuration type.</typeparam>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.#ctor(`0@,ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`1})">
            <summary>
            Constructs a new intrinsic specializer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.CreateIntermediate">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.CreateIntermediate"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.FinishProcessing(ILGPU.IR.Analyses.CachedScopeProvider)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.FinishProcessing(`0)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.CachedScopeProvider)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation`1.PerformTransformation(ILGPU.IR.Method.Builder,`0)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.FindDependencies(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Scope,System.Boolean@)">
            <summary>
            Analyzes the given scope while importing the required dependencies.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="scope">The current scope.</param>
            <param name="applied">True, if the transformation transformed something.</param>
            <returns>The imported dependency functions.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`2.ImportDependencies``1(ILGPU.IR.IRContext,System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Method}},``0)">
            <summary>
            Imports all detected dependencies into the current context.
            </summary>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="targetContext">The target context.</param>
            <param name="dependencies">The dependencies to import.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerArrays">
            <summary>
            Lowers array values using memory operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#ctor">
            <summary>
            Constructs a new array lowering transformation
            that does not lower arrays with static indices.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#ctor(System.Boolean)">
            <summary>
            Constructs a new array lowering transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerArrays.LowerStaticIndices">
            <summary>
            Returns true if arrays with static indices should be lowered.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.FindConvertibleArrays(ILGPU.IR.Analyses.Scope)">
            <summary>
            Finds all convertible array nodes.
            </summary>
            <param name="scope">The scope in which to search for arrays.</param>
            <returns>All detected convertible array nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.RequiresDynamicIndexing(ILGPU.IR.Value,System.Collections.Generic.HashSet{ILGPU.IR.Values.ArrayOperationValue})">
            <summary>
            Returns true if the given node requires a dynamic indexing feature
            which requires memory addressed instead of registers.
            </summary>
            <param name="node">The current node.</param>
            <param name="operations">The set of associated operations that need to be transformed.</param>
            <returns>
            True, if the given node required dynamic indexing.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics">
            <summary>
            Lowers internal high-level thread intrinsics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.IValueLowering`1">
            <summary>
            Represents an abstract value lowering.
            </summary>
            <typeparam name="T">The user-defined lowering arguments.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.IValueLowering`1.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,`0)">
            <summary>
            Creates a new lowered node instance.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="value">The current value.</param>
            <param name="arguments">The user-defined arguments.</param>
            <returns>The created value.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering">
            <summary>
            Represents a specific <see cref="T:ILGPU.IR.Values.Broadcast"/> lowering.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Values.BroadcastKind})">
            <summary cref="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.IValueLowering`1.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,`0)"/>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering">
            <summary>
            Represents a specific <see cref="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering"/> lowering.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind})">
            <summary cref="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.IValueLowering`1.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,`0)"/>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering">
            <summary>
            Represents a specific <see cref="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering"/> lowering.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind})">
            <summary cref="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.IValueLowering`1.Create(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,`0)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.IsBuiltinType(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given value type is supported as built-in thread intrinsic.
            </summary>
            <param name="basicValueType">The basic value type to check.</param>
            <returns>True, if the given type is a supported built-in type..</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.LowerIntrinsic``2(ILGPU.IR.Method.Builder,ILGPU.IR.Value,ILGPU.IR.Value,``0)">
            <summary>
            Lowers the given value using the specified value lowering.
            </summary>
            <typeparam name="T">The user-defined argument type.</typeparam>
            <typeparam name="TLowering">The lowering module.</typeparam>
            <param name="methodBuilder">The current method builder.</param>
            <param name="value">The source value.</param>
            <param name="variable">The variable to lower.</param>
            <param name="arguments">The user-defined arguments.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.LowerValue``2(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Value,``0)">
            <summary>
            Recursively lowers the given value using the specified value lowering.
            </summary>
            <typeparam name="T">The user-defined argument type.</typeparam>
            <typeparam name="TLowering">The lowering module.</typeparam>
            <param name="builder">The current block builder.</param>
            <param name="sourceValue">The value to lower.</param>
            <param name="arguments">The user-defined arguments.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.OptimizationLevel">
            <summary>
            Represetns an optimization level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.Debug">
            <summary>
            Lightweight (required) transformations only.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.OptimizationLevel.Release">
            <summary>
            All transformation passes with seveal optimization
            iterations.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Optimizer">
            <summary>
            Realizes utility helpers to perform and initialize transformations
            based on an <see cref="T:ILGPU.IR.Transformations.OptimizationLevel"/>.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Optimizer.NumOptimizationLevels">
            <summary>
            Returns the number of known optimization levels.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags,ILGPU.IR.Transformations.OptimizationLevel)">
            <summary>
            Populates the given transformation manager with the required
            optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
            <param name="level">The desired optimization level.</param>
            <returns>The maximum number of iterations.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddDebugOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Populates the given transformation manager with the required
            debug optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddReleaseOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.ContextFlags)">
            <summary>
            Populates the given transformation manager with the required
            release optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="contextFlags">The context flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.CreateTransformer(ILGPU.IR.Transformations.OptimizationLevel,ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.ContextFlags)">
            <summary>
            Creates a transformer for the given optimization level.
            </summary>
            <param name="level">The level.</param>
            <param name="configuration">The transformer configuration.</param>
            <param name="contextFlags">The context flags.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SimplifyControlFlow">
            <summary>
            Merges multiple sequential branches (a call/branch chain) into a single block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.#ctor">
            <summary>
            Constructs a new transformation to merge sequential jump chains.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.MergeChain(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.CFG.Node,System.Collections.Generic.HashSet{ILGPU.IR.Analyses.CFG.Node})">
            <summary>
            Tries to merge a sequence of jumps.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="rootNode">The block where to start merging.</param>
            <param name="mergedNodes">The collection of merged nodes.</param>
            <returns>True, if something could be merged.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstruction">
            <summary>
            Performs ah SSA construction transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#ctor">
            <summary>
            Constructs a new SSA construction pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.FindConvertibleAllocas(ILGPU.IR.Analyses.Scope)">
            <summary>
            Finds all SSA-convertible alloca nodes.
            </summary>
            <param name="scope">The scope in which to search for allocas.</param>
            <returns>A set containing all detected alloca nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.RequiresAddress(ILGPU.IR.Value)">
            <summary>
            Returns false iff the given node cannot be transformed
            into a SSA variable.
            </summary>
            <param name="node">The current node.</param>
            <returns>
            False, iff the given node cannot be transformed into a SSA variable.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation">
            <summary>
            Represents a generic transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation.ITransformExecutor">
            <summary>
            Represents an abstract transform execution driver closure.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Executes the current transformation.
            </summary>
            <param name="builder">The current method builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary>
            Transforms all method in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ExecuteTransform``1(ILGPU.IR.Method.Builder,``0@)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="executor">The desired transform executor.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>Note that this transformation is applied in parallel to all methods.</remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.Transform``1(ILGPU.IR.MethodCollection{``0})"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <typeparam name="TIntermediate">The type of the intermediate values.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation{`0},`0)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Intermediate">
            <summary>
            Returns the associated intermediate value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.CreateIntermediate">
            <summary>
            Creates a new intermediate value.
            </summary>
            <returns>The resulting intermediate value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.FinishProcessing(`0)">
            <summary>
            Is invoked after all methods have been transformed.
            </summary>
            <param name="intermediate">The current intermediate value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.Transform``1(ILGPU.IR.MethodCollection{``0})"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.PerformTransformation(ILGPU.IR.Method.Builder,`0)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation">
            <summary>
            Represents a generic transformation that will be applied in the post order
            of the induced call graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation.Executor">
            <summary>
            Represents an ordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.OrderedTransformation,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry,ILGPU.IR.Analyses.CachedScopeProvider)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="landscape">The current landscape.</param>
            <param name="entry">The current landscape entry.</param>
            <param name="cachedScopeProvider">The cached scope provider.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Landscape">
            <summary>
            Returns the current landscape.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.Entry">
            <summary>
            Returns the current entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation.Executor.CachedScopeProvider">
            <summary>
            Returns the scope provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.Transform``1(ILGPU.IR.MethodCollection{``0})">
            <summary cref="M:ILGPU.IR.Transformations.Transformation.Transform``1(ILGPU.IR.MethodCollection{``0})"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.PerformTransformation``1(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry,``0)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <typeparam name="TScopeProvider">The provider to resolve methods to scopes.</typeparam>
            <param name="builder">The current method builder.</param>
            <param name="landscape">The global processing landscape.</param>
            <param name="current">The current landscape entry.</param>
            <param name="scopeProvider">Resolves methods to scopes.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.ITransformerHandler">
            <summary>
            Represents a transformer callback.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.ITransformerHandler.BeforeTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Will be invoked before a transformation is applied.
            </summary>
            <param name="context">The current context.</param>
            <param name="transformation">The transformation to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.ITransformerHandler.AfterTransformation(ILGPU.IR.IRContext,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Will be invoked after a transformation has been applied.
            </summary>
            <param name="context">The current context.</param>
            <param name="transformation">The applied transformation.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.TransformerConfiguration">
            <summary>
            Represents a transformer configuration.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Empty">
            <summary>
            Represents an empty configuration that works on all functions without
            adding additional flags to them.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Transformed">
            <summary>
            Represents a default configuration that works on all non-transformed functions
            and marks them as transformed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags,System.Boolean)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="flags">The transformation flags.</param>
            <param name="finalGC">True, if a final GC run is required.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags,ILGPU.IR.MethodTransformationFlags,System.Boolean)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="requiredFlags">The transformation flags that should not be set.</param>
            <param name="flags">The transformation flags that will be set.</param>
            <param name="finalGC">True, if a final GC run is required.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.FinalGC">
            <summary>
            Returns true if a final GC run is required.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.RequiredFlags">
            <summary>
            Returns the transformation flags that will be checked
            on the functions to transform.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.TransformationFlags">
            <summary>
            Returns the transformation flags that will be stored on
            on the transformed functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.AddsFlags">
            <summary>
            Returns true if the current configuration manipulates transformation flags.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer">
            <summary>
            Applies transformations to contexts.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer.Builder">
            <summary>
            A transformer builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation}.Builder)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="targetBuilder">The target builder.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Builder.Configuration">
            <summary>
            Returns the current transformer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.Add(ILGPU.IR.Transformations.Transformation)">
            <summary>
            Adds the given transformation to the manager.
            </summary>
            <param name="transformation">The transformation to add.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.ToTransformer">
            <summary>
            Converts this builder to an immutable array.
            </summary>
            <returns>The immutable transformation array.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer.MethodPredicate">
            <summary>
            Represents a function predicate for functions to transform.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.MethodPredicate.#ctor(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Constructs a new function predicate.
            </summary>
            <param name="flags">The desired flags that should not be set.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.MethodPredicate.Flags">
            <summary>
            Returns the flags that should not be set on the target function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.MethodPredicate.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="F:ILGPU.IR.Transformations.Transformer.Empty">
            <summary>
            Represents an empty transformer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.CreateBuilder(ILGPU.IR.Transformations.TransformerConfiguration)">
            <summary>
            Creates a new transformer builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <returns>A new builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The specification to use.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation,ILGPU.IR.Transformations.Transformation[])">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The first transformation.</param>
            <param name="transformations">The other transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transforms">The transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Constructs a new transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transformations">The transformations.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Configuration">
            <summary>
            Returns the associated configuration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Transformations">
            <summary>
            Returns the stored transformations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Length">
            <summary>
            Returns the number of stored transformations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Transform``1(ILGPU.IR.IRContext,``0)">
            <summary>
            Applies all transformations to the given context.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <param name="context">The target IR context.</param>
            <param name="handler">The target handler.</param>
        </member>
        <member name="T:ILGPU.IR.Types.ArrayType">
            <summary>
            Represents an array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.#ctor(ILGPU.IR.Types.TypeNode,System.Int32,System.Type)">
            <summary>
            Constructs a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="length">The number of elements.</param>
            <param name="source">The original source type (or null).</param>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.ElementType">
            <summary>
            Returns the element type of the array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.Length">
            <summary>
            Returns the array length.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.HandleType">
            <summary>
            Represents a .Net runtime-specific handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.#ctor">
            <summary>
            Constructs a new .Net runtime-specific handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.IIRTypeContext">
            <summary>
            Represents an abstract type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.IndexType">
            <summary>
            Returns the main index type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateGenericViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.StructureType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new generic view type that relies on an n-dimension index.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="indexType">The index type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="length">The array length.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateArrayImplementationType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new structure type that implements array functionality.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created implementation structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode})">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The structure field types.</param>
            <param name="fieldNames">The structure field names.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateStructureType(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="fieldTypes">The structure field types.</param>
            <param name="sourceType">The source structure type.</param>
            <returns>The created structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialzized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, iff the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.IRTypeContext">
            <summary>
            Represents a context that manages IR types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.BasicValueTypes">
            <summary>
            Contains all basic value types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.ViewIndexType">
            <summary>
            Represents the index type of a view.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.GenericArrayViewType">
            <summary>
            Represents a generic array view type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR type context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.HandleType">
            <summary>
            Returns the managed handle type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.IndexType">
            <summary>
            Returns the main index type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetIndexType(System.Int32)">
            <summary>
            Creates an intrinsic index type.
            </summary>
            <param name="dimension">The dimension of the index type.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode})">
            <summary>
            Creates a new object type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The object field types.</param>
            <returns>The created object type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateStructureType(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Creates a new object type.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="fieldTypes">The object field types.</param>
            <param name="fieldNames">The object field names.</param>
            <param name="sourceType">The source object type.</param>
            <returns>The created object type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateStructureType(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new objact type.
            </summary>
            <param name="fieldTypes">The objact field types.</param>
            <param name="sourceType">The source objact type.</param>
            <returns>The created objact type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateGenericViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.StructureType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new generic view type that relies on an n-dimension index.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="indexType">The index type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="length">The array length.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateArrayImplementationType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new structure type that implements array functionality.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimension">The array dimension.</param>
            <returns>The created implementation structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <seeVoidType cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialzized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, iff the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType``1(``0)">
            <summary>
            Creates a type.
            </summary>
            <typeparam name="T">The type of the  type.</typeparam>
            <param name="type">The type to create.</param>
            <returns>The created type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ITypeNodeVisitor">
            <summary>
            A generic interface to visit type nodes in the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.VoidType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StringType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.PointerType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ViewType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.ArrayType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.StructureType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNodeVisitor.Visit(ILGPU.IR.Types.HandleType)">
            <summary>
            Visits the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:ILGPU.IR.Types.ObjectType">
            <summary>
            Represents an abstract object value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ObjectType.#ctor(System.Type)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="source">The original source type (or null).</param>
        </member>
        <member name="P:ILGPU.IR.Types.ObjectType.Source">
            <summary>
            Returns the original source type (may be null).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ObjectType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="T:ILGPU.IR.Types.AddressSpaceType">
            <summary>
            Represents an abstract type that relies on addresses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.#ctor(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.PointerType">
            <summary>
            Represents the type of a generic pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.#ctor(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new pointer type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ViewType">
            <summary>
            Represents the type of a generic view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.#ctor(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new view type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.PrimitiveType">
            <summary>
            Represents a primitive type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.#ctor(ILGPU.BasicValueType)">
            <summary>
            Constructs a new primitive type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.IsBool">
            <summary>
            Returns true if this type represents a bool type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StringType">
            <summary>
            Represents a string type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.#ctor">
            <summary>
            Constructs a new string type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType">
            <summary>
            Represents a structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.FieldRef">
            <summary>
            A reference to a scalar structure field.
            These values can be used during CPS construction to reference
            all scalar fields within the scope of a structure value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.FieldRef.hashCode">
            <summary>
            The cached hash code.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.#ctor(ILGPU.IR.Value,System.Collections.Immutable.ImmutableArray{System.Int32})">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
            <param name="accessChain">The indices of this reference.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.FieldRef.IsValid">
            <summary>
            Returns true iff this field reference points to a valid field.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.FieldRef.Source">
            <summary>
            Returns the source node (the main structure value).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.FieldRef.Item(System.Int32)">
            <summary>
            Returns the access chain element for the given index.
            </summary>
            <param name="index">The access chain index.</param>
            <returns>The resolved chain element.</returns>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.FieldRef.ChainLength">
            <summary>
            Returns the number of chain elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.FieldRef.AccessChain">
            <summary>
            Returns the list of index elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.Access(System.Int32)">
            <summary>
            Realizes an additional access operation to the
            given field index.
            </summary>
            <param name="fieldIndex">The next field index.</param>
            <returns>The extended field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.Equals(ILGPU.IR.Types.StructureType.FieldRef)">
            <summary>
            Returns true iff the given field ref is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>True, iff the given field ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given field ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.GetHashCode">
            <summary>
            Returns the hash code of this field reference.
            </summary>
            <returns>The hash code of this field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.ToString">
            <summary>
            Returns the string representation of this field reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.op_Equality(ILGPU.IR.Types.StructureType.FieldRef,ILGPU.IR.Types.StructureType.FieldRef)">
            <summary>
            Returns true iff the first and second field ref are the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, iff the first and second field ref are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.FieldRef.op_Inequality(ILGPU.IR.Types.StructureType.FieldRef,ILGPU.IR.Types.StructureType.FieldRef)">
            <summary>
            Returns true iff the first and second field ref are not the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, iff the first and second field ref are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.IBasicFieldAction">
            <summary>
            Represents an action that is applied to every scalar field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.IBasicFieldAction.Apply(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Applies this action to the given scalar field.
            </summary>
            <param name="fieldType">The current field type.</param>
            <param name="absoluteFieldIndex">
            The absolute field index in the scope of the main parent structure.
            </param>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.IFieldAction`1">
            <summary>
            Represents an action that is applied to every scalar field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.IFieldAction`1.GetFieldValue(`0,ILGPU.IR.Types.StructureType,System.Int32)">
            <summary>
            Resolves an internal field value for further processing.
            This method allows to encapsulate a temporary processing
            state for further operations.
            </summary>
            <param name="parentValue">The parent value.</param>
            <param name="structureType">The current structure type.</param>
            <param name="fieldIndex">The current field index (within the type info object).</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.IFieldAction`1.Apply(`0,ILGPU.IR.Types.StructureType,System.Int32)">
            <summary>
            Applies this action to the given scalar field.
            </summary>
            <param name="fieldValue">The current field value that was resolved using the
            <see cref="M:ILGPU.IR.Types.StructureType.IFieldAction`1.GetFieldValue(`0,ILGPU.IR.Types.StructureType,System.Int32)"/> method.</param>
            <param name="structureType">The current structure type.</param>
            <param name="fieldIndex">The current field index (within the type info object).</param>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.IFieldRefAction`1">
            <summary>
            Represents an action that traverses the main structure and constructs
            field references and applies the action to every scalar field.
            </summary>
            <typeparam name="T">The temporary value.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.IFieldRefAction`1.GetFieldValue(ILGPU.IR.Types.StructureType.FieldRef@,`0,ILGPU.IR.Types.StructureType,System.Int32)">
            <summary>
            Resolves an internal field value for further processing.
            This method allows to encapsulate a temporary processing
            state for further operations.
            </summary>
            <param name="fieldRef">The reference to the current field.</param>
            <param name="parentValue">The parent value.</param>
            <param name="structureType">The current structure type.</param>
            <param name="fieldIndex">The current field index (within the type info object).</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.IFieldRefAction`1.Apply(ILGPU.IR.Types.StructureType.FieldRef@,`0,ILGPU.IR.Types.StructureType,System.Int32)">
            <summary>
            Applies this action to the given scalar field.
            </summary>
            <param name="fieldRef">The reference to the current field.</param>
            <param name="fieldValue">The current field value that was resolved using the
            <see cref="M:ILGPU.IR.Types.StructureType.IFieldRefAction`1.GetFieldValue(ILGPU.IR.Types.StructureType.FieldRef@,`0,ILGPU.IR.Types.StructureType,System.Int32)"/> method.</param>
            <param name="structureType">The current structure type.</param>
            <param name="fieldIndex">The current field index (within the type info object).</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.NumFieldAction.Apply(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary cref="M:ILGPU.IR.Types.StructureType.IBasicFieldAction.Apply(ILGPU.IR.Types.TypeNode,System.Int32)"/>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Root">
            <summary>
            Represents the base object class of all objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ForEachField``1(ILGPU.IR.Types.StructureType,``0@)">
            <summary>
            Performs the given <see cref="T:ILGPU.IR.Types.StructureType.IBasicFieldAction"/>
            by recursively applying the action to all (nested) structure fields.
            </summary>
            <typeparam name="TAction">The action type.</typeparam>
            <param name="structureType">The current type information.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ForEachField``2(ILGPU.IR.Types.StructureType,``1,``0@)">
            <summary>
            Performs the given <see cref="T:ILGPU.IR.Types.StructureType.IFieldAction`1"/>
            by recursively applying the action to all (nested) structure fields.
            </summary>
            <typeparam name="TAction">The action type.</typeparam>
            <typeparam name="T">The custom intermediate value type.</typeparam>
            <param name="structureType">The current type information.</param>
            <param name="value">The custom value to pass to the action.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ForEachField``2(ILGPU.IR.Types.StructureType,ILGPU.IR.Types.StructureType.FieldRef@,``1,``0@)">
            <summary>
            Performs the given <see cref="T:ILGPU.IR.Types.StructureType.IFieldRefAction`1"/>
            by recursively applying the action to all (nested) structure fields.
            </summary>
            <typeparam name="TAction">The action type.</typeparam>
            <typeparam name="T">The custom intermediate value type.</typeparam>
            <param name="currentRef">The current field reference to the root element.</param>
            <param name="structureType">The current type information.</param>
            <param name="value">The custom value to pass to the action.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.hashCode">
            <summary>
            Caches the internal hash code of all child nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="fieldTypes">The field types.</param>
            <param name="fieldNames">The field names.</param>
            <param name="source">The original source type (or null).</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.#ctor(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode},System.Collections.Immutable.ImmutableArray{System.String},System.Type)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="baseType">The underlying base class.</param>
            <param name="fieldTypes">The field types.</param>
            <param name="fieldNames">The field names.</param>
            <param name="source">The original source type (or null).</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.IsObject">
            <summary>
            Returns true if this is the base object class.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.BaseType">
            <summary>
            Returns the underlying parent base class.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Fields">
            <summary>
            Returns the associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.NumFields">
            <summary>
            Returns the number of associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Names">
            <summary>
            Returns the associated name information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetName(System.Int32)">
            <summary>
            Returns the name of the specified child.
            </summary>
            <param name="childIndex">The child index.</param>
            <returns>The name of the specified child.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ResolveNumScalarFields">
            <summary>
            Resolves the number of scalar fields.
            </summary>
            <returns>The number of scalar fields.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ForEachField``2(``1,``0@)">
            <summary>
            Performs the given <see cref="T:ILGPU.IR.Types.StructureType.IFieldAction`1"/>
            by recursively applying the action to all (nested) structure fields.
            </summary>
            <typeparam name="TAction">The action type.</typeparam>
            <typeparam name="T">The custom intermediate value type.</typeparam>
            <param name="value">The custom value to pass to the action.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ForEachField``2(ILGPU.IR.Types.StructureType.FieldRef@,``1,``0@)">
            <summary>
            Performs the given <see cref="T:ILGPU.IR.Types.StructureType.IFieldRefAction`1"/>
            by recursively applying the action to all (nested) structure fields.
            </summary>
            <typeparam name="TAction">The action type.</typeparam>
            <typeparam name="T">The custom intermediate value type.</typeparam>
            <param name="currentRef">The current field reference to the root element.</param>
            <param name="value">The custom value to pass to the action.</param>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager">
            <summary>
            Represents a context that manages type information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager.TypeInformation">
            <summary>
            Represents a type information about a managed type.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.#ctor(ILGPU.IR.Types.TypeInformationManager,System.Type,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},System.Collections.Immutable.ImmutableArray{System.Type},System.Collections.Immutable.ImmutableDictionary{System.Reflection.FieldInfo,System.Int32},System.Boolean)">
            <summary>
            Constructs a new type information.
            </summary>
            <param name="parent">The parent type manager.</param>
            <param name="type">The .Net type.</param>
            <param name="fields">All managed fields.</param>
            <param name="fieldTypes">All managed field types.</param>
            <param name="fieldIndices">Maps fields to their indices.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Parent">
            <summary>
            Returns the parent information manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ManagedType">
            <summary>
            Returns the .Net type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.NumFields">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Item(System.Reflection.FieldInfo)">
            <summary>
            Resolves the index of the given field.
            </summary>
            <param name="field">The field.</param>
            <returns>The field index.</returns>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Fields">
            <summary>
            Returns all fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldTypes">
            <summary>
            Returns all field types.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldIndices">
            <summary>
            Maps field information to field indices.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.IsBlittable">
            <summary>
            Returns true if the associated .Net type is blittable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.GetFieldTypeInfo(System.Int32)">
            <summary>
            Gets nested field type information.
            </summary>
            <param name="index">The field index.</param>
            <returns>The resulting type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.TryResolveField(System.Int32,System.Reflection.FieldInfo@)">
            <summary>
            Tries to resolve the field of the given field.
            </summary>
            <param name="index">The target index.</param>
            <param name="field">The resolved field.</param>
            <returns>True, if the field could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.TryResolveIndex(System.Reflection.FieldInfo,System.Int32@)">
            <summary>
            Tries to resolve an index of the given field.
            </summary>
            <param name="info">The field.</param>
            <param name="index">The target index.</param>
            <returns>True, if the field could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ToString">
            <summary>
            Returns the string representation of this type.
            </summary>
            <returns>The string representation of this type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.#ctor">
            <summary>
            Constructs a new type context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.InitIntrinsicTypeInformation">
            <summary>
            Initializes intrinsic type information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfo(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfoInternal(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.AddTypeInfo(System.Type,System.Boolean)">
            <summary>
            Adds primitive type information.
            </summary>
            <param name="type">The type to add.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
            <returns>The created type information instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateTypeInfo(System.Type)">
            <summary>
            Creates new type information and registers the created object
            in the internal cache.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateCompoundTypeInfo(System.Type)">
            <summary>
            Creates new type information for compound types.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.TypeNode">
            <summary>
            Represents a type in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.#ctor">
            <summary>
            Constructs a new type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsVoidType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.VoidType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStringType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StringType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPrimitiveType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PrimitiveType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewOrPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PointerType"/>
            or a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PointerType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsObjectType">
            <summary>
            Returns true if the current type is an <see cref="T:ILGPU.IR.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStructureType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StructureType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsArrayType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ArrayType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.BasicValueType">
            <summary>
            Returns the basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)">
            <summary>
            Accepts a type node visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)">
            <summary>
            Tries to resolve the managed type that represents this IR type.
            </summary>
            <param name="type">The resolved managed type that represents this IR type.</param>
            <returns>True, if the managed type could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.GetHashCode">
            <summary>
            Returns the hash code of this type node.
            </summary>
            <returns>The hash code of this type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current type.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.ToString">
            <summary>
            Returns the string represetation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.VoidType">
            <summary>
            Represents a void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.#ctor">
            <summary>
            Constructs a new void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.TryResolveManagedType(System.Type@)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.TryResolveManagedType(System.Type@)"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticFlags">
            <summary>
            Represents flags of an arithmetic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Overflow">
            <summary>
            The operation has overflow semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.OverflowUnsigned">
            <summary>
            The operation has overflow semantics and the
            overflow check is based on unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticKind">
            <summary>
            Represents the kind of an unary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Neg">
            <summary>
            The neg operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Not">
            <summary>
            The logical not operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Abs">
            <summary>
            The mathematical <see cref="M:System.Math.Abs(System.Int32)"/> operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RcpF">
            <summary>
            The reciprocal operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsNaNF">
            <summary>
            The is-not-a-number operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsInfF">
            <summary>
            The is-infitity operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SqrtF">
            <summary>
            Computes sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RsqrtF">
            <summary>
            Computes 1/sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AsinF">
            <summary>
            Computes asin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinF">
            <summary>
            Computes sin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinHF">
            <summary>
            Computes sinh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AcosF">
            <summary>
            Computes acos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CosF">
            <summary>
            Computes cos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CosHF">
            <summary>
            Computes cosh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanF">
            <summary>
            Computes tan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanHF">
            <summary>
            Computes tanh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AtanF">
            <summary>
            Computes atan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.ExpF">
            <summary>
            Computes exp(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Exp2F">
            <summary>
            Computes 2^x.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SignF">
            <summary>
            Computes sign(x);
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.FloorF">
            <summary>
            Computes floor(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CeilingF">
            <summary>
            Computes ceil(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.LogF">
            <summary>
            Computes log(x) to base e.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log2F">
            <summary>
            Computes log2(x) to base 2.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log10F">
            <summary>
            Computes log10(x) to base 10.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticKind">
            <summary>
            Represents the kind of a binary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Add">
            <summary>
            The + operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Sub">
            <summary>
            The - operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Mul">
            <summary>
            The * operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Div">
            <summary>
            The / operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Rem">
            <summary>
            The % operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.And">
            <summary>
            The &amp; operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Or">
            <summary>
            The | operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Xor">
            <summary>
            The ^ operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shl">
            <summary>
            The &lt;&lt; operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shr">
            <summary>
            The &gt;&gt; operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Min">
            <summary>
            Computes min(a, b).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Max">
            <summary>
            Computes max(a, b).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Atan2F">
            <summary>
            Computes atan2(x, y).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.PowF">
            <summary>
            Computes basis^exp.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticKind">
            <summary>
            Represents the kind of a ternary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.TernaryArithmeticKind.MultiplyAdd">
            <summary>
            The * + operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticValue">
            <summary>
            Represents an abstract arithmetic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArithmeticValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},ILGPU.IR.Values.ArithmeticFlags,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new arithmetic value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="operands">The operands.</param>
            <param name="flags">The operation flags.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.PrimitiveType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.CanOverflow">
            <summary>
            Returns true iff the operation has enabled overflow semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsUnsigned">
            <summary>
            Returns true iff the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsIntOperation">
            <summary>
            Returns true iff the operation works on ints.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsFloatOperation">
            <summary>
            Returns true iff the operation works on floats.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticValue">
            <summary>
            Reprensents a unary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Computes an arithmetic node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="operand">The arithmetic operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new unary arithmetic operation.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes an arithmetic node type.
            </summary>
            <param name="operand">The first arithmetic operand.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new binary arithmetic value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes an arithmetic node type.
            </summary>
            <param name="operand">The first arithmetic operand.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetLeftBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the left hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetRightBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the right hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new ternary arithmetic value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The third operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.First">
            <summary>
            Returns the first operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Second">
            <summary>
            Returns the second operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Third">
            <summary>
            Returns the third operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicFlags">
            <summary>
            Represents flags of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicValue">
            <summary>
            Represents a general atomic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes an atomic node type.
            </summary>
            <param name="value">The atomic value operand.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new abstract atomic value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="arguments">Additional arguments.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Value">
            <summary>
            Returns the target value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.IsUnsigned">
            <summary>
            Returns true iff the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicKind">
            <summary>
            Represents the kind of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Exchange">
            <summary>
            An xchg operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Add">
            <summary>
            An add operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.And">
            <summary>
            An and operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Or">
            <summary>
            An or operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Xor">
            <summary>
            An xor operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Max">
            <summary>
            A max operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Min">
            <summary>
            A min operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.GenericAtomic">
            <summary>
            Represents a generic atomic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new generic atomic operation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GenericAtomic.Kind">
            <summary>
            The operation kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicCAS">
            <summary>
            Represents an atomic compare-and-swap operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new atomic compare-and-swap operation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicCAS.CompareValue">
            <summary>
            Returns the comparison value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.CastValue">
            <summary>
            Represents an abstract cast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CastValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type to convert the value to.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
            <remarks>This is equivalent to asking for the type.</remarks>
        </member>
        <member name="T:ILGPU.IR.Values.BaseAddressSpaceCast">
            <summary>
            Represents an abstract cast operation that works on address spaces.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAddressSpaceCast.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.AddressSpaceType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type to convert the value to.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAddressSpaceCast.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PointerCast">
            <summary>
            Casts the type of a pointer to a different type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a pointer cast node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="sourceType">The source pointer type.</param>
            <param name="targetElementType">The target pointer element type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to convert.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AddressSpaceCast">
            <summary>
            Cast a pointer from one address space to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Computes an address-space cast node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="sourceType">The source pointer type.</param>
            <param name="targetAddressSpace">The target address space.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to convert.</param>
            <param name="targetAddressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.TargetAddressSpace">
            <summary>
            Returns the target address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsViewCast">
            <summary>
            Returns true iff the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsPointerCast">
            <summary>
            Returns true iff the current access works on a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewCast">
            <summary>
            Casts a view from one element type to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a view cast node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="sourceType">The source pointer type.</param>
            <param name="targetElementType">The target pointer element type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="sourceView">The view to cast.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BitCast">
            <summary>
            Casts from one value type ot another while reinterpreting
            the value as another type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.TargetPrimitiveType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.FloatAsIntCast">
            <summary>
            Casts from a float to an int while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IntAsFloatCast">
            <summary>
            Casts from an int to a float while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.CompareKind">
            <summary>
            Represents the kind of a compare node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.Equal">
            <summary>
            An equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.NotEqual">
            <summary>
            A not-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessThan">
            <summary>
            A less-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessEqual">
            <summary>
            A less-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterThan">
            <summary>
            A greater-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterEqual">
            <summary>
            A greater-equal comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareFlags">
            <summary>
            Represents special flags of a comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.UnsignedOrUnordered">
            <summary>
            Specifies an unsigned (int) or an unordered
            (float) comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareValue">
            <summary>
            Represents a comparison.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a compare node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Invert(ILGPU.IR.Values.CompareKind)">
            <summary>
            Inverts the given compare kind.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <returns>The inverted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.IsCommutative(ILGPU.IR.Values.CompareKind)">
            <summary>
            Returns true if the given kind is commutative.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>True, if the given kind is commutative.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.InvertIfNonCommutative(ILGPU.IR.Values.CompareKind)">
            <summary>
            Inverts the given compare kind if it is not commutative.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <returns>The inverted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Constructs a new compare value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Kind">
            <summary>
            Returns the kind of this compare node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.IsUnsignedOrUnordered">
            <summary>
            Returns true iff the operation has enabled unsigned or unordered semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.CompareType">
            <summary>
            Returns the comparison type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConstantNode">
            <summary>
            Represents a constant value that will be instantiated.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConstantNode.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new constant value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="constantType">The type of the constant node.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConstantNode.ConstantType">
            <summary>
            Returns the associated constant type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConstantNode.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="T:ILGPU.IR.Values.NullValue">
            <summary>
            Represents an immutable null value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new object value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PrimitiveValue">
            <summary>
            Represents a primitive value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.BasicValueType,System.Int64)">
            <summary>
            Constructs a new primitive constant.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="value">The raw value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.BasicValueType">
            <summary>
            Returns the associated basic type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.PrimitiveType">
            <summary>
            Returns the associated primitive type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int1Value">
            <summary>
            Returns the value as i1.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int8Value">
            <summary>
            Returns the value as si8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int16Value">
            <summary>
            Returns the value as si16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int32Value">
            <summary>
            Returns the value as si32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int64Value">
            <summary>
            Returns the value as si64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt8Value">
            <summary>
            Returns the value as u8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt16Value">
            <summary>
            Returns the value as u16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt32Value">
            <summary>
            Returns the value as u32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt64Value">
            <summary>
            Returns the value as u64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float32Value">
            <summary>
            Returns the value as f32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float64Value">
            <summary>
            Returns the value as f64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsInt">
            <summary>
            Returns true iff the value is an integer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsFloat">
            <summary>
            Returns true iff the value is a float.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.RawValue">
            <summary>
            Returns the underlying raw value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToValueString">
            <summary>
            Returns the encapsulated value as string.
            </summary>
            <returns>The string representation of the encapsulated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.StringValue">
            <summary>
            Represents an immutable string value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,System.String)">
            <summary>
            Constructs a new string constant.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The string value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.StringType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.String">
            <summary>
            Returns the associated string constant.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SizeOfValue">
            <summary>
            Represents the native size of a specific type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SizeOfValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new sizeof value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="targetType">The target type of the size of computation.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SizeOfValue.TargetType">
            <summary>
            Returns the target type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SizeOfValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SizeOfValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SizeOfValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SizeOfValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertFlags">
            <summary>
            Flags of a convert operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.Overflow">
            <summary>
            The convert operation has overflow semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.SourceUnsigned">
            <summary>
            The convert operation treats the input value as unsigned.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.OverflowSourceUnsigned">
            <summary>
            The convert operation has overflow semantics and the
            overflow check is based on unsigned semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.TargetUnsigned">
            <summary>
            The convert operation results in an unsigned value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertValue">
            <summary>
            Converts a node into a target type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ComputeType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a convert node type.
            </summary>
            <param name="targetType">The target type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type to convert the value to.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.ConvertType">
            <summary>
            Returns the target type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.CanOverflow">
            <summary>
            Returns true iff the operation has enabled overflow semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsSourceUnsigned">
            <summary>
            Returns true iff the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsResultUnsigned">
            <summary>
            Returns true iff the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DebugKind">
            <summary>
            Represents the kind of a debug operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DebugKind.AssertFailed">
            <summary>
            A failed assertion.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DebugKind.Trace">
            <summary>
            A trace operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.DebugOperation">
            <summary>
            Represents a generic debug operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a debug node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DebugKind,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new debug operation.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="kind">The operation kind.</param>
            <param name="message">The debug message.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DebugOperation.Kind">
            <summary>
            The debug operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.DebugOperation.Message">
            <summary>
            Returns the message.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugOperation.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="constantType">The constant type node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimension3D">
            <summary>
            Represents a dimension of a 3D device constant.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.X">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Y">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Z">
            <summary>
            The Z dimension.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimensionValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="dimension">The device constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DeviceConstantDimensionValue.Dimension">
            <summary>
            Returns the constant dimension.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.ToArgString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpSizeValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LaneIdxValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="context">The current IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.HandleValue">
            <summary>
            Represents an internal .Net runtime handle value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode,System.Object)">
            <summary>
            Constructs a new internal .Net runtime handle value.
            </summary>
            <param name="block">The parent basic block.</param>
            <param name="handleType">The handle type.</param>
            <param name="handle">The managed handle.</param>
        </member>
        <member name="P:ILGPU.IR.Values.HandleValue.Handle">
            <summary>
            Returns the underlying managed handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.GetHandle``1">
            <summary>
            Returns the underlying handle as type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The converted handle.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IValueVisitor">
            <summary>
            A generic interface to visit values in the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)">
            <summary>
            Visits the node.
            </summary>
            <param name="methodCall">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="phiValue">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)">
            <summary>
            Visits the node.
            </summary>
            <param name="parameter">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Predicate)">
            <summary>
            Visits the node.
            </summary>
            <param name="predicate">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomic">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomicCAS">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)">
            <summary>
            Visits the node.
            </summary>
            <param name="alloca">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)">
            <summary>
            Visits the node.
            </summary>
            <param name="load">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)">
            <summary>
            Visits the node.
            </summary>
            <param name="store">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SizeOfValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetElement)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetElement)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)">
            <summary>
            Visits the node.
            </summary>
            <param name="broadcast">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="undefined">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="handle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugOperation)">
            <summary>
            Visits the node.
            </summary>
            <param name="debug">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Visits the node.
            </summary>
            <param name="returnTerminator">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConditionalBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.ValueVisitorExtensions">
            <summary>
            Extensions for a <see cref="T:ILGPU.IR.Values.IValueVisitor"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueVisitorExtensions.VisitChildren``1(``0,ILGPU.IR.Value)">
            <summary>
            Visits all child nodes.
            </summary>
            <typeparam name="T">The visitor type.</typeparam>
            <param name="visitor">The visitor instance.</param>
            <param name="node">The current node to visit.</param>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryValue">
            <summary>
            Represents an abstract value with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new memory value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
            <param name="values">All child values.</param>
        </member>
        <member name="T:ILGPU.IR.Values.Alloca">
            <summary>
            Represents an allocation operation on the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Computes an alloca node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="allocaType">The allocation type.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new alloca node.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="arrayLength">The array length to allocate.</param>
            <param name="allocaType">The allocation type.</param>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AllocaType">
            <summary>
            Returns the allocation type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AddressSpace">
            <summary>
            Returns the address space of this allocation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.ArrayLength">
            <summary>
            Returns the array length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.IsArrayAllocation">
            <summary>
            Returns true if this allocation is an array allocation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.IsDynamicAllocation">
            <summary>
            Returns true if this allocation is a dynamic allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrierKind">
            <summary>
            Represents the kind of a memory-barrier operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.GroupLevel">
            <summary>
            The barrier works on the group level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.DeviceLevel">
            <summary>
            The barrier works on the device level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.SystemLevel">
            <summary>
            The barrier works on the system level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrier">
            <summary>
            Represents a memory barrier that hinders reordering of memory operations
            with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a barrier node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Constructs a new memory barrier.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="kind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MemoryBarrier.Kind">
            <summary>
            Returns the kind of the barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Load">
            <summary>
            Represents a load operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a load node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="sourceType">The source type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Load.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new load operation.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The source view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Load.Source">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Store">
            <summary>
            Represents a store operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a store node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Store.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new store operation.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The target view.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MethodCall">
            <summary>
            Represents a single function call of the form
            x = f(a0, ..., an-1) or f(a0, ..., an-1)
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ComputeType(ILGPU.IR.Method)">
            <summary>
            Computes a method call node type.
            </summary>
            <param name="target">The called target method.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new call.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The jump target.</param>
            <param name="arguments">The arguments of the jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Target">
            <summary>
            Returns the call target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.NumArguments">
            <summary>
            Returns the number of the associated arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ObjectOperationValue">
            <summary>
            Represents an operation on object values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ObjectOperationValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new abstract object operation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ObjectOperationValue.ObjectValue">
            <summary>
            Returns the structure value to load from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ObjectOperationValue.ObjectType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureOperationValue">
            <summary>
            Represents an operation on structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Constructs a new abstract structure operation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
            <param name="fieldIndex">The structure field index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.FieldType">
            <summary>
            Returns the associated field type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.FieldIndex">
            <summary>(
            Returns the field index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetField">
            <summary>
            Represents an operation to load a single field from an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ComputeType(ILGPU.IR.Values.ValueReference,System.Int32)">
            <summary>
            Computes a get field node type.
            </summary>
            <param name="structValue">The current structure value.</param>
            <param name="fieldIndex">The associated field index.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,System.Int32)">
            <summary>
            Constructs a new field load.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldIndex">The structure field index.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SetField">
            <summary>
            Represents an operation to store a single field of an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes a set field node type.
            </summary>
            <param name="structValue">The current structure value.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,System.Int32,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new field store.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldIndex">The structure field index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SetField.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArrayOperationValue">
            <summary>
            Represents an operation on structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new abstract structure operation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.ArrayType">
            <summary>
            Returns the array type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.ElementType">
            <summary>
            Returns the associated element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayOperationValue.Index">
            <summary>
            Returns the array index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.TryResolveConstantIndex(System.Int32@)">
            <summary>
            Tries to resolve the operation index to a constant value.
            </summary>
            <param name="index">The resolved constant index (if any).</param>
            <returns>True, if a constant index could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetElement">
            <summary>
            Represents an operation to load a single element from an array.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes a get element node type.
            </summary>
            <param name="arrayValue">The current array value.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new element load.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="arrayValue">The array value.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetElement.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SetElement">
            <summary>
            Represents an operation to store a single value into an array.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes a set element node type.
            </summary>
            <param name="arrayValue">The current array value.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new element store.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="arrayValue">The array value.</param>
            <param name="arrayIndex">The array index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SetElement.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetElement.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Parameter">
            <summary>
            Represents a function parameter.
            </summary>
            <remarks>Note that parameters have not associated basic block.</remarks>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.#ctor(ILGPU.IR.Method,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Constructs a new parameter.
            </summary>
            <param name="method">The parent method.</param>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Name">
            <summary>
            Returns the parameter name (for debugging purposes).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToParameterString">
            <summary>
            Return the parameter string.
            </summary>
            <returns>The parameter string.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue">
            <summary>
            Represents a single control-flow dependend phi node.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.Builder">
            <summary>
            A phi builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.#ctor(ILGPU.IR.Values.PhiValue)">
            <summary>
            Constructs a new phi builder.
            </summary>
            <param name="phiValue">The phi value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.PhiValue">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Type">
            <summary>
            Returns the node type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Count">
            <summary>
            Returns the number of attached arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Item(System.Int32)">
            <summary>
            Returns the i-th argument.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved argument.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.AddArgument(ILGPU.IR.NodeId,ILGPU.IR.Value)">
            <summary>
            Adds the given argument.
            </summary>
            <param name="blockId">The input block associated with the argument value.</param>
            <param name="value">The argument value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.Seal">
            <summary>
            Seals this phi node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new phi node.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="type">The phi type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.PhiType">
            <summary>
            Returns the basic phi type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.NodeBlockIds">
            <summary>
            Returns all associated block ids.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.SealPhiArguments(System.Collections.Immutable.ImmutableArray{ILGPU.IR.NodeId},System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Seals the given phi arguments.
            </summary>
            <param name="blockIds">The associated block ids</param>
            <param name="arguments">The phi arguments</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PointerValue">
            <summary>
            Represents an abstract pointer value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new pointer value.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SubViewValue">
            <summary>
            Represents a value to compute a sub-view value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ComputeType(ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes a sub-view value node type.
            </summary>
            <param name="source">The source value.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new sub-view computation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The source view.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.Offset">
            <summary>
            Returns the base offset.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.Length">
            <summary>
            Returns the length of the sub view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadElementAddress">
            <summary>
            Loads an element address of a view or a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Values.ValueReference)">
            <summary>
            Computes a lea value node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="source">The source value.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="sourceView">The source address.</param>
            <param name="elementIndex">The address of the referenced element.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.ElementIndex">
            <summary>
            Returns the associated element index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsViewAccess">
            <summary>
            Returns true iff the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsPointerAccess">
            <summary>
            Returns true iff the current access works on a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadFieldAddress">
            <summary>
            Loads a field address of an object pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Values.ValueReference,System.Int32)">
            <summary>
            Computes a lfa value node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="source">The source value.</param>
            <param name="fieldIndex">The structure field index.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,System.Int32)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="source">The source address.</param>
            <param name="fieldIndex">The structure field index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldType">
            <summary>
            Returns the managed field information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldIndex">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Conditional">
            <summary>
            Represents a conditional predicate.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.ComputeType(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Computes a conditional node type.
            </summary>
            <param name="arguments">The conditional arguments.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new conditional node.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="condition">The condition.</param>
            <param name="arguments">The condition arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Conditional.Condition">
            <summary>
            Returns the associated predicate value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Conditional.Arguments">
            <summary>
            Returns the arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Conditional.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="T:ILGPU.IR.Values.Predicate">
            <summary>
            Represents a single if predicate.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new predicate.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.TrueValue">
            <summary>
            Returns the true value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.FalseValue">
            <summary>
            Returns the false value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue">
            <summary>
            Represents a single terminator value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock},ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new terminator value that is marked.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="targets">The associated targets.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.Targets">
            <summary>
            Returns the associated targets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.NumTargets">
            <summary>
            Returns the number of attached targets.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ReturnTerminator">
            <summary>
            Represents a simple return terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ComputeType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a return node type.
            </summary>
            <param name="returnType">The return type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new return terminator.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="returnValue">The current return value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.IsVoidReturn">
            <summary>
            Returns true if the current return terminator is a void return.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.ReturnValue">
            <summary>
            Returns the associated return value.
            In case of a void return value the result is a <see cref="T:ILGPU.IR.Values.NullValue"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Branch">
            <summary>
            Represents a branch-based terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a branch node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock},System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="targets">The jump targets.</param>
            <param name="arguments">The branch arguments.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="T:ILGPU.IR.Values.UnconditionalBranch">
            <summary>
            Represents an unconditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="target">The jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnconditionalBranch.Target">
            <summary>
            Returns the unconditional jump target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConditionalBranch">
            <summary>
            Represents a conditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new conditional branch terminator.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="condition">The jump condition.</param>
            <param name="falseTarget">The false jump target.</param>
            <param name="trueTarget">The true jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.Condition">
            <summary>
            Returns the associated branch condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.TrueTarget">
            <summary>
            Returns the true jump target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.FalseTarget">
            <summary>
            Returns the false jump target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchBranch">
            <summary>
            Represents a single switch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new switch terminator.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to switch over.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Condition">
            <summary>
            Returns the associated predicate value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.DefaultBlock">
            <summary>
            Returns the default block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.NumCasesWithoutDefault">
            <summary>
            Returns the number of actual switch cases without the default case.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.GetCaseTarget(System.Int32)">
            <summary>
            Returns the case target for the i-th case.
            </summary>
            <param name="i">The index of the i-th case.</param>
            <returns>The resulting jump target.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BuilderTerminator">
            <summary>
            Represents a temporary builder terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a temporary builder terminator.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierOperation">
            <summary>
            Represents a generic barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new generic barrier operation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="values">Additional values.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrierKind">
            <summary>
            Represents a predicate-barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.PopCount">
            <summary>
            Returns the number of threads in the group
            for which the predicate evaluates to true.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.And">
            <summary>
            Returns the logical and result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.Or">
            <summary>
            Returns the logical or result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrier">
            <summary>
            Represents a predicated synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Computes a predicate barrier node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Constructs a new predicate barrier.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="predicate">The predicate value.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Predicate">
            <summary>
            Returns the barrier predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Kind">
            <summary>
            Returns the kind of the barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierKind">
            <summary>
            Represents a barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.WarpLevel">
            <summary>
            A barrier that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.GroupLevel">
            <summary>
            A barrier that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.Barrier">
            <summary>
            Represents a synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a barrier node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.BarrierKind)">
            <summary>
            Constructs a new barrier.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="barrierKind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Barrier.Kind">
            <summary>
            Return the associated barrier kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="T:ILGPU.IR.Values.BroadcastKind">
            <summary>
            Represents the kind of a broadcast operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.WarpLevel">
            <summary>
            A broadcast operation that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.GroupLevel">
            <summary>
            A broadcast operation that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.Broadcast">
            <summary>
            Represents a broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ComputeType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a broadcast node type.
            </summary>
            <param name="variableType">The broadcast variable type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Constructs a new broadcast operation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="value">The value to broadcast.</param>
            <param name="origin">The source thread index within the group or warp..</param>
            <param name="broadcastKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Variable">
            <summary>
            Returns the variable reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Origin">
            <summary>
            Returns the thread index origin (group or lane index).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Kind">
            <summary>
            Returns the kind of the broadcast operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.IsBuiltIn">
            <summary>
            Returns true if this broadcast operation works
            on intrinsic primitive types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleKind">
            <summary>
            Represents the kind of a shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Generic">
            <summary>
            A generic shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Down">
            <summary>
            A down-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Up">
            <summary>
            An up-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Xor">
            <summary>
            A xor-shuffle operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleOperation">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.ComputeType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a shuffle node type.
            </summary>
            <param name="variableType">The shuffle variable type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference},ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="values">The values.</param>
            <param name="shuffleKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Variable">
            <summary>
            Returns the variable reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Origin">
            <summary>
            Returns the shuffle origin (depends on the operation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Kind">
            <summary>
            Returns the kind of the shuffle operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.IsBuiltIn">
            <summary>
            Returns true if this shuffle operation works
            on intrinsic primitive types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpShuffle">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SubWarpShuffle">
            <summary>
            Represents an sub-warp shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="basicBlock">The parent basic block.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubWarpShuffle.Width">
            <summary>
            Returns the intra-warp width.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.UndefinedValue">
            <summary>
            Represents an undefined value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.#ctor(ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a undefined value.
            </summary>
            <param name="voidType">The void type.</param>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Use">
            <summary>
            Represents the use of a single node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.#ctor(ILGPU.IR.Value,System.Int32)">
            <summary>
            Constructs a new use.
            </summary>
            <param name="target">The target reference.</param>
            <param name="index">The argument index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Target">
            <summary>
            Returns the target reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Index">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Refresh">
            <summary>
            Refreshes the use with up-to-date replacement information.
            </summary>
            <returns>The refreshed use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Resolve">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(ILGPU.IR.Values.Use)">
            <summary>
            Returns true iff the given use is equal to this use.
            </summary>
            <param name="other">The other use.</param>
            <returns>True, iff the given id is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this use.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.GetHashCode">
            <summary>
            Returns the hash code of this use.
            </summary>
            <returns>The hash code of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ToString">
            <summary>
            Returns the string representation of this use.
            </summary>
            <returns>The string representation of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Values.ValueReference">
            <summary>
            Implicitly converts the given use to the associated node reference.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given use to the associated node.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Equality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true iff the first and the second use are the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, iff the first and the second use are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Inequality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true iff the first and the second use are not the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, iff the first and the second use are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection">
            <summary>
            Represents an enumerable of uses that point to non-replaced nodes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.#ctor(ILGPU.IR.Value,System.Collections.Generic.HashSet{ILGPU.IR.Values.Use})">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="node">The node.</param>
            <param name="useSet">The source set of uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Node">
            <summary>
            Returns the node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.#ctor(ILGPU.IR.Value,System.Collections.Generic.HashSet{ILGPU.IR.Values.Use})">
            <summary>
            Constructs a new uses collection.
            </summary>
            <param name="node">The associated node.</param>
            <param name="allUses">The set of associated uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.AllUses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasAny">
            <summary>
            Returns true, iff the collection contains at least one use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasExactlyOne">
            <summary>
            Returns true, iff the collection contains exactly one use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.TryGetSingleUse(ILGPU.IR.Values.Use@)">
            <summary>
            Tries to resolve a single use.
            </summary>
            <param name="use">The resolved use reference.</param>
            <returns>True, iff the collection contains exactly one use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Clone">
            <summary>
            Clones this use collection into a new one.
            </summary>
            <returns>The cloned use collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#Use}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseDistribution">
            <summary>
            An analysis class to resolve information about the global use-relation
            within a given context.
            </summary>
            <remarks>This class is typically used for internal debugging and tracking of memory allocations.</remarks>
        </member>
        <member name="M:ILGPU.IR.Values.UseDistribution.#ctor(ILGPU.IR.IRContext)">
            <summary>
            Constructs a new use distribution.
            </summary>
            <param name="context">The target context.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.Uses">
            <summary>
            Returns the use distribution of all global nodes.
            </summary>
            <remarks>Tuple layout: (number of uses, number of nodes).</remarks>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.UsesPerType">
            <summary>
            Returns the use distribution of all node types.
            </summary>
            <remarks>Tuple layout: (max number of uses, type, number of nodes with this type).</remarks>
        </member>
        <member name="T:ILGPU.IR.Values.ValueReference">
            <summary>
            Represents a reference to a node that can be resolved
            automatically to the latest node information by following
            the replacement relation on nodes.
            </summary>
            <remarks>
            Use the <see cref="P:ILGPU.IR.Values.ValueReference.DirectTarget"/> property to resolve the
            directly associated node.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new node reference.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.DirectTarget">
            <summary>
            Returns the node that is directly stored in the reference struct
            without using any replacement information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsValid">
            <summary>
            Returns true iff the reference points to a valid node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsReplaced">
            <summary>
            Returns true if the direct target has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Id">
            <summary>
            Returns the unique node id of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.SequencePoint">
            <summary>
            Returns the associated sequence point.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Nodes">
            <summary>
            Returns all child nodes of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Uses">
            <summary>
            Returns all uses of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Type">
            <summary>
            Returns the associated type of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Refresh">
            <summary>
            Refreshes the current reference and returns the new one.
            </summary>
            <returns>The refreshed reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Mark(ILGPU.IR.NodeMarker)">
            <summary>
            Marks the current node with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, iff the old marker was not equal to the new marker
            (the node was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.IsMarked(ILGPU.IR.NodeMarker)">
            <summary>
            Returns true iff the reference marker is less or equal to the
            current marker value.
            </summary>
            <param name="referenceMarker">The reference marker.</param>
            <returns>
            True, iff the reference marker is less or equal to
            the current marker value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child nodes.
            </summary>
            <returns>An enumerator to enumerate all child nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Accept``1(``0)">
            <summary>
            Accepts a node visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this node with the given node.
            </summary>
            <param name="other">The other node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Resolve">
            <summary>
            Resolves the actual node with respect to
            replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ResolveAs``1">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true iff the given node reference points to the
            same node.
            </summary>
            <param name="other">The other reference.</param>
            <returns>True, iff the given reference points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(System.Object)">
            <summary>
            Returns true iff the given object is a node reference that
            points to the same node.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetHashCode">
            <summary>
            Returns the hash code of the directly associated node.
            </summary>
            <returns>The hash code of the directly associated node</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToString">
            <summary>
            Returns the string represention of this reference.
            </summary>
            <returns>The string representation of this reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Value)~ILGPU.IR.Values.ValueReference">
            <summary>
            Converts the given node implicitly to a node reference.
            </summary>
            <param name="node">The node to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Values.ValueReference)~ILGPU.IR.Value">
            <summary>
            Converts the given reference to the latest node information.
            </summary>
            <param name="reference">The reference to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Equality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true iff the both node references point to the
            same node.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, iff both node references point to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Inequality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true iff the both node references point to different nodes.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, iff both node references point to different nodes.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.NewView">
            <summary>
            Represents a new view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ComputeType(ILGPU.IR.IRContext,ILGPU.IR.Types.TypeNode)">
            <summary>
            Computes a view node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="pointerType">The underlying pointer type.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a view.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="pointer">The underlying pointer.</param>
            <param name="length">The number of elements.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Pointer">
            <summary>
            Returns the underlying pointer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewElementType">
            <summary>
            Returns the view's element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewAddressSpace">
            <summary>
            Returns the view's address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Length">
            <summary>
            Returns the length of the view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewPropertyValue">
            <summary>
            Represents a generic property of an <see cref="T:ILGPU.ArrayView`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewPropertyValue.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a view property.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
            <param name="view">The underlying view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.View">
            <summary>
            Returns the underlying view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewPropertyValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetViewLength">
            <summary>
            Represents the <see cref="P:ILGPU.ArrayView`1.Length"/> property
            inside the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ComputeType(ILGPU.IR.IRContext)">
            <summary>
            Computes a view length node type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.#ctor(ILGPU.IR.IRContext,ILGPU.IR.BasicBlock,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new view length property.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="basicblock">The parent basic block.</param>
            <param name="view">The underlying view.</param>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.UpdateType(ILGPU.IR.IRContext)">
            <summary cref="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.IValue">
            <summary>
            The base interface of all values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Type">
            <summary>
            Returns the associated type information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Nodes">
            <summary>
            Returns all associated nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Uses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IValue.Resolve">
            <summary>
            Resolves the actual value with respect to
            replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.IValue.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="T:ILGPU.IR.ValueExtensions">
            <summary>
            Contains extension methods for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsPrimitive``1(``0)">
            <summary>
            Returns true iff the given value is a primitive value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, iff the given value is a primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsInstantiatedConstant``1(``0)">
            <summary>
            Returns true iff the given value is an instantiated constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, iff the given value is an instantiated constant value.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsDeviceConstant``1(``0)">
            <summary>
            Returns true iff the given value is a device constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, iff the given value is a device constant value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueFlags">
            <summary>
            Flags that can be associated with every value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.None">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NotReplacable">
            <summary>
            The value cannot be replaced.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NoUses">
            <summary>
            The value cannot have uses.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Value">
            <summary>
            Represents a basic intermediate-representation value.
            It is the base class for all values in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.DefaultFlags">
            <summary>
            The default value flags.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Value.Enumerator">
            <summary>
            An enumerator for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="valueArray">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Value.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Value.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Value.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Value.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="F:ILGPU.IR.Value.type">
            <summary>
            The current node type.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.allUses">
            <summary>
            The collection of all uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value that is marked as replacable.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueKind,ILGPU.IR.BasicBlock,ILGPU.IR.Types.TypeNode,ILGPU.IR.ValueFlags)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="valueKind">The value kind.</param>
            <param name="basicBlock">The parent basic block.</param>
            <param name="initialType">The initial node type.</param>
            <param name="valueFlags">Custom value flags.</param>
        </member>
        <member name="P:ILGPU.IR.Value.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.ValueFlags">
            <summary>
            Returns the associated value flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanBeReplaced">
            <summary>
            Returns true if the current value can be replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanHaveUses">
            <summary>
            Returns true if the current value can have uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Replacement">
            <summary>
            Returns the replacement of this value (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.IsReplaced">
            <summary>
            Returns true iff the current value has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Nodes">
            <summary>
            Returns all child values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.AllNumUses">
            <summary>
            Returns the total number of all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Uses">
            <summary>
            Returns all current uses (to non-replaced values).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Item(System.Int32)">
            <summary>
            Accesses the child value with the given index.
            </summary>
            <param name="index">The child-value index.</param>
            <returns>The resolved child value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GC">
            <summary>
            Performs a GC run on this value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUse">
            <summary>
            Resolves the first use.
            </summary>
            <returns>The first use.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUseNode">
            <summary>
            Resolves the first use as value.
            </summary>
            <returns>The first use as value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.AddUse(ILGPU.IR.Value,System.Int32)">
            <summary>
            Adds the given use to the use set.
            </summary>
            <param name="target">The target value.</param>
            <param name="useIndex">The use index.</param>
        </member>
        <member name="M:ILGPU.IR.Value.InvalidateType">
            <summary>
            Invalidates the current type and enfores a recomputation
            of the current type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.UpdateType(ILGPU.IR.IRContext)">
            <summary>
            Computes the current type.
            </summary>
            <param name="context">The parent IR context.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary>
            Rebuilds the current value in the scope of the given rebuilder.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="rebuilder">The rebuilder to use.</param>
            <returns>The rebuilt value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.ValueReference})">
            <summary>
            Seals this value.
            </summary>
            <param name="nodes">The nested child nodes.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="M:ILGPU.IR.Value.OnReplacedNode">
            <summary>
            Invoked when an attached node is replaced.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Resolve">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(ILGPU.IR.Value)">
            <summary>
            Returns true iff the given value is the same value.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, iff the given value is the same value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child values.
            </summary>
            <returns>An enumerator to enumerate all child values.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToArgString">
            <summary>
            Returns the argument string (operation args) of this node.
            </summary>
            <returns>The argument string.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToString">
            <summary>
            Returns the string represetation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueKind">
            <summary>
            Represents the kind of a single IR value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnaryArithmetic">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BinaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BinaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.TernaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.TernaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Compare">
            <summary>
            A <see cref="T:ILGPU.IR.Values.CompareValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Convert">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ConvertValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Predicate">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Predicate"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PointerCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PointerCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AddressSpaceCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AddressSpaceCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.ViewCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ViewCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.FloatAsIntCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.FloatAsIntCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IntAsFloatCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IntAsFloatCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Null">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NullValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Primitive">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PrimitiveValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.String">
            <summary>
            A <see cref="T:ILGPU.IR.Values.StringValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SizeOf">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SizeOfValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpSize">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpSizeValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LaneIdx">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LaneIdxValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Alloca">
            <summary>
            An <see cref="T:ILGPU.IR.Values.Alloca"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MemoryBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MemoryBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Load">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Load"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Store">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Store"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Phi">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PhiValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Parameter">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Parameter"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MethodCall">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MethodCall"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetElement">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetElement"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SetElement">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SetElement"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.NewView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NewView"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetViewLength">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetViewLength"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubViewValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadElementAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadFieldAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Return">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ReturnTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnconditionalBranch">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnconditionalBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.ConditionalBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ConditionalBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SwitchBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SwitchBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GenericAtomic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GenericAtomic"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AtomicCAS">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AtomicCAS"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PredicateBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PredicateBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Barrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Barrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Broadcast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Broadcast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubWarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Debug">
            <summary>
            A <see cref="T:ILGPU.IR.Values.DebugOperation"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Undefined">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UndefinedValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BuilderTerminator">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BuilderTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Handle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.HandleValue"/> managed handle value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKinds">
            <summary>
            Utility methods for <see cref="T:ILGPU.IR.ValueKind"/> enumeration values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKinds.NumValueKinds">
            <summary>
            The number of different value kinds.
            </summary>
        </member>
        <member name="T:ILGPU.KernelConfig">
            <summary>
            A single kernel configuration for an explicitly grouped kernel.
            </summary>
        </member>
        <member name="F:ILGPU.KernelConfig.ImplicitlyGroupedKernelConstructor">
            <summary>
            Represents a kernel constructor for implicitly grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1,ILGPU.Index1,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">The dynamic shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2,ILGPU.Index2,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">The dynamic shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="groupDimX">The group dimension in X dimension.</param>
            <param name="groupDimY">The group dimension in Y dimension.</param>
            <param name="groupDimZ">The group dimension in Z dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">The dynamic shared memory configuration.</param>
        </member>
        <member name="P:ILGPU.KernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.SharedMemoryConfig">
            <summary>
            Returns the associated dynamic memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if the current configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.Size">
            <summary>
            Returns the total launch size.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.ToDimensions">
            <summary>
            Converts the current instance into a dimension tuple.
            </summary>
            <returns>A dimension tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.ToValueTuple">
            <summary>
            Converts the current instance into a value tuple.
            </summary>
            <returns>A value tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3@,ILGPU.Index3@)">
            <summary>
            Deconstructs the current instance into a dimension tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3@,ILGPU.Index3@,ILGPU.SharedMemoryConfig@)">
            <summary>
            Deconstructs the current instance into a value tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
            <param name="sharedMemoryConfig">The shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1,ILGPU.Index1})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index1})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index2})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index2,ILGPU.Index2})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index3})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1,ILGPU.Index1,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3,ILGPU.Index3}">
            <summary>
            Converts the given kernel configuration into an equivalent dimension tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3,ILGPU.Index3,ILGPU.SharedMemoryConfig}">
            <summary>
            Converts the given kernel configuration into an equivalent value tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="T:ILGPU.SharedMemoryConfig">
            <summary>
            Represents a dynamic shared memory configuration for kernels.
            </summary>
        </member>
        <member name="F:ILGPU.SharedMemoryConfig.Empty">
            <summary>
            An empty shared memory configuration.
            </summary>
            <remarks>
            This configuration does not use dynamic shared memory.
            </remarks>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.RequestDynamic``1(System.Int32)">
            <summary>
            Requests a <see cref="T:ILGPU.SharedMemoryConfig"/>
            </summary>
            <typeparam name="T">The element type to use.</typeparam>
            <param name="numElements">The number of elements to request.</param>
            <returns>A shared memory configuration that uses shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <param name="elementSize">The element size to allocate.</param>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.NumElements">
            <summary>
            Returns the number of elements.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ElementSize">
            <summary>
            Returns the element size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if this configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSharedMemoryConfig">
            <summary>
            A shared memory configuration that stores both static and dynamic information about
            shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSharedMemoryConfig.#ctor(ILGPU.Backends.EntryPoints.SharedMemorySpecification,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="specification">The general specification.</param>
            <param name="dynamicConfig">The dynamic configuration.</param>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.Specification">
            <summary>
            Returns the static specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicConfig">
            <summary>
            Returns the dynamic configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.NumDynamicElements">
            <summary>
            Returns the number of dynamic shared memory elements.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasStaticMemory">
            <summary>
            Returns true if the current config requires static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasDynamicMemory">
            <summary>
            Returns true if the current config requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeKernelConfig">
            <summary>
            Represents a runtime kernel configuration that is used internally to specify
            launch dimensions and shared memory settings.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeKernelConfig.Constructor">
            <summary>
            Represents the associated constructor.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeKernelConfig.#ctor(ILGPU.KernelConfig,ILGPU.Backends.EntryPoints.SharedMemorySpecification)">
            <summary>
            Constructs a new runtime kernel configuration.
            </summary>
            <param name="kernelConfig">The kernel configuration to use.</param>
            <param name="specification">The shared memory specification to use.</param>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.SharedMemoryConfig">
            <summary>
            Returns the current shared memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="T:ILGPU.MemoryFence">
            <summary>
            Contains memory-fence functions.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.GroupLevel">
            <summary>
            A memory fence at the group level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.DeviceLevel">
            <summary>
            A memory fence at the device level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.SystemLevel">
            <summary>
            A memory fence at the system level.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.AssemblyVersionNotCompatible">
            <summary>
              Looks up a localized string similar to The assembly version &apos;{0}&apos; is not compatible with the current version &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotDeserializeDuplicateNodeId">
            <summary>
              Looks up a localized string similar to Duplicate node id &apos;{0}&apos; detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotFindFieldOfType">
            <summary>
              Looks up a localized string similar to Cannot find the field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ContextFlagsAreNotCompatible">
            <summary>
              Looks up a localized string similar to The context flags &apos;{0}&apos; of the deserialized context are not compatible with the current flags &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeMethod">
            <summary>
              Looks up a localized string similar to Could not load method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeType">
            <summary>
              Looks up a localized string similar to Could not load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotFindCorrespondingIRMethod">
            <summary>
              Looks up a localized string similar to Could not find IR method that corresponds to the method handle &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CustomExceptionSemantics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has custom exception semantics..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.IntrinsicAcceleratorsBroken">
            <summary>
              Looks up a localized string similar to Intrinsic accelerators broken (contact developers).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidDynamicSharedMemoryConfiguration">
            <summary>
              Looks up a localized string similar to Dynamic shared memory elements specified but the kernel does not support dynamic shared memory bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameter">
            <summary>
              Looks up a localized string similar to An entry point must receive at least one index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameterOfWrongType">
            <summary>
              Looks up a localized string similar to An entry point must receive a compatible index type as first parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointInstanceKernelMethod">
            <summary>
              Looks up a localized string similar to Only static methods are supported at the moment.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointParameter">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointWithoutDotNetMethod">
            <summary>
              Looks up a localized string similar to Not supported entry point without a valid .Net runtime entry.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidILCode">
            <summary>
              Looks up a localized string similar to Invalid IL Code.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidKernelOperation">
            <summary>
              Looks up a localized string similar to This operation can only be called from an ILGPU kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativeMethodNotSupported">
            <summary>
              Looks up a localized string similar to Native method &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativePlatformInvocationRequired">
            <summary>
              Looks up a localized string similar to This operation is only permitted in native-OS-platform mode. The current runtime is &apos;{0}&apos; but the native OS platform is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedActivatorOperation">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; on the .Net activator is not supported..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticArgumentType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not supported in the scope of this arithmetic operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticOperandTypes">
            <summary>
              Looks up a localized string similar to Not supported arithmetic operands &apos;{0}&apos; &amp; &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayCreation">
            <summary>
              Looks up a localized string similar to Cannot create a dynamically sized array on an accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayElementType">
            <summary>
              Looks up a localized string similar to The array type &apos;{0}&apos; uses a non-value element type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedByRefKernelParameters">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedClassType">
            <summary>
              Looks up a localized string similar to Class type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareArgumentType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not supported in the scope of this compare operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareOrArithmeticValue">
            <summary>
              Looks up a localized string similar to Not supported compare or arithmetic value of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedConversion">
            <summary>
              Looks up a localized string similar to Cannot convert from &apos;{0}&apos; to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicAllocation">
            <summary>
              Looks up a localized string similar to The allocation size of type &apos;{0}&apos; must be statically known and not a dynamic value &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicSharedMemoryAllocations">
            <summary>
              Looks up a localized string similar to Dynamic shared memory allocations are not supported by this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedFloatIntCast">
            <summary>
              Looks up a localized string similar to Cannot cast type &apos;{0}&apos; to float/int.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstruction">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstructionDebugLoc">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method &apos;{0}&apos; of type &apos;{1}&apos; (see {2}).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstructionPossibleLambda">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method &apos;{0}&apos; of type &apos;{1}&apos;. Are you using a lambda closure? (see {2}).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIndirectMethodCall">
            <summary>
              Looks up a localized string similar to Not supported indirect call to a method with the signature &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInstruction">
            <summary>
              Looks up a localized string similar to Not supported instruction in method &apos;{0}&apos; of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInterfaceType">
            <summary>
              Looks up a localized string similar to Interface type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInteropIntrinsic">
            <summary>
              Looks up a localized string similar to The interop intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntOperand">
            <summary>
              Looks up a localized string similar to Not supported int operand of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported intrinsic type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation0">
            <summary>
              Looks up a localized string similar to A function does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation1">
            <summary>
              Looks up a localized string similar to The function &apos;{0}&apos; does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIsInstance">
            <summary>
              Looks up a localized string similar to IsInstance is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedKernelParameterType">
            <summary>
              Looks up a localized string similar to Not supported kernel-parameter type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadOfStaticField">
            <summary>
              Looks up a localized string similar to Cannot load from the static field &apos;{0}&apos; since it is not read only.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMathIntrinsic">
            <summary>
              Looks up a localized string similar to The math intrinsic with {0} arguments is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMethodJump">
            <summary>
              Looks up a localized string similar to Not supported jump to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPlatform">
            <summary>
              Looks up a localized string similar to Not supported platform &apos;{0}&apos; ({1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRecursiveProgram">
            <summary>
              Looks up a localized string similar to Not supported recursive program.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRuntimeMethod">
            <summary>
              Looks up a localized string similar to Not supported runtime method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSharedMemoryIntrinsic">
            <summary>
              Looks up a localized string similar to The shared memory intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSizeOf">
            <summary>
              Looks up a localized string similar to Could not resolve the native size of the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStoreToStaticField">
            <summary>
              Looks up a localized string similar to Cannot store a value to the static field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedType">
            <summary>
              Looks up a localized string similar to Not supported type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedViewIntrinsic">
            <summary>
              Looks up a localized string similar to The view intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCall">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToObject">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos; defined in type &apos;{1}&apos; that was called on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToUnconstrainedInstance">
            <summary>
              Looks up a localized string similar to Calling the virtual method &apos;{0}&apos; of unconstrained instance is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWarpIntrinsic">
            <summary>
              Looks up a localized string similar to The warp intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NoUses">
            <summary>
              Looks up a localized string similar to There are no uses to resolve.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.RuntimeErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotEnablePeerAccessToDifferentAcceleratorKind">
            <summary>
              Looks up a localized string similar to Cannot enable peer access to an accelerator of a different kind.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotResolveErrorString">
            <summary>
              Looks up a localized string similar to Error-description string could not be resolved.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CudaNotSupported">
            <summary>
              Looks up a localized string similar to Cuda is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation0">
            <summary>
              Looks up a localized string similar to Invalid code generation operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation1">
            <summary>
              Looks up a localized string similar to Invalid code generation operation:\n{0}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCustomGroupSize">
            <summary>
              Looks up a localized string similar to Invalid custom group size &gt; 0 in a grouped-index scenario.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGridDimension">
            <summary>
              Looks up a localized string similar to Invalid grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGroupDimension">
            <summary>
              Looks up a localized string similar to Invalid group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidKernelSpecializationGroupSize">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the defined group size..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidNumberOfUniformArgs">
            <summary>
              Looks up a localized string similar to The number of provided arguments does not match the required length.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidSharedMemorySize">
            <summary>
              Looks up a localized string similar to Shared-memory size cannot be &lt; 0.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedDriverVersion">
            <summary>
              Looks up a localized string similar to Not supported driver version &apos;{0}&apos; (&gt;= {1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedExplicitlyGroupedKernel">
            <summary>
              Looks up a localized string similar to Not supported explicitly-grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedIndexType">
            <summary>
              Looks up a localized string similar to Not supported index type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernel">
            <summary>
              Looks up a localized string similar to Not supported kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernelSpecialization">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the current accelerator..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedNonBlittableType">
            <summary>
              Looks up a localized string similar to Type type &apos;{0}&apos; is not blittable.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedOpenCLCVersion">
            <summary>
              Looks up a localized string similar to Not supported OpenCL C version (&gt;= {0} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXArchitecture">
            <summary>
              Looks up a localized string similar to Not supported PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXInstructionSet">
            <summary>
              Looks up a localized string similar to Not supported PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTargetAccelerator">
            <summary>
              Looks up a localized string similar to Not supported target accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTotalGroupSize">
            <summary>
              Looks up a localized string similar to Not supported total group size. The total group size must be &lt;= the number of available threads ({0}).
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorType">
            <summary>
            Represents the general type of an accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.CPU">
            <summary>
            Represents a CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.Cuda">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.OpenCL">
            <summary>
            Represents an OpenCL accelerator (CPU/GPU via OpenCL).
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator">
            <summary>
            Represents a general abstract accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#cctor">
            <summary>
            Detectes all accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Accelerators">
            <summary>
            Represents all available accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Create(ILGPU.Context,ILGPU.Runtime.AcceleratorId)">
            <summary>
            Creates the specified accelerator using the provided accelerator id.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The specified accelerator id.</param>
            <returns>The created accelerator.</returns>
        </member>
        <member name="E:ILGPU.Runtime.Accelerator.Disposed">
            <summary>
            Will be raised iff the accelerator is disposed.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.syncRoot">
            <summary>
            Main object for accelerator synchronization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.memoryCache">
            <summary>
            The default memory cache for operations that require additional
            temporary memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#ctor(ILGPU.Context,ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="type">The target accelerator type.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Context">
            <summary>
            Returns the associated ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultStream">
            <summary>
            Returns the default stream of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AcceleratorType">
            <summary>
            Returns the type of the accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Name">
            <summary>
            Returns the name of the device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumGroupsExtent">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups using the
            maximum number of threads per group to launch common grid-stride loop kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Backend">
            <summary>
            Returns the primary backend of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemoryCache">
            <summary>
            Returns the default memory-buffer cache that can be used by several operations.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutomaticBufferDisposalEnabled">
            <summary>
            See <see cref="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal"/> for more information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutomaticKernelDisposalEnabled">
            <summary>
            See <see cref="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal"/> for more information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)">
            <summary>
            Creates a new accelerator extension using the given provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to create.</typeparam>
            <typeparam name="TExtensionProvider">The extension provided type to create the extension.</typeparam>
            <param name="provider">The extension provided to create the extension.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32)">
            <summary>
            Allocates a 1D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 1D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.Index2)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32,System.Int32)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 2D buffer.</param>
            <param name="height">The height of the 2D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.Index3)">
            <summary>
            Allocates a 3D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 3D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 3D buffer.</param>
            <param name="height">The height of the 3D buffer.</param>
            <param name="depth">The depth of the 3D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStream">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStreamInternal">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Synchronize">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.SynchronizeInternal">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ToString">
            <summary>
            Returns the string representation of this accelerator.
            </summary>
            <returns>The string representation of this accelerator.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcActivated">
            <summary>
            True, if the GC thread is activated.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcThread">
            <summary>
            The child-object GC thread
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitGC">
            <summary>
            Initializes the GC functionality.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeGC">
            <summary>
            Disposes the GC functionality.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GCEnabled">
            <summary>
            Returns true if the GC thread is enabled.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RequestGC_SyncRoot">
            <summary>
            Requests a GC run.
            </summary>
            <remarks>This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GCThread">
            <summary>
            GC thread to clean up cached resources.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfChildObjectsInGC">
            <summary>
            Minimum number of child objects before we apply GC.
            </summary>
            <remarks>Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC"/></remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.childObjects">
            <summary>
            The list of linked child objects.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumberChildObjects">
            <summary>
            Returns the number of the registered child objects that depend
            on this accelerator object.
            </summary>
            <remarks>
            Note that this number is affected by the flags
            <see cref="F:ILGPU.ContextFlags.DisableAutomaticBufferDisposal"/> and <see cref="F:ILGPU.ContextFlags.DisableAutomaticKernelDisposal"/>.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestChildObjectsGC_SyncRoot">
            <summary>
            True, iff a GC run is requested to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RegisterChildObject``1(``0)">
            <summary>
            Registers a child object with the current accelerator object.
            </summary>
            <param name="child">The child object to register.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeChildObjects">
            <summary>
            Disposes all child objects that are still alive since they are not allowed
            to live longer than the parent accelerator object.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ChildObjectsGC_SyncRoot">
            <summary>
            GC method to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.currentAccelerator">
            <summary>
            Represents the current accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.MakeCurrent">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Bind">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.BindScoped">
            <summary>
            Makes this accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnBind">
            <summary>
            Will be invoked when this accelerator will the current one.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnUnbind">
            <summary>
            Will be invoked when this accelerator is no longer the current one.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfKernelsInGC">
            <summary>
            Minimum number of kernel objects before we apply GC.
            </summary>
            <remarks>Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC"/></remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="entry">The entry point description.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Entry">
            <summary>
            Returns the associated entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>True, if the given cached key is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.#ctor(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey,System.Int32)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="compiledKernelKey">The compiled kernel key for lookup purposes.</param>
            <param name="implicitGroupSize">The implicit group size (if any).</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.CompiledKernelKey">
            <summary>
            The associated compiled kernel key for lookup purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.ImplicitGroupSize">
            <summary>
            Returns the associated implicit group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>True, if the given cached key is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernel">
            <summary>
            A cached kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.#ctor(System.WeakReference{ILGPU.Runtime.Kernel},System.Int32,System.Int32)">
            <summary>
            Constructs a new cached kernel.
            </summary>
            <param name="kernel">The kernel to cache.</param>
            <param name="groupSize">The computed group size.</param>
            <param name="minGridSize">The computed minimum grid size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.GroupSize">
            <summary>
            Returns the computed group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.MinGridSize">
            <summary>
            Returns the computed minimum grid size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.TryGetKernel(ILGPU.Runtime.Kernel@)">
            <summary>
            Tries to resolve the associated kernel.
            </summary>
            <param name="kernel">The resolved kernel.</param>
            <returns>True, iff the associated kernel could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.UpdateReference(ILGPU.Runtime.Kernel)">
            <summary>
            Tries to update the internal weak reference or creates a new one
            pointing to the given target.
            </summary>
            <param name="target">The new target kernel.</param>
            <returns>An updated weak reference that points to the given target.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.IKernelLoader">
            <summary>
            Represents a generic kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize">
            <summary>
            Returns the custom group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.IKernelLoader.MinGridSize">
            <summary>
            Returns the custom min grid size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given kernel using the given accelerator.
            </summary>
            <param name="accelerator">The target accelerator for the loading operation.</param>
            <param name="compiledKernel">The compiled kernel to load.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.compiledKernelCache">
            <summary>
            A cache for compiled kernel objects.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.kernelCache">
            <summary>
            A cache for loaded kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitKernelCache">
            <summary>
            Initializes the local kernel cache.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.KernelCacheEnabled">
            <summary>
            Returns true if the kernel cache is enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestKernelCacheGC_SyncRoot">
            <summary>
            True, iff a GC run is requested to clean disposed child kernels.
            </summary>
            <remarks>This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernelDirect``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <typeparam name="TKernelLoader">The type of the custom kernel loader.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the custom kernel loader.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/>.
            </summary>
            <param name="entry">The entry point to compile into a <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/> using the given
            kernel specialization.
            </summary>
            <param name="entry">The entry point to compile into a <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearKernelCache_SyncRoot">
            <summary>
            Clears the internal cache cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.KernelCacheGC_SyncRoot">
            <summary>
            GC method to clean disposed kernels.
            </summary>
            <remarks>This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AdjustAndVerifyKernelGroupSize(System.Int32@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Adjusts and verifies a customm group size of a specific kernel.
            Note that this function ensures that implicitly grouped kernels
            without an explicit group size will be launched with a group size
            that is equal to the available warp size.
            </summary>
            <param name="customGroupSize">The custom group size to adjust and verify.</param>
            <param name="entryPoint">The kernel entry point.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.DefaultKernelLoader">
            <summary>
            Represents a default kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultKernelLoader.GroupSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize"/>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultKernelLoader.MinGridSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.MinGridSize"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.GroupedKernelLoader">
            <summary>
            Represents a grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.#ctor(System.Int32)">
            <summary>
            Constructs a new grouped kernel loader.
            </summary>
            <param name="groupSize">The custom group size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GroupedKernelLoader.GroupSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize"/>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GroupedKernelLoader.MinGridSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.MinGridSize"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.AutoKernelLoader">
            <summary>
            Represents an automatically configured grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.GroupSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize"/>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.MinGridSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.MinGridSize"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AutoKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@)">
            <summary>
            Loads a kernel specified by the given method and returns a launcher of the specified type.
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">The type of the custom kernel loader.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadSpecializationKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <returns>The loaded specialized kernel delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel. Implictly-grouped kernels are not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel. Implictly-grouped kernels are not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel. Implictly-grouped kernel
            will be launched with the given group size.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo,System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo,System.Int32@,System.Int32@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``2(``1,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1,System.Int32@,System.Int32@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.storedPeerAccelerators">
            <summary>
            Contains a collection of all peer accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.PeerAccelerators">
            <summary>
            Returns the accelerators for which the peer access has been enabled.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.PeerAccessAcceleratorDestroyed(System.Object,System.EventArgs)">
            <summary>
            Event handler to disable peer access to disposed accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.HasPeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true iff peer access between the current and the given accelerator has been enabled.
            </summary>
            <param name="otherAccelerator">The target accelerator.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true iff the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, iff the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true iff the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, iff the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorId">
            <summary>
            Represents a single accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.#ctor(ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new accelerator id.
            </summary>
            <param name="type">The accelerator type.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorId.AcceleratorType">
            <summary>
            Returns the type of the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorObject">
            <summary>
            Represents an abstract accelerator object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorObject">
            <summary>
            Represents the base class for all accelerator-dependent objects.
            </summary>
            <remarks>
            Note that accelerator objects are destroyed when their parent accelerator object is destroyed.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.#ctor">
            <summary>
            Constructs an accelerator object that lives on the CPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs an accelerator object.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorStream">
            <summary>
            Represents an abstract kernel stream for async processing.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new accelerator stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.Synchronize">
            <summary>
            Synchronizes all queued operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.SynchronizeAsync">
            <summary>
            Synchronizes all queued operations asynchronously.
            </summary>
            <returns>A task object to wait for.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.BindScoped">
            <summary>
            Makes the associated accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ArrayViewSource">
            <summary>
            Internal abstract interface for generic array-view sources.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.#ctor">
            <summary>
            Initializes this array view source on the CPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Initializes this array view source.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.ArrayViewSource.NativePtr">
            <summary>
            Returns the native pointer of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.LoadEffectiveAddress(ILGPU.Index1,System.Int32)">
            <summary>
            Loads the effective address of the first memory element.
            </summary>
            <param name="index">The base index.</param>
            <param name="elementSize">The element size.</param>
            <returns>The loaded effective address.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.GetAsDebugRawArray(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ViewPointerWrapper">
            <summary>
            Creates a new view pointer wrapper that wraps a pointer reference
            inside an array view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.Create``1(``0@)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value reference to the variable.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.Create(System.IntPtr)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="value">The native value pointer.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.#ctor(System.IntPtr)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="ptr">The native value pointer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ViewPointerWrapper.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)"/>
        </member>
        <member name="T:ILGPU.Runtime.UnmanagedMemoryViewSource">
            <summary>
            Represents a view source that allocates native memory in the CPU address space.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.Create(System.Int32)">
            <summary>
            Creates a new unmanaged memory view source.
            </summary>
            <param name="sizeInBytes">The size in bytes to allocate.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.UnmanagedMemoryViewSource.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.ViewArrayWrapper">
            <summary>
            Represents a view array wrapper that wraps a <see cref="T:System.Runtime.InteropServices.GCHandle"/>
            instance. Note that this instance will not be freed automatically during
            the <see cref="M:System.IDisposable.Dispose"/> operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ViewArrayWrapper.Create``1(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Creates a new array wrapper.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="handle">The gc handle of the fixed array.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ViewArrayWrapper.ElementSize">
            <summary>
            Returns the associated element size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ViewArrayWrapper.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAccelerator">
            <summary>
            Represents a general CPU-based runtime for kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.CPUAcceleratorId">
            <summary>
            Represents the main CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.CPUAccelerators">
            <summary>
            Represents all available CPU accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="threadPriority">The thread priority of the execution threads.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.NumThreads">
            <summary>
            Returns the number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size.</param>
            <returns>The loaded kernel</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStreamInternal"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ComputeNumGroupThreads(System.Int32)">
            <summary>
            Computes the number of required threads to reach the requested group size.
            </summary>
            <param name="groupSize">The requested group size.</param>
            <returns>The number of threads to reach the requested groupn size.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Launch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Launches the given accelerator task on this accelerator.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ExecuteThread(System.Object)">
            <summary>
            Entry point for a single processing thread.
            </summary>
            <param name="arg">The relative thread index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.IL.ILCompiledKernel,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">The custom group size for the launching operation.</param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorId">
            <summary>
            Represents a single CPU accelerator reference.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorId.Instance">
            <summary>
            The main CPU accelerator id instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorId.#ctor">
            <summary>
            Constructs a new CPU accelerator instance.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernelExecutionHandler">
            <summary>
            Execution delegate for CPU kernels inside the runtime system.
            </summary>
            <param name="task">The referenced task.</param>
            <param name="groupContext">The current group context.</param>
            <param name="runtimeThreadOffset">The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).</param>
            <param name="groupSize">The group size in the scope of the runtime system.</param>
            <param name="chunkSize">The size of a grid-idx chunk to process.</param>
            <param name="chunkOffset">The offset of the current processing chunk.</param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorTask">
            <summary>
            Represents a single CPU-accelerator task.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ConstructorParameterTypes">
            <summary>
            Contains the required parameter types of the default task constructor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ExecuteParameterTypes">
            <summary>
            Contains the required parameter types of the task-execution method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.#ctor(ILGPU.Runtime.CPU.CPUKernelExecutionHandler,ILGPU.KernelConfig,ILGPU.RuntimeKernelConfig)">
            <summary>
            Constructs a new accelerator task.
            </summary>
            <param name="kernelExecutionDelegate">The execution method.</param>
            <param name="userConfig">The user-defined grid configuration.</param>
            <param name="config">The global task configuration.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserGridDim">
            <summary>
            Returns the grid dimension that was specified by the user.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserDimension">
            <summary>
            Returns the user-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GridDim">
            <summary>
            Returns the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDim">
            <summary>
            Returns the current group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDimSize">
            <summary>
            Returns the group dimension size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserRuntimeDimension">
            <summary>
            Returns the runtime-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.RuntimeDimension">
            <summary>
            Returns the runtime-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.SharedMemoryConfig">
            <summary>
            Returns the shared memory config to use.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.Execute(ILGPU.Runtime.CPU.CPURuntimeGroupContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes this task inside the runtime system.
            </summary>
            <param name="groupContext">The current group context.</param>
            <param name="runtimeThreadOffset">The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).</param>
            <param name="groupSize">The group size in the scope of the runtime system.</param>
            <param name="chunkSize">The size of a grid-idx chunk to process.</param>
            <param name="chunkOffset">The offset of the current processing chunk.</param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernel">
            <summary>
            Represents a single CPU kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo,ILGPU.Runtime.CPU.CPUKernelExecutionHandler)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
            <param name="kernelExecutionDelegate">The execution method.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.CPUAccelerator">
            <summary>
            Returns the associated CPU runtime.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer`2">
            <summary>
            Represents a managed array that was pinned for unmanaged memory accesses.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,`1)">
            <summary>
            Constructs a new pinned array.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeGroupContext">
            <summary>
            Represents a runtime context for thread groups.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemorySize">
            <summary>
            The maximum shared-memory size for a single group.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemoryChunkSize">
            <summary>
            The chunk size of shared-memory to allocate in a row.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BroadcastBufferSize">
            <summary>
            The maximum broadcast buffer size for a single object.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupCounter">
            <summary>
            A counter for the computation of interlocked group counters.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupBarrier">
            <summary>
            The general group barrier.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.broadcastBuffer">
            <summary>
            A temporary location for broadcast values.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryOffset">
            <summary>
            The current shared memory offset for allocation.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryLock">
            <summary>
            The global shared memory lock variable.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.dynamicSharedMemoryArrayLength">
            <summary>
            The current dynamic shared memory array size in bytes.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentSharedMemoryView">
            <summary>
            The current shared-memory view.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryBuffer">
            <summary>
            The actual shared-memory buffer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.advancedSharedMemoryBuffer">
            <summary>
            A temporary cache for additional shared memory requirements.
            </summary>
            <remarks>
            Note that this buffer is only required for debug CPU builds. In
            these cases, we cannot move nested <see cref="M:ILGPU.SharedMemory.Allocate``1(System.Int32)"/>
            instructions out of nested loops to provide the best debugging experience.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.advancedSharedMemoryBufferIndex">
            <summary>
            Represents the next advanced shared-memory buffer index to use.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.#ctor(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="accelerator">The target CPU accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemory">
            <summary>
            Returns the associated shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemoryInternal``1(System.Int32)">
            <summary>
            Performs an internal shared-memory allocation.
            </summary>
            <param name="extent">The number of elements to allocate.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemoryDynamic``1">
            <summary>
            Performs a dynamic shared-memory allocation.
            </summary>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemory``1(System.Int32)">
            <summary>
            Performs a shared-memory allocation.
            </summary>
            <param name="extent">The number of elements.</param>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.WaitForNextThreadIndex">
            <summary>
            This method waits for all threads to complete and
            resets all information that might be required for the next
            thread index.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Broadcast``1(``0,System.Int32)">
            <summary>
            Executes a broadcast operation.
            </summary>
            <param name="value">The desired group index.</param>
            <param name="groupIndex">The source thread index within the group.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>The number of threads for which the predicate evaluated to true.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff all threads in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff all threads in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff any thread in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff any thread in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Initialize(ILGPU.Index3,ILGPU.RuntimeSharedMemoryConfig@)">
            <summary>
            Initializes this context.
            </summary>
            <param name="groupDimension">The group dimension.</param>
            <param name="sharedMemoryConfig">The current shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.TearDown">
            <summary>
            Performs cleanup operations with respect to the previously allocated
            shared memory
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeThreadContext">
            <summary>
            Represents a runtime context for single threads.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndicesMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndices(ILGPU.Index3,ILGPU.Index3)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.gridIndexValue">
            <summary>
            The grid index within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.groupIndexValue">
            <summary>
            The group index within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.gridDimensionValue">
            <summary>
            The grid dimension within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.groupDimensionValue">
            <summary>
            The group dimension within the scheduled thread grid
            of the debug CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GridIndex">
            <summary>
            Returns the grid index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupIndex">
            <summary>
            Returns the group index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GridDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupSize">
            <summary>
            Returns the current total group size in number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupIndices(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Setups the current grid and group indices.
            </summary>
            <param name="gridIndex">The grid index.</param>
            <param name="groupIndex">The group index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.SetupDimensions(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Setups the scheduled grid and group dimensions and resets
            the current grid and group indices.
            </summary>
            <param name="gridDimension">The grid dimension.</param>
            <param name="groupDimension">The group dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUStream">
            <summary>
            Represents a CPU stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new CPU stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.ComputeManagedDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPI">
            <summary>
            Wraps the Cuda-driver API.
            </summary>
            <remarks>
            Since the current implementation of dotnetcore does not support
            platform-dependent DLL imports with different entry point and libs,
            we have to wrap the direct low-level calls with (slow) virtual dispatchers.
            This will be removed as soon as dotnetcore adds additional support.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.API.CudaAPI.Current">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary>
            Resolves the current driver version.
            </summary>
            <param name="driverVersion">The resolved driver version.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <param name="pStr">The resolved error string.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <returns>The resolved error string.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary>
            Resolves the device id for the given ordinal.
            </summary>
            <param name="device">The device id.</param>
            <param name="ordinal">The device ordinal.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceCount(System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="count">The number of devices</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="bytes">The memory buffer in bytes.</param>
            <param name="length">The maximum length to resolve.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.String@,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="name">The resolved name.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.Int64@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Resolves the compute capability of the given device.
            </summary>
            <param name="major">The major capability.</param>
            <param name="minor">The minor capability.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary>
            Creates a new context.
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary>
            Creates a new context with D3D11 support
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <param name="d3dDevice">The associated D3D11 device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)">
            <summary>
            Destroys the given context.
            </summary>
            <param name="context">The context to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)">
            <summary>
            Make the given context the current one.
            </summary>
            <param name="context">The context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext">
            <summary>
            Synchronizes the current context.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary>
            Resolves the cache configuration.
            </summary>
            <param name="config">The resolved cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary>
            Updates the cache configuration.
            </summary>
            <param name="config">The updated cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary>
            Resolves the shared-memory configuration.
            </summary>
            <param name="config">The resolved shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary>
            Updates the shared-memory configuration.
            </summary>
            <param name="config">The updated shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Resolves whether the given device can access the given peer device.
            </summary>
            <param name="canAccess">True, iff the device can access the peer device.</param>
            <param name="device">The device.</param>
            <param name="peerDevice">The peer device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary>
            Enables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary>
            Disables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary>
            Resolves the given peer attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="sourceDevice">The source device.</param>
            <param name="destinationDevice">The destination device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.Int64@,System.Int64@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the current device.
            </summary>
            <param name="devicePtr">The resulting device pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)">
            <summary>
            Frees the given device pointer.
            </summary>
            <param name="devicePtr">The device pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the host.
            </summary>
            <param name="hostPtr">The resulting host pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeHostMemory(System.IntPtr)">
            <summary>
            Frees the given host pointer.
            </summary>
            <param name="hostPtr">The host pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary>
            Resolves a pointer-attribute value.
            </summary>
            <param name="targetPtr">The target pointer.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="devicePtr">The pointer in device memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <param name="priority">The priority to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)">
            <summary>
            Destroys the given stream.
            </summary>
            <param name="stream">The stream to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeStream(System.IntPtr)">
            <summary>
            Synchronizes with the given stream.
            </summary>
            <param name="stream">The stream to synchronize with.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="numOptions">The number of jit options.</param>
            <param name="jitOptions">The jit options.</param>
            <param name="jitOptionValues">The jit values.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String,System.String@)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="errorLog">The error log.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)">
            <summary>
            Unlods the given module.
            </summary>
            <param name="kernelModule">The module to unload.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary>
            Resolves the requested function handle in the scope of the given module.
            </summary>
            <param name="kernelFunction">The resolved function.</param>
            <param name="kernelModule">The module.</param>
            <param name="functionName">The name of the function.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernelWithStruct``1(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,``0@,System.Int32)">
            <summary>
            Launches the given kernel function using a bulk structure.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="argument">The argument structure.</param>
            <param name="argumentLength">The length of the memory region in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Computes the maximum number of blocks for maximum occupancy. 
            </summary>
            <param name="numBlocks">The number of blocks.</param>
            <param name="func">The function.</param>
            <param name="blockSize">The desired block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">The minimum grid size for maximum occupancy.</param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">Computes the amount of required shared-memory for the given block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory (independent of the block size).</param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeManagedDynamicMemorySizeForBlockSize,System.Int32,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">The minimum grid size for maximum occupancy.</param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">Computes the amount of required shared-memory for the given block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory (independent of the block size).</param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI">
            <summary>
            Represents the not-supported Cuda-driver API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.FreeHostMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeHostMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.LoadModule(System.IntPtr@,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPIUnix">
            <summary>
            Represents the Cuda-driver API for Unix.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LibName">
            <summary>
            Represents the driver library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.#ctor">
            <summary>
            Intializes a new driver API for Unix.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.FreeHostMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeHostMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LoadModule(System.IntPtr@,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPIWindows">
            <summary>
            Represents the Cuda-driver API for Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LibName">
            <summary>
            Represents the driver library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.#ctor">
            <summary>
            Intializes a new driver API for Windows.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.FreeHostMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeHostMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LoadModule(System.IntPtr@,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAccelerator">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.ZeroIntPtrField">
            <summary>
            Represents a zero integer pointer field.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaAPIMethod">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.Cuda.API.CudaAPI.Current"/> property.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.LaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,System.IntPtr,System.IntPtr)"/>
            method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)" /> method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#cctor">
            <summary>
            Detects all cuda accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CurrentAPI">
            <summary>
            Returns the current Cuda-driver API.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CudaAccelerators">
            <summary>
            Represents the list of available Cuda accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaMemoryType(System.IntPtr)">
            <summary>
            Resolves the memory type of the given device pointer.
            </summary>
            <param name="value">The device pointer to check.</param>
            <returns>The resolved memory type</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new Cuda accelerator targeting the default device.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CudaAcceleratorId)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The accelerator id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SetupAccelerator">
            <summary>
            Setups all required settings.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetInstructionSet(ILGPU.Backends.PTXArchitecture,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns the PTX instruction set to use, based on the PTX architecture and installed CUDA drivers.
            </summary>
            <param name="architecture">The PTX architecture</param>
            <param name="installedDriverVersion">The CUDA driver version</param>
            <returns>The PTX instruction set</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ContextPtr">
            <summary>
            Returns the native Cuda-context ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DeviceId">
            <summary>
            Returns the device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Architecture">
            <summary>
            Returns the PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.InstructionSet">
            <summary>
            Returns the PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SharedMemoryConfiguration">
            <summary>
            Gets or sets the current shared-memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CacheConfiguration">
            <summary>
            Gets or sets the current cache configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Backend">
            <summary>
            Returns the PTX backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetFreeMemory">
            <summary>
            Queries the amount of free memory.
            </summary>
            <returns>The amount of free memory in bytes.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.PTX.PTXCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorFlags">
            <summary>
            Represents the accelerator flags for a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto">
            <summary>
            Automatic scheduling (default).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleSpin">
            <summary>
            Spin scheduling.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleYield">
            <summary>
            Yield scheduling
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleBlockingSync">
            <summary>
            Blocking synchronization as default scheduling.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorId">
            <summary>
            Represents a single Cuda accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.#ctor(System.Int32)">
            <summary>
            Constructs a new Cuda accelerator reference.
            </summary>
            <param name="deviceId">The Cuda device id.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAcceleratorId.DeviceId">
            <summary>
            Returns the Cuda device id.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaCacheConfiguration">
            <summary>
            Represents a cache configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.Default">
            <summary>
            The default cache configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferShared">
            <summary>
            Prefer shared cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferL1">
            <summary>
            Prefer L1 cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferEqual">
            <summary>
            Prefer shared or L1 cache.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersion">
            <summary>
            Represents a CUDA driver version
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromMajorMinor(System.Int32,System.Int32)">
            <summary>
            Returns the CUDA driver version from major/minor values
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The minor version</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromValue(System.Int32)">
            <summary>
            Returns the CUDA driver version from a value
            </summary>
            <param name="value">The CUDA driver value</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the given version is equal to this version.
            </summary>
            <param name="other">The other version.</param>
            <returns>True, iff the given version is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.CompareTo(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Compares this version to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to this version.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.GetHashCode">
            <summary>
            Returns the hash code of this version.
            </summary>
            <returns>The hash code of this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.ToString">
            <summary>
            Returns the string representation of the driver version.
            </summary>
            <returns>The string representation of the driver version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Implicit(ILGPU.Runtime.Cuda.CudaDriverVersion)~System.Int32">
            <summary>
            Converts a version into an int.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Equality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first and the second version are the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first and the second version are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Inequality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first and the second version are not the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first and the second version are not the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first version is less than or equal to the second version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first version is less or equal to the second version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true iff the first version is greater than or equal to the second version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, iff the first version is greater or equal to the second version.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersionUtils">
            <summary>
            Utilities for <see cref="T:ILGPU.Runtime.Cuda.CudaDriverVersion"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.ArchitectureLookup">
            <summary>
            Maps PTX architecture to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.InstructionSetLookup">
            <summary>
            Maps PTX ISA to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Backends.PTXArchitecture)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX architecture
            </summary>
            <param name="architecture">The PTX architecture</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Backends.PTXInstructionSet)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX instruction set
            </summary>
            <param name="instructionSet">The PTX instruction set</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaException">
            <summary>
            Represents a Cuda exception that can be thrown by the Cuda runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor">
            <summary>
            Constructs a new Cuda exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="error">The Cuda runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="cudaStatus">The Cuda status to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaKernel">
            <summary>
            Represents a Cuda kernel that can be directly launched on a gpu.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.modulePtr">
            <summary>
            Holds the pointer to the native Cuda module in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.functionPtr">
            <summary>
            Holds the pointer to the native Cuda function in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.ModulePtr">
            <summary>
            Returns the Cuda module ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.FunctionPtr">
            <summary>
            Returns the Cuda function ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2">
            <summary>
            Represents an unmanaged Cuda buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,`1)">
            <summary>
            Constructs a new Cuda buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryType">
            <summary>
            Represents the type of a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.None">
            <summary>
            Represents no known memory type.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Host">
            <summary>
            Represents a host pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Device">
            <summary>
            Represents a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Array">
            <summary>
            Represents a pointer to a Cuda array.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Unified">
            <summary>
            Represents a unified-memory pointer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration">
            <summary>
            Represents a shared-memory configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.Default">
            <summary>
            The default shared-memory configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.FourByteBankSize">
            <summary>
            Setup a bank size of 4 byte.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.EightByteBankSize">
            <summary>
            Setup a bank size of 8 byte.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaStream">
            <summary>
            Represents a Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator,System.IntPtr)">
            <summary>
            Constructs a new cuda stream from the given native pointer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="ptr">The native stream pointer.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new cuda stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaStream.StreamPtr">
            <summary>
            Returns the underlying native Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.ScopedAcceleratorBinding">
            <summary>
            Represents a temporary binding of an accelerator object.
            The old binding can be recovered by either <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover"/>
            or the <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose"/> method.
            </summary>
            <remarks>
            The objects implements <see cref="T:System.IDisposable"/> in order
            to use it in the scope of using statemenets
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new scoped binding.
            </summary>
            <param name="accelerator">The new accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.OldAccelerator">
            <summary>
            Returns the old accelerator that was the current one
            before the current binding operation (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.IsRecoverable">
            <summary>
            Returns true iff an old accelerator has to be recovered.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true iff the given binding is equal to the current binding.
            </summary>
            <param name="other">The other binding.</param>
            <returns>True, iff the given binding is equal to the current binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
            <remarks>The dispose method is useful in combination with using statements.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current binding.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.GetHashCode">
            <summary>
            Returns the hash code of this binding.
            </summary>
            <returns>The hash code of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.ToString">
            <summary>
            Returns the string representation of this binding.
            </summary>
            <returns>The string representation of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Equality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true iff the first and second binding are the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, iff the first and second binding are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Inequality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true iff the first and second binding are not the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, iff the first and second binding are not the same.</returns>
        </member>
        <member name="T:ILGPU.Runtime.BaseDebugArrayView`1">
            <summary>
            Base debug view.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.BaseDebugArrayView`1.view">
            <summary>
            Stores the associated view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The source array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`1">
            <summary>public
            Represents a debugger array view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView2D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView3D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`2">
            <summary>
            Represents a debugger view for generic array views.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`2.#ctor(ILGPU.ArrayView{`0,`1})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The target array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer">
            <summary>
            A static helper class for the class <see cref="T:ILGPU.Runtime.ExchangeBuffer`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Allocates a new exchange buffer that allocates the specified amount of elements
            on the current accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable async memory transfers between the CPU and the GPU.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated acclerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>The allocated exchange buffer.</returns>
            <remarks>
            This function uses the default buffer allocation mode
            <see cref="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory"/>
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer.AllocateExchangeBuffer``1(ILGPU.Runtime.Accelerator,ILGPU.Index1,ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Allocates a new exchange buffer that allocates the specified amount of elements
            on the current accelerator. Furthermore, it keeps a buffer of the same size in pinned
            CPU memory to enable async memory transfers between the CPU and the GPU.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated acclerator to use.</param>
            <param name="extent">The extent (number of elements to allocate).</param>
            <param name="mode">The current allocation mode.</param>
            <returns>The allocated exchange buffer.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBufferMode">
            <summary>
            Specifies the allocation mode for a single exchange buffer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferMode.PreferPagedLockedMemory">
            <summary>
            Prefer paged locked memory for improved transfer speeds.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBufferMode.UsePageablememory">
            <summary>
            Allocate CPU memory in pageable memory to leverage virtual memory.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer`1">
            <summary>
            A buffer that stores a specified amount of elements on the associated accelerator instance.
            Furthermore, it keeps a buffer of the same size in pinned CPU memory to enable async memory
            transfers between the CPU and the GPU.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBuffer`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ExchangeBuffer`1.CudaViewSource">
            <summary>
            Represents a view source that allocates native memory in page-locked CPU memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CudaViewSource.Create(System.Int32)">
            <summary>
            Creates a new Cuda view source.
            </summary>
            <param name="sizeInBytes">The size in bytes to allocate.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CudaViewSource.#ctor(System.IntPtr)">
            <summary>
            Creates a new unmanaged memory view source.
            </summary>
            <param name="nativePtr">The native host pointer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CudaViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CudaViewSource.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBuffer`1.cpuMemory">
            <summary>
            The internally allocated CPU memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ExchangeBuffer`1.cpuMemoryPointer">
            <summary>
            A cached version of the CPU memory pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index1},ILGPU.Runtime.ExchangeBufferMode)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The underlying memory buffer.</param>
            <param name="mode">The current buffer allocation mode.</param>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.CPUView">
            <summary>
            Returns an array view to the CPU part of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ExchangeBuffer`1.Item(ILGPU.Index1)">
            <summary>
            Returns a reference to the i-th element in CPU memory.
            </summary>
            <param name="index">The element index to access.</param>
            <returns>A reference to the i-th element in CPU memory.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CopyToAccelerator">
            <summary>
            Copes data from CPU memory to the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CopyToAccelerator(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies data from CPU memory to the associated accelerator.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CopyFromAccelerator">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.CopyFromAccelerator(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies data from the associated accelerator into CPU memory.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer{`0})~ILGPU.ArrayView{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.op_Implicit(ILGPU.Runtime.ExchangeBuffer{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.ExchangeBuffer`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorExtensionProvider`1">
            <summary>
            Represents a generic accelerator-extension provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to be created.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCPUExtension(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Creates an extension for a CPU accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCudaExtension(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Creates an extension for a Cuda accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateOpenCLExtension(ILGPU.Runtime.OpenCL.CLAccelerator)">
            <summary>
            Creates an extension for an OpenCL accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer">
            <summary>
            Represents the base interface of all memory buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer`1">
            <summary>
            Represents the generic base interface of all typed memory buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer`2">
            <summary>
            Represents the generic base interface of all memory buffers
            using n-dimensional indices.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`2.View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.GetSubView(`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.GetSubView(`1,`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`2.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ImplicitKernelLauncherArgument">
            <summary>
            Represents a launcher argument for an implicit-stream launcher.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ImplicitKernelLauncherArgument.GetKernelMethod">
            <summary>
            Represents a method to load the a kernel argument from a launcher instance.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ImplicitKernelLauncherArgument.GetStreamMethod">
            <summary>
            Represents a method to load the a stream argument from a launcher instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.#ctor(ILGPU.Runtime.Kernel,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Constructs a new instance argument.
            </summary>
            <param name="kernel">The kernel argument.</param>
            <param name="stream">The accelerator stream.</param>
        </member>
        <member name="P:ILGPU.Runtime.ImplicitKernelLauncherArgument.Kernel">
            <summary>
            Returns the associated kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ImplicitKernelLauncherArgument.Stream">
            <summary>
            Returns the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.EmitLoadKernelArgument(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading a kernel from an instance argument.
            </summary>
            <param name="argumentIdx">The index of the launcher parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.EmitLoadAcceleratorStream(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading an accelerator stream from an instance argument.
            </summary>
            <param name="argumentIdx">The index of the launcher parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="T:ILGPU.Runtime.Kernel">
            <summary>
            Represents the base class for all runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.ImplementSpecializationCacheArgs(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Implements a <see cref="T:ILGPU.Runtime.ISpecializationCacheArgs"/> interface in order to
            make the given <paramref name="typeBuilder"/> compatible with a
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/> instance.
            </summary>
            <param name="typeBuilder">The target type builder to use.</param>
            <param name="fields">The source fields used for implementation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateSpecializedLauncher``2(ILGPU.Runtime.Accelerator,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Method,``1@)">
            <summary>
            Creates a launcher delegate that uses the <see cref="T:ILGPU.Runtime.SpecializationCache`3"/>
            to created dynamically specialized kernels.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TDelegate">The lancher delegate type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelMethod">The kernel IR method.</param>
            <param name="loader">The loader instance.</param>
            <returns>A dynamic kernel launcher that automagically specializes kernels.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Constructs a new kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="compiledKernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Launcher">
            <summary>
            Returns the associated kernel launcher.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Specialization">
            <summary>
            Returns the associated specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.NumParameters">
            <summary>
            Returns the number of uniform parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateLauncherDelegate``1">
            <summary>
            Creates a launcher delegate for this kernel.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The created delegate.</returns>
            <remarks>Note that the first argument is the accelerator stream.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.InvokeLauncher``1(``0,ILGPU.Runtime.AcceleratorStream,System.Object[])">
            <summary>
            Invokes the associated launcher via reflection.
            </summary>
            <typeparam name="T">The index type T.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(ILGPU.Runtime.AcceleratorStream,``0,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="dimension">The grid dimension.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch(ILGPU.Runtime.AcceleratorStream,System.Int32,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelUtil">
            <summary>
            Contains utility methods to work with kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.TryGetKernel``1(``0,ILGPU.Runtime.Kernel@)">
            <summary>
            Tries to resolve a kernel object from a previously created kernel delegate.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <param name="kernel">The resolved kernel object (if any).</param>
            <returns>True, if a kernel object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetKernel``1(``0)">
            <summary>
            Resolves a kernel object from a previously created kernel delegate.
            If this is not possible, the method will throw an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The resolved kernel object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.KernelAccelerator`2">
            <summary>
            Represents an accelerator that manages typed kernel.
            </summary>
            <typeparam name="TCompiledKernel">The type of a compiled kernel.</typeparam>
            <typeparam name="TKernel">The type of a loaded runtime kernel</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.#ctor(ILGPU.Context,ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new kernel accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="type">The target accelerator type.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">The custom group size used for automatic blocking.</param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)">
            <summary>
            Creates an abstract kernel without an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)">
            <summary>
            Creates an abstract kernel with an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
            <param name="launcher">The actual kernel launcher method.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLauncherBuilder">
            <summary>
            Builder methods for kernel launchers.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.KernelLauncherBuilder.Index3ValueGetter">
            <summary>
            Stores all getter methods to resolve all index values of an <see cref="T:ILGPU.Index3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.GetMainIndexConstructor(System.Type)">
            <summary>
            Resolves the main constructor of the given index type.
            </summary>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <returns>The main constructor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertIndex3ToTargetType``1(ILGPU.IndexType,``0@,System.Action)">
            <summary>
            Emits code to convert an Index3 to a specific target type.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertFrom1DIndexToTargetIndexType``1(ILGPU.IndexType,``0@,System.Action)">
            <summary>
            Emits code to convert a linear index to a specific target type.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadDimension">A callback to load the referenced dimension value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions``1(System.Type,``0@,System.Action)">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions``1(System.Type,``0@,System.Action,System.Action{System.Int32})">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
            <param name="manipulateIdx">A callback to manipulate the loaded index of a given dimension.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitSharedMemorySpeficiation``1(ILGPU.Backends.EntryPoints.EntryPoint,``0@)">
            <summary>
            Emits code for loading a <see cref="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification"/> instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point for code generation.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,System.Int32)">
            <summary>
            Emits a kernel-dimension configuration. In the case of an ungrouped index type, all arguments
            will be transformed into a <see cref="T:ILGPU.KernelConfig"/> instance. Otherwise, the passed kernel
            configuration will be used without any modifications.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">The argument index of the provided launch-dimension index.</param>
            <param name="customGroupSize">The custom group size used for automatic blocking.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadRuntimeKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,System.Int32)">
            <summary>
            Emits a new runtime kernel configuration.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">The argument index of the provided launch-dimension index.</param>
            <param name="customGroupSize">The custom group size used for automatic blocking.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelArgument``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed kernel from a generic kernel instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <typeparam name="T">The kernel type.</typeparam>
            <param name="kernelArgumentIndex">The index of the launcher parameter.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadAcceleratorStream``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed accelerator stream from a generic accelerator-stream instance.
            </summary>
            <typeparam name="T">The kernel type.</typeparam>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="streamArgumentIndex">The index of the stream parameter.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLoaders">
            <summary>
            Contains extensions for convenient kernel loading of default kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="T:ILGPU.Runtime.KernelSpecialization">
            <summary>
            Represents a kernel specialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.KernelSpecialization.Empty">
            <summary>
            Represents an empty (or *no*) specialization that allows the compiler to
            freely decide on its own.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new specialization object.
            </summary>
            <param name="maxNumThreadsPerGroup">The maximum number of threads per group.</param>
            <param name="minNumGroupsPerMultiprocessor">The minimum number of groups per multiprocessor.</param>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MaxNumThreadsPerGroup">
            <summary>
            Returns the desired maximum number of threads per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MinNumGroupsPerMultiprocessor">
            <summary>
            Returns the desired minimum number of groups per multiprocessor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true iff the given specialization is equal to the current specialization.
            </summary>
            <param name="other">The other specialization.</param>
            <returns>True, iff the given specialization is equal to the current specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.IsCompatibleWith(ILGPU.Runtime.Accelerator)">
            <summary>
            Checks whether the given accelerator is compatible with the current specialization.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>True, iff the given accelerator is compatible with the current specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current specialization.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.GetHashCode">
            <summary>
            Returns the hash code of this specialization.
            </summary>
            <returns>The hash code of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.ToString">
            <summary>
            Returns the string representation of this specialization.
            </summary>
            <returns>The string representation of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Equality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true iff the specialization and second specialization are the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>True, iff the first and second specialization are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Inequality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true iff the first and second specialization are not the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>True, iff the first and second specialization are not the same.</returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int32)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="length">The length in elements.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero">
            <summary>
            Sets the contents of the given buffer to zero using
            the default accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.GetAsRawArray">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`2">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer`2.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.#ctor(ILGPU.Runtime.Accelerator,`1)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.ComputeEffectiveAddress(ILGPU.Index1)">
            <summary>
            Computes the effective address for the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The computed pointer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0@,`1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,`1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0[],`1,System.Int32,`1)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],`1,System.Int32,`1)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0,`1)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,`1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0[],System.Int32,`1,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int32,`1,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(`1,`1)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(ILGPU.Runtime.AcceleratorStream,`1,`1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.ArrayViewSource.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetSubView(`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetSubView(`1,`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0,`1})~ILGPU.ArrayView{`0,`1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBufferCache">
            <summary>
            Represents a cached memory buffer with a specific capacity.
            It minimizes reallocations in cases of requests that can also
            be handled with the currently allocated amount of memory.
            If the requested amount of memory is not sufficient, the current
            buffer will be freed and a new buffer will be allocated.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBufferCache.cache">
            <summary>
            This represents the actual memory cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">The associated accelerator to allocate memory on.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">The associated accelerator to allocate memory on.</param>
            <param name="initialLength">The initial length of the buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.CacheSizeInBytes">
            <summary>
            Returns the current cached size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.Cache">
            <summary>
            Returns the underlying memory buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.GetCacheSize``1">
            <summary>
            Returns the available number of elements of type T.
            </summary>
            <typeparam name="T">The desired element type.</typeparam>
            <returns>The available number of elements of type T.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Allocate``1(ILGPU.Index1)">
            <summary>
            Allocates the given number of elements and returns an array view
            to the requested amount of elements. Note that the array view
            points to not-initialized memory.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <returns>An array view that can access the requested number of elements.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyTo``1(ILGPU.Runtime.AcceleratorStream,``0@,ILGPU.Index1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyFrom``1(ILGPU.Runtime.AcceleratorStream,``0,ILGPU.Index1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`1">
            <summary>
            Represents a 1D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#Index1}#View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int32)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int32,System.Int32)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(ILGPU.Index2)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int32,System.Int32)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(ILGPU.Index3)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index1})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetSubView(ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetSubView(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.Index1},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index1},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.Index1},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index1},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0@,ILGPU.Index1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.Index1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0[],ILGPU.Index1,System.Int32,ILGPU.Index1)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.Index1,System.Int32,ILGPU.Index1)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0,ILGPU.Index1)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.Index1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0[],System.Int32,ILGPU.Index1,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int32,ILGPU.Index1,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.ArrayView{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer2D`1">
            <summary>
            Represents a 2D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#Index2}#View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[][],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[][],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents to this buffer from the given jagged array.
            Note that child arrays that are not initialized or do not have the appropriate
            length specified by <paramref name="extent"/> will be skipped and the values
            will have their default value.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer to the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer to the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[][],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer to the given jagged array using
            the default accelerator stream.
            Note that child arrays that are not initialized will be skipped during the copy operation.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[][],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer to the given jagged array.
            Note that child arrays that are not initialized will be skipped during the copy operation.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAs2DArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetRowView(System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer2D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index2})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetSubView(ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetSubView(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.Index2},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index2},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.Index2},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index2},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0@,ILGPU.Index2)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.Index2)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[],ILGPU.Index2,System.Int32,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.Index2,System.Int32,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0,ILGPU.Index2)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.Index2)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[],System.Int32,ILGPU.Index2,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int32,ILGPU.Index2,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.ArrayView2D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index2}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer3D`1">
            <summary>
            Represents a 3D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.ILGPU#Runtime#IMemoryBuffer{T,ILGPU#Index3}#View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Depth">
            <summary>
            Returns the depth (z-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[][][],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer from the given jagged array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[][][],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer from the given jagged array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents to this buffer to the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents to this buffer to the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[][][],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer to the given jagged array using
            the default accelerator stream.
            Note that child arrays that are not initialized will be skipped during the copy operation.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[][][],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer to the given jagged array.
            Note that child arrays that are not initialized will be skipped during the copy operation.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray">
            <summary>
            Copies the current contents into a new 3D array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the current contents into a new 2D array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAs3DArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the current contents into a new 2D array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetRowView(System.Int32,System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSliceView(System.Int32)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer3D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index3})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsRawArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset in bytes.</param>
            <param name="byteExtent">The extent in bytes (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Runtime.AcceleratorStream,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSubView(ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSubView(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.ArrayView{`0,ILGPU.Index3},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target view using
            the default accelerator stream.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index3},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.ArrayView{`0,ILGPU.Index3},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source view using
            the default accelerator stream.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0,ILGPU.Index3},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer using
            the default accelerator stream.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0@,ILGPU.Index3)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory using the default accelerator stream.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0@,ILGPU.Index3)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[],ILGPU.Index3,System.Int32,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer into the given array using
            the default accelerator stream.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.AcceleratorStream,`0[],ILGPU.Index3,System.Int32,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0,ILGPU.Index3)">
            <summary>
            Copies a single element from CPU memory to this buffer using
            the default accelerator stream.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0,ILGPU.Index3)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[],System.Int32,ILGPU.Index3,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array using
            the default accelerator stream.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,`0[],System.Int32,ILGPU.Index3,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.ArrayView3D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index3}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.API.CLAPI">
            <summary>
            Wraps the OpenCL-driver API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetNumPlatforms(System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetPlatforms(System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetPlatforms(System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetPlatformInfo(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLPlatformInfoType)">
            <summary>
            Resolves platform information as string value.
            </summary>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetPlatformInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLPlatformInfoType)">
            <summary>
            Resolves platform information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceType,System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceType,System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseDevice(System.IntPtr)">
            <summary>
            Releases the given device.
            </summary>
            <param name="device">The device</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDeviceInfo(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceInfoType)">
            <summary>
            Resolves device information as string value.
            </summary>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceInfoType)">
            <summary>
            Resolves device information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceInfoType,``0@)">
            <summary>
            Resolves device information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="value">The resolved value.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLDeviceInfoType,``0[])">
            <summary>
            Resolves device information as array of typed structure values of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The elements to fill.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetExtension``1(System.IntPtr)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetExtension``1(System.IntPtr,System.String)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <param name="name">The extension name.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CreateContext(System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new context.
            </summary>
            <param name="device">The device.</param>
            <param name="context">The created context.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseContext(System.IntPtr)">
            <summary>
            Releases the given context.
            </summary>
            <param name="context">The context to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CreateCommandQueue(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new command queue.
            </summary>
            <param name="device">The associated device.</param>
            <param name="context">The parent context.</param>
            <param name="queue">The created queue.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseCommandQueue(System.IntPtr)">
            <summary>
            Releases the given command queue.
            </summary>
            <param name="queue">The queue to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.FlushCommandQueue(System.IntPtr)">
            <summary>
            Flushes the given command queue.
            </summary>
            <param name="queue">The queue to flush.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.FinishCommandQueue(System.IntPtr)">
            <summary>
            Finishes the given command queue.
            </summary>
            <param name="queue">The queue to finish.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CreateProgram(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new program.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The program source.</param>
            <param name="program">The created program.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.BuildProgram(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="device">The associated device.</param>
            <param name="options">The program build options (refer to the OpenCL specification).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.BuildProgram(System.IntPtr,System.IntPtr*,System.Int32,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="numDevices">The number of associated devices.</param>
            <param name="options">The program build options (refer to the OpenCL specification).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.BuildProgram(System.IntPtr,System.IntPtr[],System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="options">The program build options (refer to the OpenCL specification).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetProgramBuildInfo(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.API.CLProgramBuildInfo,System.IntPtr,System.Void*,System.IntPtr@)">
            <summary>
            Resolves program build information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="paramName">The param name to query.</param>
            <param name="paramValueSize">The size of the parameter value.</param>
            <param name="paramValue">The parameter value to use.</param>
            <param name="paramValueSizeRet">The resulting parameter value size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetProgramBuildLog(System.IntPtr,System.IntPtr,System.String@)">
            <summary>
            Resolves program build-log information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="buildLog">The build log (if any).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseProgram(System.IntPtr)">
            <summary>
            Releases the given program.
            </summary>
            <param name="program">The program to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CreateKernel(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new kernel.
            </summary>
            <param name="program">The source program to use.</param>
            <param name="kernelName">The kernel name in the scope of the program.</param>
            <param name="kernel">The created kernel.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseKernel(System.IntPtr)">
            <summary>
            Releases the given kernel.
            </summary>
            <param name="kernel">The kernel to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.SetKernelArgument``1(System.IntPtr,System.Int32,``0)">
            <summary>
            Sets a kernel argument.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="value">The managed value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.SetKernelArgumentUnsafe(System.IntPtr,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.SetKernelArgumentUnsafeWithKernel(ILGPU.Runtime.OpenCL.CLKernel,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.LaunchKernelUnsafe(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr*,System.IntPtr*,System.IntPtr*)">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.LaunchKernel(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.IntPtr[])">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.API.CLKernelWorkGroupInfoType)">
            <summary>
            Resolves kernel work-group information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.API.CLKernelWorkGroupInfoType,``0[])">
            <summary>
            Resolves kernel work-group information as typed array of values of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The desired elements.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CreateBuffer(System.IntPtr,ILGPU.Runtime.OpenCL.API.CLBufferFlags,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new buffer.
            </summary>
            <param name="context">The context.</param>
            <param name="flags">The buffer flags.</param>
            <param name="size">The buffer size in bytes.</param>
            <param name="hostPointer">The host pointer to copy from (if any).</param>
            <param name="buffer">The created buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReleaseBuffer(System.IntPtr)">
            <summary>
            Releases the given buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.ReadBuffer(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Reads from a buffer into host memory.
            </summary>
            <param name="queue">The queue.</param>
            <param name="buffer">The source buffer to read from.</param>
            <param name="blockingRead">True, if the operation blocks until completion.</param>
            <param name="offset">The source offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The target pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.WriteBuffer(System.IntPtr,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Writes to a buffer from host memory.
            </summary>
            <param name="queue">The queue.</param>
            <param name="buffer">The target buffer to write to.</param>
            <param name="blockingWrite">True, if the operation blocks until completion.</param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The source pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.FillBuffer``1(System.IntPtr,System.IntPtr,``0,System.IntPtr,System.IntPtr)">
            <summary>
            Fills the given buffer with the specified pattern.
            </summary>
            <typeparam name="T">The data type used for filling.</typeparam>
            <param name="queue">The queue.</param>
            <param name="buffer">The target buffer to fill.</param>
            <param name="pattern">The pattern value used for filling.j</param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The size in bytes to fill.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.API.CLAPI.CopyBuffer(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Copies the contents of the source buffer into the target buffer.
            </summary>
            <param name="queue">The queue.</param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="targetBuffer">The target buffer.</param>
            <param name="sourceOffset">The source offset inside the source buffer.</param>
            <param name="targetOffset">The target offset inside the target buffer.</param>
            <param name="size">The size to copy in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.API.NativeMethods">
            <summary>
            Native methods for the <see cref="T:ILGPU.Runtime.OpenCL.API.CLAPI"/> class.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.API.NativeMethods.LibName">
            <summary>
            Represents the driver library name.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAcceleratorVendor">
            <summary>
            Represents the major OpenCL accelerator vendor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.AMD">
            <summary>
            Represents an AMD accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Intel">
            <summary>
            Represents an Intel accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Nvidia">
            <summary>
            Represents an NVIDIA accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAcceleratorVendor.Other">
            <summary>
            Represents another OpenCL device vendor.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAccelerator">
            <summary>
            Represents an OpenCL accelerator (CPU or GPU device).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.MaxNumDevicesPerPlatform">
            <summary>
            The maximum number of devices per platform.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.LaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.API.CLAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.API.CLError)" /> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummyKernelSource">
            <summary>
            The first dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummySubGroupKernelSource">
            <summary>
            The second dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.SubGroupExtensions">
            <summary>
            All subgroup extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.#cctor">
            <summary>
            Detects all OpenCL accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CLAccelerators">
            <summary>
            Represents the list of available and supported OpenCL accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.AllCLAccelerators">
            <summary>
            Represents the list of all available OpenCL accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.OpenCL.CLAcceleratorId)">
            <summary>
            Constructs a new OpenCL accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The accelerator id.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitVendorFeatures">
            <summary>
            Initializes major vendor features.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitSubGroupSupport(ILGPU.Runtime.OpenCL.CLAcceleratorId)">
            <summary>
            Initializes support for sub groups.
            </summary>
            <param name="acceleratorId">The current accelerator id.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformId">
            <summary>
            Returns the native OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformName">
            <summary>
            Returns the associated platform name.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.VendorName">
            <summary>
            Returns the associated vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Vendor">
            <summary>
            Returns the main accelerator vendor type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceId">
            <summary>
            Returns the native OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.ContextPtr">
            <summary>
            Returns the native OpenCL-context ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.SubGroupSupport">
            <summary>
            Returns true if this accelerator has sub-group support.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Backend">
            <summary>
            Returns the OpenCL backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.AllocateInternal``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.AllocateInternal``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAcceleratorId">
            <summary>
            Represents a single OpenCL accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new OpenCL accelerator reference.
            </summary>
            <param name="platformId">The OpenCL platform id.</param>
            <param name="deviceId">The OpenCL device id.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.PlatformId">
            <summary>
            Returns the OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.DeviceId">
            <summary>
            Returns the OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAcceleratorId.Extensions">
            <summary>
            Returns all extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasExtension(System.String)">
            <summary>
            Returns true if the given extension is supported.
            </summary>
            <param name="extension">The extension to look for.</param>
            <returns>True, if the extension is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasAllExtensions``1(``0)">
            <summary>
            Returns true if all of the given extensions are supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if all of the given extensions are supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.HasAnyExtension``1(``0)">
            <summary>
            Returns true if any of the given extensions is supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if any of the given extensions is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.API.CLKernelSubGroupInfoType,System.Int32,System.IntPtr*,``0@)">
            <summary>
            Tries to resolves kernel sub-group information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="numInputs">The number of inputs.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.API.CLKernelSubGroupInfoType,System.IntPtr[],``0@)">
            <summary>
            Resolves kernel sub-group information as typed structure value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLException">
            <summary>
            Represents an OpenCL exception that can be thrown by the OpenCL runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(ILGPU.Runtime.OpenCL.API.CLError)">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
            <param name="errorCode">The OpenCL runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.API.CLError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The OpenCL error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLKernel">
            <summary>
            Represents an OpenCL kernel that can be directly launched on an OpenCL device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadKernel(ILGPU.Runtime.OpenCL.CLAccelerator,System.String,ILGPU.Backends.OpenCL.CLCVersion,System.IntPtr@,System.IntPtr@,System.String@)">
            <summary>
            Loads the given OpenCL kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="source">The OpenCL source code.</param>
            <param name="version">The OpenCL C version.</param>
            <param name="programPtr">The created program pointer.</param>
            <param name="kernelPtr">The created kernel pointer.</param>
            <param name="errorLog">The error log (if any).</param>
            <returns>True, if the program and the kernel could be loaded successfully.</returns>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.programPtr">
            <summary>
            Holds the pointer to the native OpenCL program in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.kernelPtr">
            <summary>
            Holds the pointer to the native OpenCL kernel in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.ProgramPtr">
            <summary>
            Returns the OpenCL program ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.KernelPtr">
            <summary>
            Returns the OpenCL kernel ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2">
            <summary>
            Represents an unmanaged OpenCL buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,`1)">
            <summary>
            Constructs a new OpenCL buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{`0},ILGPU.Index1)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLStream">
            <summary>
            Represents an OpenCL stream.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLStream.CommandQueue">
            <summary>
            Returns the native OpenCL command queue.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.ISpecializationCacheArgs">
            <summary>
            The base interface for all automatically generated specialization argument structures
            that are used in combination with the <see cref="T:ILGPU.Runtime.SpecializationCache`3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ISpecializationCacheArgs.GetSpecializedArg(System.Int32)">
            <summary>
            Returns the i-th argument as an untyped managed object.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved untyped managed object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializationCache`3">
            <summary>
            A specialization cache to store and managed specialized kernel versions.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TArgs">The arguments key type for caching.</typeparam>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.#ctor(ILGPU.Runtime.Accelerator,ILGPU.IR.Method,`0,ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new specialization cache.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="kernelMethod">The IR kernel method.</param>
            <param name="loader">The loader instance.</param>
            <param name="entry">The associated entry point.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelContext">
            <summary>
            Returns the associated raw kernel context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelMethod">
            <summary>
            Returns the associated raw kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Loader">
            <summary>
            Returns the associated kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Entry">
            <summary>
            Returns the current entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelSpecialization">
            <summary>
            Returns the current kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.CreateKernelWrapper(ILGPU.IR.Method,`1@)">
            <summary>
            Creates a kernel wrapper method that invokes the actual kernel method
            with specialized values.
            </summary>
            <param name="kernelMethod">The kernel method to invoke.</param>
            <param name="args">The target arguments.</param>
            <returns>The created IR method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.SpecializeKernel(`1@)">
            <summary>
            Specializes a kernel with the given customized arguments.
            </summary>
            <param name="args">The argument structure.</param>
            <returns>The specialized kernel launcher.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.GetOrCreateKernel(`1)">
            <summary>
            Gets or creates a specialized kernel based on the arguments provided.
            </summary>
            <param name="args">The arguments used to specialize the kernel.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue">
            <summary>
            Provides static helper functions for the structure <see cref="T:ILGPU.Runtime.SpecializedValue`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue.New``1(``0@)">
            <summary>
            Creates a new specialized value instance.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value.</param>
            <returns>The new specialized value.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue`1">
            <summary>
            Represents a dynamically specialized value that can be passed to a kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.#ctor(`0)">
            <summary>
            Constructs a new specialized value.
            </summary>
            <param name="value">The underlying value to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializedValue`1.Value">
            <summary>
            Gets or sets the underlying value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the other specialized value is equal to this value.
            </summary>
            <param name="other">The other specialized value.</param>
            <returns>True, if the other specialized value is equal to this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Equality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Inequality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are not the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are not the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Implicit(ILGPU.Runtime.SpecializedValue{`0})~`0">
            <summary>
            Converts the given <see cref="T:ILGPU.Runtime.SpecializedValue`1"/> instance into its underlying value.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:ILGPU.SharedMemory">
            <summary>
            Containts methods to allocate and managed shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1">
            <summary>
            Allocates a single element in shared memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>An allocated element in shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1(System.Int32)">
            <summary>
            Allocates a chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``2(``1)">
            <summary>
            Allocates a chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1(ILGPU.Index1)">
            <summary>
            Allocates a 1D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2D``1(ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Allocates a 2D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 2D buffer.</param>
            <param name="height">The height of the 2D buffer.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2D``1(ILGPU.Index2)">
            <summary>
            Allocates a 2D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3D``1(ILGPU.Index1,ILGPU.Index1,ILGPU.Index1)">
            <summary>
            Allocates a 3D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 3D buffer.</param>
            <param name="height">The height of the 3D buffer.</param>
            <param name="depth">The depth of the 3D buffer.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3D``1(ILGPU.Index3)">
            <summary>
            Allocates a 3D chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.GetDynamic``1">
            <summary>
            Gets a chunk of dynamically allocated shared memory as typed memory view
            with the element type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>A view to a dynamically allocated region of shared memory.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`2">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(`0,`1)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(System.ValueTuple{`0,`1})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(ILGPU.Util.DataBlock{`0,`1})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(ILGPU.Util.DataBlock{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(System.ValueTuple{`0,`1})~ILGPU.Util.DataBlock{`0,`1}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Equality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Inequality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`3">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(`0,`1,`2)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(System.ValueTuple{`0,`1,`2})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(System.ValueTuple{`0,`1,`2})~ILGPU.Util.DataBlock{`0,`1,`2}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`4">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~ILGPU.Util.DataBlock{`0,`1,`2,`3}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`5">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`5.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`6">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`6.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`7">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`7.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`8">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`8.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`9">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`9.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`10">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`10.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`11">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`11.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`12">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`12.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`13">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`13.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`14">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`14.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`15">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
            <typeparam name="T15">The element type of the 15-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`15.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item15">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DisposeBase">
            <summary>
            Utility base class for correct implementations of IDisposable
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose">
            <summary>
            Triggers the 'dispose' functionality of this object.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Finalize">
            <summary>
            The custom finalizer for dispose-base objects.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.DisposeDriver(System.Boolean)">
            <summary>
            Thread-safe wrapper for the actual dispose functionality.
            </summary>
            <param name="disposing">True, iff the method is not called by the finalizer.</param>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)">
            <summary>
            Frees allocated resources.
            </summary>
            <param name="disposing">True, iff the method is not called by the finalizer.</param>
        </member>
        <member name="T:ILGPU.Util.MethodExtensions">
            <summary>
            Extensions for methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.GetParameterOffset(System.Reflection.MethodBase)">
            <summary>
            Returns a parameter offset of 1 for instance methods and 0 for static methods.
            </summary>
            <param name="method">The method to compute the parameter offset for.</param>
            <returns>A parameter offset of 1 for instance methods and 0 for static methods.</returns>
        </member>
        <member name="T:ILGPU.Util.Short2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(ILGPU.Util.Short2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Multiply(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Division(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Subtraction(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Addition(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(System.Int16)~ILGPU.Util.Short2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~System.ValueTuple{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~ILGPU.Util.DataBlock{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Equality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Inequality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Short3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(ILGPU.Util.Short3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Multiply(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Division(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Subtraction(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Addition(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(System.Int16)~ILGPU.Util.Short3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~System.ValueTuple{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Equality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Inequality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Short4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(ILGPU.Util.Short4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Multiply(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Division(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Subtraction(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Addition(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(System.Int16)~ILGPU.Util.Short4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~System.ValueTuple{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Equality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Inequality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Int2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(ILGPU.Util.Int2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Multiply(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Division(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Subtraction(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Addition(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(System.Int32)~ILGPU.Util.Int2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~System.ValueTuple{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~ILGPU.Util.DataBlock{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Equality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Inequality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Int3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(ILGPU.Util.Int3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Multiply(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Division(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Subtraction(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Addition(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(System.Int32)~ILGPU.Util.Int3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~System.ValueTuple{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Equality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Inequality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Int4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(ILGPU.Util.Int4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Multiply(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Division(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Subtraction(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Addition(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(System.Int32)~ILGPU.Util.Int4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Equality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Inequality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Long2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(ILGPU.Util.Long2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Multiply(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Division(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Subtraction(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Addition(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(System.Int64)~ILGPU.Util.Long2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~System.ValueTuple{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~ILGPU.Util.DataBlock{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Equality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Inequality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Long3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(ILGPU.Util.Long3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Multiply(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Division(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Subtraction(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Addition(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(System.Int64)~ILGPU.Util.Long3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~System.ValueTuple{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Equality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Inequality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Long4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(ILGPU.Util.Long4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Multiply(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Division(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Subtraction(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Addition(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(System.Int64)~ILGPU.Util.Long4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Equality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Inequality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Float2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(ILGPU.Util.Float2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Multiply(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Division(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Subtraction(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Addition(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(System.Single)~ILGPU.Util.Float2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~System.ValueTuple{System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~ILGPU.Util.DataBlock{System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Equality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Inequality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Float3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(ILGPU.Util.Float3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Multiply(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Division(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Subtraction(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Addition(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(System.Single)~ILGPU.Util.Float3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~System.ValueTuple{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Equality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Inequality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Float4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(ILGPU.Util.Float4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Multiply(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Division(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Subtraction(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Addition(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(System.Single)~ILGPU.Util.Float4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~System.ValueTuple{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Equality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Inequality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Double2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(ILGPU.Util.Double2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Multiply(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Division(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Subtraction(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Addition(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(System.Double)~ILGPU.Util.Double2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~System.ValueTuple{System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~ILGPU.Util.DataBlock{System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Equality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Inequality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Double3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(ILGPU.Util.Double3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Multiply(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Division(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Subtraction(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Addition(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(System.Double)~ILGPU.Util.Double3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~System.ValueTuple{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Equality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Inequality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Double4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(ILGPU.Util.Double4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Multiply(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Division(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Subtraction(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Addition(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(System.Double)~ILGPU.Util.Double4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Equality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Inequality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.TypeExtensions">
            <summary>
            Represents general type extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsArrayViewType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is an array view type.
            </summary>
            <param name="type">The source type.</param>
            <param name="elementType">The resolved element type in case of an array view.</param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSpecializedType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is a specialized type.
            </summary>
            <param name="type">The source type.</param>
            <param name="nestedType">The resolved element type in case of an array view.</param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.HasSupportedBaseClass(System.Type)">
            <summary>
            Returns true if the given type has a supported base class.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type has a supported base class.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Returns true if the given type is a delegate type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a delegate type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetDelegateInvokeMethod(System.Type)">
            <summary>
            Resolves the delegate invocation method of the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved delegate invocation method.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetReturnType(System.Reflection.MethodBase)">
            <summary>
            Resolves the return type of the given method.
            </summary>
            <param name="method">The method base.</param>
            <returns>The resolved return type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsVoidPtr(System.Type)">
            <summary>
            Returns true if the given type is a void pointer.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a void pointer.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsPassedViaPtr(System.Type)">
            <summary>
            Returns true if the given type is passed via reference.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is passed via reference.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsTreatedAsPtr(System.Type)">
            <summary>
            Returns true if the given type is treated as a pointer type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is treated as a pointer type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSignedInt(System.Type)">
            <summary>
            Returns true iff the given type represents a signed int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents a signed int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsUnsignedInt(System.Type)">
            <summary>
            Returns true iff the given type represents an unsigned int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents an unsigned int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetManagedType(ILGPU.BasicValueType)">
            <summary>
            Resolves the managed type for the given basic-value type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved managed type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(ILGPU.BasicValueType,System.Boolean)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <param name="isUnsigned">True, if the basic value type should be interpreted as unsigned.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(System.Type)">
            <summary>
            Returns true iff the given type represents an int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents an int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(System.Type)">
            <summary>
            Returns true iff the given type represents a float.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents a float.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.ToTargetUnsignedFlags(System.Type)">
            <summary>
            Converts the given type into conversion target flags.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The required conversion flags.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetStringRepresentation(System.Type)">
            <summary>
            Returns the string representation of the given type.
            </summary>
            <param name="type">The type to convert to a string.</param>
            <returns>The string represenation of the given type.</returns>
        </member>
        <member name="T:ILGPU.Util.Utilities">
            <summary>
            General util methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(System.Boolean,``0@,``0@)">
            <summary>
            Swaps the given values iff swap is true.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="performSwap">True, iff the values should be swapped.</param>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
            <returns>True, iff the values were swapped.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.Select``1(System.Boolean,``0,``0)">
            <summary>
            Selects between the two given values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="takeFirst">True, if the <paramref name="first"/> value should be taken.</param>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The selected value.</returns>
            <remarks>
            Note that this function will be mapped to the ILGPU IR.
            </remarks>
        </member>
        <member name="T:ILGPU.VariableView`1">
            <summary>
            Represents a general view to a variable.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="F:ILGPU.VariableView`1.VariableSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new variable view.
            </summary>
            <param name="baseView">The base view.</param>
        </member>
        <member name="P:ILGPU.VariableView`1.BaseView">
            <summary>
            Returns the base view.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Value">
            <summary>
            Accesses the stored value.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyTo(ILGPU.VariableView{`0})">
            <summary>
            Copies the current value to the memory location of the given view.
            </summary>
            <param name="targetView">The target view.</param>
            <remarks>The target view must be accessible from the this view (e.g. same accelerator).</remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyFrom(ILGPU.VariableView{`0})">
            <summary>
            Copies the value from the memory location of the given view.
            </summary>
            <param name="sourceView">The source view.</param>
            <remarks>The source view must be accessible from the this view (e.g. same accelerator).</remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.GetSubView``1(System.Int32)">
            <summary>
            Creates a sub view into this view.
            </summary>
            <param name="offsetInBytes"></param>
        </member>
        <member name="M:ILGPU.VariableView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="T:ILGPU.Warp">
            <summary>
            Contains warp-wide functions.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.LaneIdx">
            <summary>
            Returns the current lane index [0, WarpSize - 1].
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsFirstLane">
            <summary>
            Returns true iff the current lane is the first lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsLastLane">
            <summary>
            Returns true iff the current lane is the last lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpIdx">
            <summary>
            Returns the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <returns>The current warp index in the range [0, NumUsedWarps - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpIdx(ILGPU.Index1)">
            <summary>
            Computes the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <param name="groupThreadIdx">The current thread index within the current group.</param>
            <returns>The current warp index in the range [0, NumUsedWarps - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpThreadIdx(ILGPU.Index1)">
            <summary>
            Computes the current thread within a warp in the range [0, WarpSize - 1].
            </summary>
            <param name="groupThreadIdx">The current thread index within the current group.</param>
            <returns>The current warp thread index in the range [0, WarpSize - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.Barrier">
            <summary>
            Executes a thread barrier in the scope of a warp.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the warp.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
            <param name="value">The value to broadcast.</param>
            <param name="laneIndex">The source thread index within the warp.</param>
            <remarks>
            Note that the group index must be the same for all threads in the warp.</remarks>
        </member>
    </members>
</doc>
